// Generated by the V compiler


var $global = (new Function("return this"))();
function $ref(value) { if (value instanceof $ref) { return value; } this.val = value; } 
$ref.prototype.valueOf = function() { return this.val; } 
const $process = {
  arch: "js",
  platform: "browser",
  cwd: function() { return "" }
}
const $os = {
  endianess: "LE",
}
function checkDefine(key) {
	if (globalThis.hasOwnProperty(key)) { return !!globalThis[key]; } return false;
}
function BreakException() {}
function ContinueException() {}
function ReturnException(val) { this.val = val; }
function Array_rune_arr_eq(a,b) {
	if (a.arr.length != b.arr.length) {
		return new bool(false);
	}
	for (let i = 0; i < a.len; ++i) {
		if (!vEq(a.arr.get(new int(i)),b.arr.get(new int(i)))) {
			return new bool(false);
		}
	}
	return new bool(true);
}

function Array_int_contains(a,v) {
	for (let i = 0; i < a.len; ++i) {
		if (vEq(a.arr.get(new int(i)),v)) {
			return new bool(true);
		}
	}
	return new bool(false);
}

function compare_RepIndex_by_idx(a,b) {
	if (a.val.idx.valueOf() < b.val.idx.valueOf()) return -1;
	else return 1;
}

function Array_string_contains(a,v) {
	for (let i = 0; i < a.len; ++i) {
		if (a.arr.get(new int(i)).str ==  v.str) {
			return new bool(true);
		}
	}
	return new bool(false);
}

function time__Duration_alias_eq(a,b) {
	return new bool(vEq(a,b));
}

function time__FormatTime_str(it) { /* gen_str_for_enum */
	switch(it) {
		case time__FormatTime.hhmm12: return new string("hhmm12");
		case time__FormatTime.hhmm24: return new string("hhmm24");
		case time__FormatTime.hhmmss12: return new string("hhmmss12");
		case time__FormatTime.hhmmss24: return new string("hhmmss24");
		case time__FormatTime.hhmmss24_milli: return new string("hhmmss24_milli");
		case time__FormatTime.hhmmss24_micro: return new string("hhmmss24_micro");
		case time__FormatTime.no_time: return new string("no_time");
		default: return new string("unknown enum value");
	}
}
function time__FormatDate_str(it) { /* gen_str_for_enum */
	switch(it) {
		case time__FormatDate.ddmmyy: return new string("ddmmyy");
		case time__FormatDate.ddmmyyyy: return new string("ddmmyyyy");
		case time__FormatDate.mmddyy: return new string("mmddyy");
		case time__FormatDate.mmddyyyy: return new string("mmddyyyy");
		case time__FormatDate.mmmd: return new string("mmmd");
		case time__FormatDate.mmmdd: return new string("mmmdd");
		case time__FormatDate.mmmddyy: return new string("mmmddyy");
		case time__FormatDate.mmmddyyyy: return new string("mmmddyyyy");
		case time__FormatDate.no_date: return new string("no_date");
		case time__FormatDate.yyyymmdd: return new string("yyyymmdd");
		case time__FormatDate.yymmdd: return new string("yymmdd");
		default: return new string("unknown enum value");
	}
}
function Array_u8_str(a) { return indent_Array_u8_str(a, 0);}
function indent_Array_u8_str(a, indent_count) {
	let sb = strings__new_builder(a.len * 10);
	strings__Builder_write_string(sb, new string("["));
	for (let i = 0; i < a.len; ++i) {
		let it = a.arr.get(new int(i));
		strings__Builder_write_string(sb, new string(""));
		let x = u8_str_escaped(  it);
		strings__Builder_write_string(sb, x);
		if (i < a.len-1) {
			strings__Builder_write_string(sb, new string(", "));
		}
	}
	strings__Builder_write_string(sb, new string("]"));
	let res = strings__Builder_str(sb);
	return res;
}
function anon_fn_js__eventtarget_js__event_$copy (x) { return x; }
function anon_fn_js__window_js__devicemotionevent__interface_$copy (x) { return x; }
function anon_fn_js__window_js__deviceorientationevent__interface_$copy (x) { return x; }
// V_COMMIT_HASH f2f6ea5
// V_CURRENT_COMMIT_HASH f2f6ea5

let wasmExportObject;
const loadRoutine = async () => {
}
// https://www.npmjs.com/package/fast-deep-equal - 3/3/2021
const envHasBigInt64Array = typeof BigInt64Array !== 'undefined';
function vEq(a, b) {
	if (a === b) return true;

	if (a && b && typeof a == 'object' && typeof b == 'object') {
		if (a.constructor !== b.constructor) return false;
		// we want to convert all V types to JS for comparison.
		if ('$toJS' in a)
			a = a.$toJS();

		if ('$toJS' in b)
			b = b.$toJS();

		var length, i, keys;
		if (Array.isArray(a)) {
			length = a.length;
			if (length != b.length) return false;
			for (i = length; i-- !== 0;)
				if (!vEq(a[i], b[i])) return false;
			return true;
		}

		if (typeof Map != 'undefined') {
			if ((a instanceof Map) && (b instanceof Map)) {
				if (a.size !== b.size) return false;
				for (i of a.entries())
					if (!b.has(i[0])) return false;
				for (i of a.entries())
					if (!vEq(i[1], b.get(i[0]))) return false;
				return true;
			}

			if ((a instanceof Set) && (b instanceof Set)) {
				if (a.size !== b.size) return false;
				for (i of a.entries())
					if (!b.has(i[0])) return false;
				return true;
			}
		}
		if (typeof ArrayBuffer != 'undefined') {
			if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
				length = a.length;
				if (length != b.length) return false;
				for (i = length; i-- !== 0;)
					if (a[i] !== b[i]) return false;
				return true;
			}
		}

		if (typeof RegExp != 'undefined') {
			if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;
		}
		if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();
		if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();

		keys = Object.keys(a);
		length = keys.length;
		if (length !== Object.keys(b).length) return false;

		for (i = length; i-- !== 0;)
			if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;

		for (i = length; i-- !== 0;) {
			var key = keys[i];

			if (!vEq(a[key], b[key])) return false;
		}

		return true;
	}

	// true if both NaN, false otherwise
	return a!==a && b!==b;
};

function $sortComparator(a, b)
{
a = a.$toJS();
b = b.$toJS();
if (a > b) return 1;
if (a < b) return -1;
return 0;


}

/** @namespace strings */
function strings__Builder(val) { return val;  }
/**
 * @function
 * @param {int} initial_size
 * @returns {strings__Builder}
*/
function strings__new_builder(initial_size) {
	try {
		return new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {byte} data
 * @returns {void}
*/
function strings__Builder_write_byte(b, data) {
b = new $ref(b)
	try {
		array_push(b.valueOf(),data,false);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function strings__Builder_clear(b) {
b = new $ref(b)
	try {
		/** @type {strings__Builder} */
		b.val = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)})).val;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u8} data
 * @returns {void}
*/
function strings__Builder_write_u8(b, data) {
b = new $ref(b)
	try {
		array_push(b.valueOf(),data,false);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_u8} data
 * @returns {int}
*/
function strings__Builder_write(b, data) {
b = new $ref(b)
	try {
		if ((new bool(data.len.valueOf() == new int(0).valueOf())).valueOf()) {
			const _tmp1 = new _option({});
			_tmp1.state = new u8(0);_tmp1.data = new int(0)
			return _tmp1;}
		array_push(b.valueOf(),data.arr.arr,true);
		const _tmp2 = new _option({});
		_tmp2.state = new u8(0);_tmp2.data = data.len
		return _tmp2;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} n
 * @returns {u8}
*/
function strings__Builder_byte_at(b, n) {
b = new $ref(b)
	try {
		{
			return b.valueOf().arr.get(new int(n.valueOf()));
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s
 * @returns {void}
*/
function strings__Builder_write_string(b, s) {
b = new $ref(b)
	try {
		if ((new bool(s.len.valueOf() == new int(0).valueOf())).valueOf()) {
			return;
		}
		for (const c of s.str.split('').map(c => new u8(c))) {
			try { 
				array_push(b.valueOf(),c,false);
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s
 * @returns {void}
*/
function strings__Builder_writeln(b, s) {
b = new $ref(b)
	try {
		if ((new bool(s.len.valueOf() > new int(0).valueOf())).valueOf()) {
			strings__Builder_write_string(b.valueOf(),s);
		}
		array_push(b.valueOf(),new int(10),false);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function strings__Builder_str(b) {
b = new $ref(b)
	try {
		/** @type {string} */
		const s = new string(new string(""));
		for (const c of b.val.arr.arr)
		s.str += String.fromCharCode(+c)
		array_trim(b.valueOf(),new int(0));
		return s;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} n
 * @returns {string}
*/
function strings__Builder_cut_last(b, n) {
b = new $ref(b)
	try {
		/** @type {int} */
		const cut_pos = new int(new int( b.val.len.valueOf() - n.valueOf()));
		/** @type {strings__Builder} */
		const x = array_slice(b.valueOf(),cut_pos, b.valueOf().len);
		/** @type {string} */
		const res = new string(array_bytestr(x,));
		array_trim(b.valueOf(),cut_pos);
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} pos
 * @returns {void}
*/
function strings__Builder_go_back_to(b, pos) {
b = new $ref(b)
	try {
		array_trim(b.valueOf(),pos);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} n
 * @returns {void}
*/
function strings__Builder_go_back(b, n) {
b = new $ref(b)
	try {
		array_trim(b.valueOf(),new int( b.val.len.valueOf() - n.valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} pos
 * @returns {string}
*/
function strings__Builder_cut_to(b, pos) {
b = new $ref(b)
	try {
		if ((new bool(pos.valueOf() > b.val.len.valueOf())).valueOf()) {
			return new string("");
		}
		return strings__Builder_cut_last(b.valueOf(),new int( b.val.len.valueOf() - pos.valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_rune} runes
 * @returns {void}
*/
function strings__Builder_write_runes(b, runes) {
b = new $ref(b)
	try {
		for (const r of runes) {
			try { 
				/** @type {string} */
				const res = new string(rune_str(r));
				res.str = String.fromCharCode(r.val)
				array_push(b.valueOf(),string_bytes(res,).arr.arr,true);
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} n
 * @returns {string}
*/
function strings__Builder_after(b, n) {
b = new $ref(b)
	try {
		if ((new bool(n.valueOf() >= b.val.len.valueOf())).valueOf()) {
			return new string("");
		}
		/** @type {array} */
		const x = array_slice(b.valueOf(),n, b.val.len);
		return array_bytestr(x,);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} n
 * @returns {string}
*/
function strings__Builder_last_n(b, n) {
b = new $ref(b)
	try {
		if ((new bool(n.valueOf() >= b.val.len.valueOf())).valueOf()) {
			return new string("");
		}
		/** @type {array} */
		const x = array_slice(b.valueOf(),new int( b.val.len.valueOf() - n.valueOf()), b.val.len);
		return array_bytestr(x,);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace strings */
/**
 * @function
 * @param {string} a
 * @param {string} b
 * @returns {int}
*/
function strings__levenshtein_distance(a, b) {
	try {
		/** @type {Array_int} */
		let f = array_repeat(new array(new array_buffer({arr: [new int(new int(0))], len: new int(1), cap: new int(1)})),new int( b.len.valueOf() + new int(1).valueOf()));
		for (let j = new int(0); j < f.len; j = new int(j + 1)) {
			try { 
				/** @type {int} */
				f.arr.set(new int(j.valueOf()),new int(j));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		for (const ca of a.str.split('').map(c => new u8(c))) {
			try { 
				/** @type {int} */
				let j = new int(new int(1));
				/** @type {int} */
				let fj1 = new int(f.arr.get(new int(new int(0).valueOf())));
				f.arr.get(new int(new int(0).valueOf())).val ++;
				for (const cb of b.str.split('').map(c => new u8(c))) {
					try { 
						/** @type {int} */
						let mn = new int(((new bool(new int( f.arr.get(new int(j.valueOf())).valueOf() + new int(1).valueOf()).valueOf() <= new int( f.arr.get(new int(new int( j.valueOf() - new int(1).valueOf()).valueOf())).valueOf() + new int(1).valueOf()).valueOf())).valueOf() ? new int( f.arr.get(new int(j.valueOf())).valueOf() + new int(1).valueOf()) : new int( f.arr.get(new int(new int( j.valueOf() - new int(1).valueOf()).valueOf())).valueOf() + new int(1).valueOf())));
						if ((new bool(cb.valueOf() != ca.valueOf())).valueOf()) {
							/** @type {int} */
							mn = new int(((new bool(mn.valueOf() <= new int( fj1.valueOf() + new int(1).valueOf()).valueOf())).valueOf() ? mn : new int( fj1.valueOf() + new int(1).valueOf())));
						} else {
							/** @type {int} */
							mn = new int(((new bool(mn.valueOf() <= fj1.valueOf())).valueOf() ? mn : fj1));
						}
						/** @type {int} */
						fj1 = new int(f.arr.get(new int(j.valueOf())));
						/** @type {int} */
						f.arr.set(new int(j.valueOf()),new int(mn));
						j.val ++;
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return f.arr.get(new int(new int( f.len.valueOf() - new int(1).valueOf()).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} a
 * @param {string} b
 * @returns {f32}
*/
function strings__levenshtein_distance_percentage(a, b) {
	try {
		/** @type {int} */
		const d = new int(strings__levenshtein_distance(a, b));
		/** @type {int} */
		const l = new int(((new bool(a.len.valueOf() >= b.len.valueOf())).valueOf() ? a.len : b.len));
		return new f32( (new f32( new f32(1.00).valueOf() - new f32( new f32(d).valueOf() / new f32(l).valueOf()).valueOf())).valueOf() * new f32(100.00).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s1
 * @param {string} s2
 * @returns {f32}
*/
function strings__dice_coefficient(s1, s2) {
	try {
		if ((new bool( new bool(s1.len.valueOf() == new int(0).valueOf()).valueOf() || new bool(s2.len.valueOf() == new int(0).valueOf()).valueOf())).valueOf()) {
			return new f32(0.0);
		}
		if ((new bool(s1.valueOf() == s2.valueOf())).valueOf()) {
			return new f32(1.0);
		}
		if ((new bool( new bool(s1.len.valueOf() < new int(2).valueOf()).valueOf() || new bool(s2.len.valueOf() < new int(2).valueOf()).valueOf())).valueOf()) {
			return new f32(0.0);
		}
		/** @type {string} */
		const a = new string(((new bool(s1.len.valueOf() > s2.len.valueOf())).valueOf() ? s1 : s2));
		/** @type {string} */
		const b = new string(((new bool(a.valueOf() == s1.valueOf())).valueOf() ? s2 : s1));
		/** @type {Map_string_int} */
		let first_bigrams = new map(
			{});
		for (let i = new int(0); i < new int( a.len.valueOf() - new int(1).valueOf()); i = new int(i + 1)) {
			try { 
				/** @type {string} */
				const bigram = new string(string_slice(a,i, new int_literal( i.valueOf() + new int(2).valueOf())));
				/** @type {int} */
				const q = new int(((first_bigrams.has(bigram.$toJS())).valueOf() ? new int( first_bigrams.get(bigram.$toJS()).valueOf() + new int(1).valueOf()) : new int(1)));
				/** @type {int} */
				first_bigrams.length++;
				first_bigrams.map[bigram.$toJS()] = new int(q);
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {int} */
		let intersection_size = new int(new int(0));
		for (let i = new int(0); i < new int( b.len.valueOf() - new int(1).valueOf()); i = new int(i + 1)) {
			try { 
				/** @type {string} */
				const bigram = new string(string_slice(b,i, new int_literal( i.valueOf() + new int(2).valueOf())));
				/** @type {int} */
				const count = new int(((first_bigrams.has(bigram.$toJS())).valueOf() ? first_bigrams.get(bigram.$toJS()) : new int(0)));
				if ((new bool(count.valueOf() > new int(0).valueOf())).valueOf()) {
					/** @type {int} */
					first_bigrams.length++;
					first_bigrams.map[bigram.$toJS()] = new int(new int( count.valueOf() - new int(1).valueOf()));
					intersection_size.val ++;
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new f32( (new f32( new f32(2.0).valueOf() * new f32(intersection_size).valueOf())).valueOf() / (new f32( new f32( new f32(a.len).valueOf() + new f32(b.len).valueOf()).valueOf() - new int(2).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace strings */
/**
 * @function
 * @param {u8} c
 * @param {int} n
 * @returns {string}
*/
function strings__repeat(c, n) {
	try {
		if ((new bool(n.valueOf() <= new int(0).valueOf())).valueOf()) {
			return new string("");
		}
		/** @type {Array_u8} */
		const arr = array_repeat(new array(new array_buffer({arr: [new u8(c)], len: new int(1), cap: new int(1)})),n);
		return array_bytestr(arr,);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s
 * @param {int} n
 * @returns {string}
*/
function strings__repeat_string(s, n) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = s.str.repeat(n.valueOf())
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace strings */
/**
 * @function
 * @param {string} input
 * @param {u8} start
 * @param {u8} end
 * @returns {string}
*/
function strings__find_between_pair_u8(input, start, end) {
	try {
		/** @type {int} */
		let marks = new int(new int(0));
		/** @type {int} */
		let start_index = new int(new int(-1));
		for (const [i, b] of Array.from(input.str.split('').entries(), ([i, b]) => [i, new u8(b)])) {
			try { 
				if ((new bool(b.valueOf() == start.valueOf())).valueOf()) {
					if ((new bool(start_index.valueOf() == new int(-1).valueOf())).valueOf()) {
						/** @type {int} */
						start_index = new int(new int( i.valueOf() + new int(1).valueOf()));
					}
					marks.val ++;
					continue;
				}
				if ((new bool(start_index.valueOf() > new int(0).valueOf())).valueOf()) {
					if ((new bool(b.valueOf() == end.valueOf())).valueOf()) {
						marks.val --;
						if ((new bool(marks.valueOf() == new int(0).valueOf())).valueOf()) {
							return string_slice(input,start_index, i);
						}
					}
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new string("");
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} input
 * @param {rune} start
 * @param {rune} end
 * @returns {string}
*/
function strings__find_between_pair_rune(input, start, end) {
	try {
		/** @type {int} */
		let marks = new int(new int(0));
		/** @type {int} */
		let start_index = new int(new int(-1));
		/** @type {Array_rune} */
		const runes = string_runes(input,);
		for (const [i, r] of runes.entries()) {
			try { 
				if ((new bool(r.valueOf() == start.valueOf())).valueOf()) {
					if ((new bool(start_index.valueOf() == new int(-1).valueOf())).valueOf()) {
						/** @type {int} */
						start_index = new int(new int( i.valueOf() + new int(1).valueOf()));
					}
					marks.val ++;
					continue;
				}
				if ((new bool(start_index.valueOf() > new int(0).valueOf())).valueOf()) {
					if ((new bool(r.valueOf() == end.valueOf())).valueOf()) {
						marks.val --;
						if ((new bool(marks.valueOf() == new int(0).valueOf())).valueOf()) {
							return Array_rune_string(array_slice(runes,start_index, i),);
						}
					}
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new string("");
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} input
 * @param {string} start
 * @param {string} end
 * @returns {string}
*/
function strings__find_between_pair_string(input, start, end) {
	try {
		/** @type {int} */
		let start_index = new int(new int(-1));
		/** @type {int} */
		let marks = new int(new int(0));
		/** @type {Array_rune} */
		const start_runes = string_runes(start,);
		/** @type {Array_rune} */
		const end_runes = string_runes(end,);
		/** @type {Array_rune} */
		const runes = string_runes(input,);
		/** @type {int} */
		let i = new int(new int(0));
		for (; +new bool(i.valueOf() < runes.len.valueOf()); i.val ++) {
			try { 
				let start_slice = array_slice(runes,i, new int( i.valueOf() + start_runes.len.valueOf())); if ((new bool(Array_rune_arr_eq(start_slice, start_runes))).valueOf()) {
					i = new int(new int( new int( i.valueOf() + start_runes.len.valueOf()).valueOf() - new int(1).valueOf())); if ((new bool(start_index.valueOf() < new int(0).valueOf())).valueOf()) {
						start_index = new int(new int( i.valueOf() + new int(1).valueOf())); }
					marks.val ++;
					continue;
				}
				if ((new bool(start_index.valueOf() > new int(0).valueOf())).valueOf()) {
					let end_slice = array_slice(runes,i, new int( i.valueOf() + end_runes.len.valueOf())); if ((new bool(Array_rune_arr_eq(end_slice, end_runes))).valueOf()) {
						marks.val --;
						if ((new bool(marks.valueOf() == new int(0).valueOf())).valueOf()) {
							return Array_rune_string(array_slice(runes,start_index, i),);
						}
						i = new int(new int( new int( i.valueOf() + end_runes.len.valueOf()).valueOf() - new int(1).valueOf())); continue;
					}
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new string("");
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s
 * @returns {Array_string}
*/
function strings__split_capital(s) {
	try {
		/** @type {Array_string} */
		let res = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		/** @type {int} */
		let word_start = new int(new int(0));
		for (const [idx, c] of Array.from(s.str.split('').entries(), ([idx, c]) => [idx, new u8(c)])) {
			try { 
				if ((new bool( new bool(c.valueOf() >= new u8('A').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('Z').valueOf()).valueOf())).valueOf()) {
					if ((new bool(word_start.valueOf() != idx.valueOf())).valueOf()) {
						array_push(res,string_slice(s,word_start, idx),false);
					}
					/** @type {int} */
					word_start = new int(idx);
					continue;
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		if ((new bool(word_start.valueOf() != s.len.valueOf())).valueOf()) {
			array_push(res,string_slice(s,word_start, s.len),false);
		}
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace math.bits */
/** @constant {u32} */
let math__bits__de_bruijn32 = undefined;
/** @constant {Array_u8} */
let math__bits__de_bruijn32tab = undefined;
/** @constant {u64} */
let math__bits__de_bruijn64 = undefined;
/** @constant {Array_u8} */
let math__bits__de_bruijn64tab = undefined;

/** @constant {u64} */
let math__bits__m0 = undefined;
/** @constant {u64} */
let math__bits__m1 = undefined;
/** @constant {u64} */
let math__bits__m2 = undefined;
/** @constant {u64} */
let math__bits__m3 = undefined;
/** @constant {u64} */
let math__bits__m4 = undefined;

/** @constant {u32} */
let math__bits__max_u32 = undefined;
/** @constant {u64} */
let math__bits__max_u64 = undefined;

/**
 * @function
 * @param {u8} x
 * @returns {int}
*/
function math__bits__leading_zeros_8(x) {
	try {
		return new int( new int(8).valueOf() - math__bits__len_8(x).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u16} x
 * @returns {int}
*/
function math__bits__leading_zeros_16(x) {
	try {
		return new int( new int(16).valueOf() - math__bits__len_16(x).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u32} x
 * @returns {int}
*/
function math__bits__leading_zeros_32(x) {
	try {
		return new int( new int(32).valueOf() - math__bits__len_32(x).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} x
 * @returns {int}
*/
function math__bits__leading_zeros_64(x) {
	try {
		return new int( new int(64).valueOf() - math__bits__len_64(x).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u8} x
 * @returns {int}
*/
function math__bits__trailing_zeros_8(x) {
	try {
		return new int(math__bits__ntz_8_tab.arr.get(new int(x.valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u16} x
 * @returns {int}
*/
function math__bits__trailing_zeros_16(x) {
	try {
		if ((new bool(x.valueOf() == new int(0).valueOf())).valueOf()) {
			return new int(16);
		}
		return new int(math__bits__de_bruijn32tab.arr.get(new int(new u32( new u32( new u32(new u16( x.valueOf() & -x.val .valueOf())).valueOf() * math__bits__de_bruijn32.valueOf()).valueOf() >> (new int(27)).valueOf()).valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u32} x
 * @returns {int}
*/
function math__bits__trailing_zeros_32(x) {
	try {
		if ((new bool(x.valueOf() == new int(0).valueOf())).valueOf()) {
			return new int(32);
		}
		return new int(math__bits__de_bruijn32tab.arr.get(new int(new u32( new u32( (new u32( x.valueOf() & -x.val .valueOf())).valueOf() * math__bits__de_bruijn32.valueOf()).valueOf() >> (new int(27)).valueOf()).valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} x
 * @returns {int}
*/
function math__bits__trailing_zeros_64(x) {
	try {
		if ((new bool(x.valueOf() == new int(0).valueOf())).valueOf()) {
			return new int(64);
		}
		return new int(math__bits__de_bruijn64tab.arr.get(new int(new u64( BigInt(new u64( BigInt((new u64( BigInt(x.valueOf()) & BigInt(-x.val .valueOf()))).valueOf()) * BigInt(math__bits__de_bruijn64.valueOf())).valueOf()) >> BigInt((new int(58)).valueOf())).valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u8} x
 * @returns {int}
*/
function math__bits__ones_count_8(x) {
	try {
		return new int(math__bits__pop_8_tab.arr.get(new int(x.valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u16} x
 * @returns {int}
*/
function math__bits__ones_count_16(x) {
	try {
		return new int(new u8( math__bits__pop_8_tab.arr.get(new int(new u16( x.valueOf() >> new int(8).valueOf()).valueOf())).valueOf() + math__bits__pop_8_tab.arr.get(new int(new u16( x.valueOf() & new int(0xff).valueOf()).valueOf())).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u32} x
 * @returns {int}
*/
function math__bits__ones_count_32(x) {
	try {
		return new int(new u8( new u8( new u8( math__bits__pop_8_tab.arr.get(new int(new u32( x.valueOf() >> new int(24).valueOf()).valueOf())).valueOf() + math__bits__pop_8_tab.arr.get(new int(new u32( new u32( x.valueOf() >> new int(16).valueOf()).valueOf() & new int(0xff).valueOf()).valueOf())).valueOf()).valueOf() + math__bits__pop_8_tab.arr.get(new int(new u32( new u32( x.valueOf() >> new int(8).valueOf()).valueOf() & new int(0xff).valueOf()).valueOf())).valueOf()).valueOf() + math__bits__pop_8_tab.arr.get(new int(new u32( x.valueOf() & new int(0xff).valueOf()).valueOf())).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} x
 * @returns {int}
*/
function math__bits__ones_count_64(x) {
	try {
		/** @type {u64} */
		let y = new u64(new u64( BigInt((new u64( BigInt(new u64( BigInt(x.valueOf()) >> BigInt(new u64(BigInt(1n)).valueOf())).valueOf()) & BigInt((new u64( BigInt(math__bits__m0.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) + BigInt((new u64( BigInt(x.valueOf()) & BigInt((new u64( BigInt(math__bits__m0.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf())));
		/** @type {u64} */
		y = new u64(new u64( BigInt((new u64( BigInt(new u64( BigInt(y.valueOf()) >> BigInt(new u64(BigInt(2n)).valueOf())).valueOf()) & BigInt((new u64( BigInt(math__bits__m1.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) + BigInt((new u64( BigInt(y.valueOf()) & BigInt((new u64( BigInt(math__bits__m1.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf())));
		/** @type {u64} */
		y = new u64(new u64( BigInt((new u64( BigInt((new u64( BigInt(y.valueOf()) >> BigInt(new int(4).valueOf()))).valueOf()) + BigInt(y.valueOf()))).valueOf()) & BigInt((new u64( BigInt(math__bits__m2.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf())));
		/** @type {u64} */
		y.val = y + new u64(new u64( BigInt(y.valueOf()) >> BigInt(new int(8).valueOf())));
		/** @type {u64} */
		y.val = y + new u64(new u64( BigInt(y.valueOf()) >> BigInt(new int(16).valueOf())));
		/** @type {u64} */
		y.val = y + new u64(new u64( BigInt(y.valueOf()) >> BigInt(new int(32).valueOf())));
		return new int( new int(y).valueOf() & (new int_literal( (new int(128)).valueOf() - new int(1).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @constant {u8} */
let math__bits__n8 = undefined;
/** @constant {u16} */
let math__bits__n16 = undefined;
/** @constant {u32} */
let math__bits__n32 = undefined;
/** @constant {u64} */
let math__bits__n64 = undefined;

/* [inline] */
/**
 * @function
 * @param {u8} x
 * @param {int} k
 * @returns {u8}
*/
function math__bits__rotate_left_8(x, k) {
	try {
		/** @type {u8} */
		const s = new u8(new u8( new u8(k).valueOf() & (new u8( math__bits__n8.valueOf() - new int(1).valueOf())).valueOf()));
		return new u8( (new u8( x.valueOf() << s.valueOf())).valueOf() | (new u8( x.valueOf() >> (new u8( math__bits__n8.valueOf() - s.valueOf())).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u16} x
 * @param {int} k
 * @returns {u16}
*/
function math__bits__rotate_left_16(x, k) {
	try {
		/** @type {u16} */
		const s = new u16(new u16( new u16(k).valueOf() & (new u16( math__bits__n16.valueOf() - new int(1).valueOf())).valueOf()));
		return new u16( (new u16( x.valueOf() << s.valueOf())).valueOf() | (new u16( x.valueOf() >> (new u16( math__bits__n16.valueOf() - s.valueOf())).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u32} x
 * @param {int} k
 * @returns {u32}
*/
function math__bits__rotate_left_32(x, k) {
	try {
		/** @type {u32} */
		const s = new u32(new u32( new u32(k).valueOf() & (new u32( math__bits__n32.valueOf() - new int(1).valueOf())).valueOf()));
		return new u32( (new u32( x.valueOf() << s.valueOf())).valueOf() | (new u32( x.valueOf() >> (new u32( math__bits__n32.valueOf() - s.valueOf())).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u64} x
 * @param {int} k
 * @returns {u64}
*/
function math__bits__rotate_left_64(x, k) {
	try {
		/** @type {u64} */
		const s = new u64(new u64( BigInt(new u64(k).valueOf()) & BigInt((new u64( BigInt(math__bits__n64.valueOf()) - BigInt(new u64(BigInt(1n)).valueOf()))).valueOf())));
		return new u64( BigInt((new u64( BigInt(x.valueOf()) << BigInt(s.valueOf()))).valueOf()) | BigInt((new u64( BigInt(x.valueOf()) >> BigInt((new u64( BigInt(math__bits__n64.valueOf()) - BigInt(s.valueOf()))).valueOf()))).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u8} x
 * @returns {u8}
*/
function math__bits__reverse_8(x) {
	try {
		return math__bits__rev_8_tab.arr.get(new int(x.valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u16} x
 * @returns {u16}
*/
function math__bits__reverse_16(x) {
	try {
		return new u16( new u16(math__bits__rev_8_tab.arr.get(new int(new u16( x.valueOf() >> new int(8).valueOf()).valueOf()))).valueOf() | (new u16( new u16(math__bits__rev_8_tab.arr.get(new int(new u16( x.valueOf() & new int(0xff).valueOf()).valueOf()))).valueOf() << new int(8).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u32} x
 * @returns {u32}
*/
function math__bits__reverse_32(x) {
	try {
		/** @type {u64} */
		let y = new u64((new u64( BigInt((new u64( BigInt(new u32( x.valueOf() >> new int(1).valueOf()).valueOf()) & BigInt((new u64( BigInt(math__bits__m0.valueOf()) & BigInt(math__bits__max_u32.valueOf()))).valueOf()))).valueOf()) | BigInt((new u64( BigInt((new u64( BigInt(x.valueOf()) & BigInt((new u64( BigInt(math__bits__m0.valueOf()) & BigInt(math__bits__max_u32.valueOf()))).valueOf()))).valueOf()) << BigInt(new int(1).valueOf()))).valueOf()))));
		/** @type {u64} */
		y = new u64((new u64( BigInt((new u64( BigInt(new u64( BigInt(y.valueOf()) >> BigInt(new int(2).valueOf())).valueOf()) & BigInt((new u64( BigInt(math__bits__m1.valueOf()) & BigInt(math__bits__max_u32.valueOf()))).valueOf()))).valueOf()) | BigInt((new u64( BigInt((new u64( BigInt(y.valueOf()) & BigInt((new u64( BigInt(math__bits__m1.valueOf()) & BigInt(math__bits__max_u32.valueOf()))).valueOf()))).valueOf()) << BigInt(new int(2).valueOf()))).valueOf()))));
		/** @type {u64} */
		y = new u64((new u64( BigInt((new u64( BigInt(new u64( BigInt(y.valueOf()) >> BigInt(new int(4).valueOf())).valueOf()) & BigInt((new u64( BigInt(math__bits__m2.valueOf()) & BigInt(math__bits__max_u32.valueOf()))).valueOf()))).valueOf()) | BigInt((new u64( BigInt((new u64( BigInt(y.valueOf()) & BigInt((new u64( BigInt(math__bits__m2.valueOf()) & BigInt(math__bits__max_u32.valueOf()))).valueOf()))).valueOf()) << BigInt(new int(4).valueOf()))).valueOf()))));
		return math__bits__reverse_bytes_32(new u32(y));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u64} x
 * @returns {u64}
*/
function math__bits__reverse_64(x) {
	try {
		/** @type {u64} */
		let y = new u64((new u64( BigInt((new u64( BigInt(new u64( BigInt(x.valueOf()) >> BigInt(new u64(BigInt(1n)).valueOf())).valueOf()) & BigInt((new u64( BigInt(math__bits__m0.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) | BigInt((new u64( BigInt((new u64( BigInt(x.valueOf()) & BigInt((new u64( BigInt(math__bits__m0.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) << BigInt(new int(1).valueOf()))).valueOf()))));
		/** @type {u64} */
		y = new u64((new u64( BigInt((new u64( BigInt(new u64( BigInt(y.valueOf()) >> BigInt(new u64(BigInt(2n)).valueOf())).valueOf()) & BigInt((new u64( BigInt(math__bits__m1.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) | BigInt((new u64( BigInt((new u64( BigInt(y.valueOf()) & BigInt((new u64( BigInt(math__bits__m1.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) << BigInt(new int(2).valueOf()))).valueOf()))));
		/** @type {u64} */
		y = new u64((new u64( BigInt((new u64( BigInt(new u64( BigInt(y.valueOf()) >> BigInt(new u64(BigInt(4n)).valueOf())).valueOf()) & BigInt((new u64( BigInt(math__bits__m2.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) | BigInt((new u64( BigInt((new u64( BigInt(y.valueOf()) & BigInt((new u64( BigInt(math__bits__m2.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) << BigInt(new int(4).valueOf()))).valueOf()))));
		return math__bits__reverse_bytes_64(y);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u16} x
 * @returns {u16}
*/
function math__bits__reverse_bytes_16(x) {
	try {
		return new u16( (new u16( x.valueOf() >> new int(8).valueOf())).valueOf() | (new u16( x.valueOf() << new int(8).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u32} x
 * @returns {u32}
*/
function math__bits__reverse_bytes_32(x) {
	try {
		/** @type {u64} */
		const y = new u64((new u64( BigInt((new u64( BigInt(new u32( x.valueOf() >> new int(8).valueOf()).valueOf()) & BigInt((new u64( BigInt(math__bits__m3.valueOf()) & BigInt(math__bits__max_u32.valueOf()))).valueOf()))).valueOf()) | BigInt((new u64( BigInt((new u64( BigInt(x.valueOf()) & BigInt((new u64( BigInt(math__bits__m3.valueOf()) & BigInt(math__bits__max_u32.valueOf()))).valueOf()))).valueOf()) << BigInt(new int(8).valueOf()))).valueOf()))));
		return new u32(new u64( BigInt((new u64( BigInt(y.valueOf()) >> BigInt(new int(16).valueOf()))).valueOf()) | BigInt((new u64( BigInt(y.valueOf()) << BigInt(new int(16).valueOf()))).valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u64} x
 * @returns {u64}
*/
function math__bits__reverse_bytes_64(x) {
	try {
		/** @type {u64} */
		let y = new u64((new u64( BigInt((new u64( BigInt(new u64( BigInt(x.valueOf()) >> BigInt(new u64(BigInt(8n)).valueOf())).valueOf()) & BigInt((new u64( BigInt(math__bits__m3.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) | BigInt((new u64( BigInt((new u64( BigInt(x.valueOf()) & BigInt((new u64( BigInt(math__bits__m3.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) << BigInt(new u64(BigInt(8n)).valueOf()))).valueOf()))));
		/** @type {u64} */
		y = new u64((new u64( BigInt((new u64( BigInt(new u64( BigInt(y.valueOf()) >> BigInt(new u64(BigInt(16n)).valueOf())).valueOf()) & BigInt((new u64( BigInt(math__bits__m4.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) | BigInt((new u64( BigInt((new u64( BigInt(y.valueOf()) & BigInt((new u64( BigInt(math__bits__m4.valueOf()) & BigInt(math__bits__max_u64.valueOf()))).valueOf()))).valueOf()) << BigInt(new u64(BigInt(16n)).valueOf()))).valueOf()))));
		return new u64( BigInt((new u64( BigInt(y.valueOf()) >> BigInt(new int(32).valueOf()))).valueOf()) | BigInt((new u64( BigInt(y.valueOf()) << BigInt(new int(32).valueOf()))).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u8} x
 * @returns {int}
*/
function math__bits__len_8(x) {
	try {
		return new int(math__bits__len_8_tab.arr.get(new int(x.valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u16} x
 * @returns {int}
*/
function math__bits__len_16(x) {
	try {
		/** @type {u16} */
		let y = new u16(x);
		/** @type {int} */
		let n = new int(new int(0));
		if ((new bool(y.valueOf() >= new int(256).valueOf())).valueOf()) {
			/** @type {u16} */
			y.val = Math.floor(y >> new u16(new int(8)));
			/** @type {int} */
			n = new int(new int(8));
		}
		return new int( n.valueOf() + new int(math__bits__len_8_tab.arr.get(new int(y.valueOf()))).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u32} x
 * @returns {int}
*/
function math__bits__len_32(x) {
	try {
		/** @type {u32} */
		let y = new u32(x);
		/** @type {int} */
		let n = new int(new int(0));
		if ((new bool(y.valueOf() >= (new int(65536)).valueOf())).valueOf()) {
			/** @type {u32} */
			y.val = Math.floor(y >> new u32(new int(16)));
			/** @type {int} */
			n = new int(new int(16));
		}
		if ((new bool(y.valueOf() >= (new int(256)).valueOf())).valueOf()) {
			/** @type {u32} */
			y.val = Math.floor(y >> new u32(new int(8)));
			/** @type {int} */
			n.val = Math.floor(n + new int(new int(8)));
		}
		return new int( n.valueOf() + new int(math__bits__len_8_tab.arr.get(new int(y.valueOf()))).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} x
 * @returns {int}
*/
function math__bits__len_64(x) {
	try {
		/** @type {u64} */
		let y = new u64(x);
		/** @type {int} */
		let n = new int(new int(0));
		if ((new bool(y.valueOf() >= new u64( BigInt(new u64(BigInt(1n)).valueOf()) << BigInt(new u64(BigInt(32n)).valueOf())).valueOf())).valueOf()) {
			/** @type {u64} */
			y.val = y >> new u64(new int(32));
			/** @type {int} */
			n = new int(new int(32));
		}
		if ((new bool(y.valueOf() >= new u64( BigInt(new u64(BigInt(1n)).valueOf()) << BigInt(new u64(BigInt(16n)).valueOf())).valueOf())).valueOf()) {
			/** @type {u64} */
			y.val = y >> new u64(new int(16));
			/** @type {int} */
			n.val = Math.floor(n + new int(new int(16)));
		}
		if ((new bool(y.valueOf() >= new u64( BigInt(new u64(BigInt(1n)).valueOf()) << BigInt(new u64(BigInt(8n)).valueOf())).valueOf())).valueOf()) {
			/** @type {u64} */
			y.val = y >> new u64(new int(8));
			/** @type {int} */
			n.val = Math.floor(n + new int(new int(8)));
		}
		return new int( n.valueOf() + new int(math__bits__len_8_tab.arr.get(new int(y.valueOf()))).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u32} x
 * @param {u32} y
 * @param {u32} carry
 * @returns {multi_return_u32_u32}
*/
function math__bits__add_32(x, y, carry) {
	try {
		/** @type {u64} */
		const sum64 = new u64(new u64( BigInt(new u64( BigInt(new u64(x).valueOf()) + BigInt(new u64(y).valueOf())).valueOf()) + BigInt(new u64(carry).valueOf())));
		/** @type {u32} */
		const sum = new u32(new u32(sum64));
		/** @type {u32} */
		const carry_out = new u32(new u32(new u64( BigInt(sum64.valueOf()) >> BigInt(new int(32).valueOf()))));
		return [sum, carry_out];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} x
 * @param {u64} y
 * @param {u64} carry
 * @returns {multi_return_u64_u64}
*/
function math__bits__add_64(x, y, carry) {
	try {
		/** @type {u64} */
		const sum = new u64(new u64( BigInt(new u64( BigInt(x.valueOf()) + BigInt(y.valueOf())).valueOf()) + BigInt(carry.valueOf())));
		/** @type {u64} */
		const carry_out = new u64(new u64( BigInt((new u64( BigInt((new u64( BigInt(x.valueOf()) & BigInt(y.valueOf()))).valueOf()) | BigInt((new u64( BigInt((new u64( BigInt(x.valueOf()) | BigInt(y.valueOf()))).valueOf()) & BigInt(~sum.val .valueOf()))).valueOf()))).valueOf()) >> BigInt(new int(63).valueOf())));
		return [sum, carry_out];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u32} x
 * @param {u32} y
 * @param {u32} borrow
 * @returns {multi_return_u32_u32}
*/
function math__bits__sub_32(x, y, borrow) {
	try {
		/** @type {u32} */
		const diff = new u32(new u32( new u32( x.valueOf() - y.valueOf()).valueOf() - borrow.valueOf()));
		/** @type {u32} */
		const borrow_out = new u32(new u32( (new u32( (new u32( ~x.val .valueOf() & y.valueOf())).valueOf() | (new u32( ~(new u32( x.valueOf() ^ y.valueOf())).val .valueOf() & diff.valueOf())).valueOf())).valueOf() >> new int(31).valueOf()));
		return [diff, borrow_out];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} x
 * @param {u64} y
 * @param {u64} borrow
 * @returns {multi_return_u64_u64}
*/
function math__bits__sub_64(x, y, borrow) {
	try {
		/** @type {u64} */
		const diff = new u64(new u64( BigInt(new u64( BigInt(x.valueOf()) - BigInt(y.valueOf())).valueOf()) - BigInt(borrow.valueOf())));
		/** @type {u64} */
		const borrow_out = new u64(new u64( BigInt((new u64( BigInt((new u64( BigInt(~x.val .valueOf()) & BigInt(y.valueOf()))).valueOf()) | BigInt((new u64( BigInt(~(new u64( BigInt(x.valueOf()) ^ BigInt(y.valueOf()))).val .valueOf()) & BigInt(diff.valueOf()))).valueOf()))).valueOf()) >> BigInt(new int(63).valueOf())));
		return [diff, borrow_out];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @constant {u64} */
let math__bits__two32 = undefined;
/** @constant {u64} */
let math__bits__mask32 = undefined;
/** @constant {string} */
const math__bits__overflow_error = new string("Overflow Error");
/** @constant {string} */
const math__bits__divide_error = new string("Divide Error");

/**
 * @function
 * @param {u32} x
 * @param {u32} y
 * @returns {multi_return_u32_u32}
*/
function math__bits__mul_32(x, y) {
	try {
		/** @type {u64} */
		const tmp = new u64(new u64( BigInt(new u64(x).valueOf()) * BigInt(new u64(y).valueOf())));
		/** @type {u32} */
		const hi = new u32(new u32(new u64( BigInt(tmp.valueOf()) >> BigInt(new int(32).valueOf()))));
		/** @type {u32} */
		const lo = new u32(new u32(tmp));
		return [hi, lo];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} x
 * @param {u64} y
 * @returns {multi_return_u64_u64}
*/
function math__bits__mul_64(x, y) {
	try {
		/** @type {u64} */
		const x0 = new u64(new u64( BigInt(x.valueOf()) & BigInt(math__bits__mask32.valueOf())));
		/** @type {u64} */
		const x1 = new u64(new u64( BigInt(x.valueOf()) >> BigInt(new int(32).valueOf())));
		/** @type {u64} */
		const y0 = new u64(new u64( BigInt(y.valueOf()) & BigInt(math__bits__mask32.valueOf())));
		/** @type {u64} */
		const y1 = new u64(new u64( BigInt(y.valueOf()) >> BigInt(new int(32).valueOf())));
		/** @type {u64} */
		const w0 = new u64(new u64( BigInt(x0.valueOf()) * BigInt(y0.valueOf())));
		/** @type {u64} */
		const t = new u64(new u64( BigInt(new u64( BigInt(x1.valueOf()) * BigInt(y0.valueOf())).valueOf()) + BigInt((new u64( BigInt(w0.valueOf()) >> BigInt(new int(32).valueOf()))).valueOf())));
		/** @type {u64} */
		let w1 = new u64(new u64( BigInt(t.valueOf()) & BigInt(math__bits__mask32.valueOf())));
		/** @type {u64} */
		const w2 = new u64(new u64( BigInt(t.valueOf()) >> BigInt(new int(32).valueOf())));
		/** @type {u64} */
		w1.val = w1 + new u64(new u64( BigInt(x0.valueOf()) * BigInt(y1.valueOf())));
		/** @type {u64} */
		const hi = new u64(new u64( BigInt(new u64( BigInt(new u64( BigInt(x1.valueOf()) * BigInt(y1.valueOf())).valueOf()) + BigInt(w2.valueOf())).valueOf()) + BigInt((new u64( BigInt(w1.valueOf()) >> BigInt(new int(32).valueOf()))).valueOf())));
		/** @type {u64} */
		const lo = new u64(new u64( BigInt(x.valueOf()) * BigInt(y.valueOf())));
		return [hi, lo];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u32} hi
 * @param {u32} lo
 * @param {u32} y
 * @returns {multi_return_u32_u32}
*/
function math__bits__div_32(hi, lo, y) {
	try {
		if ((new bool( new bool(y.valueOf() != new int(0).valueOf()).valueOf() && new bool(y.valueOf() <= hi.valueOf()).valueOf())).valueOf()) {
			builtin__panic (math__bits__overflow_error);
		}
		/** @type {u64} */
		const z = new u64(new u64( BigInt((new u64( BigInt(new u64(hi).valueOf()) << BigInt(new int(32).valueOf()))).valueOf()) | BigInt(new u64(lo).valueOf())));
		/** @type {u32} */
		const quo = new u32(new u32(new u64( BigInt(z.valueOf()) / BigInt(new u64(y).valueOf()))));
		/** @type {u32} */
		const rem = new u32(new u32(new u64( BigInt(z.valueOf()) % BigInt(new u64(y).valueOf()))));
		return [quo, rem];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} hi
 * @param {u64} lo
 * @param {u64} y1
 * @returns {multi_return_u64_u64}
*/
function math__bits__div_64(hi, lo, y1) {
	try {
		/** @type {u64} */
		let y = new u64(y1);
		if ((new bool(y.valueOf() == new int(0).valueOf())).valueOf()) {
			builtin__panic (math__bits__overflow_error);
		}
		if ((new bool(y.valueOf() <= hi.valueOf())).valueOf()) {
			builtin__panic (math__bits__overflow_error);
		}
		/** @type {u32} */
		const s = new u32(new u32(math__bits__leading_zeros_64(y)));
		/** @type {u64} */
		y.val = y << new u64(s);
		/** @type {u64} */
		const yn1 = new u64(new u64( BigInt(y.valueOf()) >> BigInt(new int(32).valueOf())));
		/** @type {u64} */
		const yn0 = new u64(new u64( BigInt(y.valueOf()) & BigInt(math__bits__mask32.valueOf())));
		/** @type {u64} */
		const ss1 = new u64((new u64( BigInt(hi.valueOf()) << BigInt(s.valueOf()))));
		/** @type {u32} */
		const xxx = new u32(new u32( new int(64).valueOf() - s.valueOf()));
		/** @type {u64} */
		let ss2 = new u64(new u64( BigInt(lo.valueOf()) >> BigInt(xxx.valueOf())));
		if ((new bool(xxx.valueOf() == new int(64).valueOf())).valueOf()) {
			/** @type {u64} */
			ss2 = new u64(new int(0));
		}
		/** @type {u64} */
		const un32 = new u64(new u64( BigInt(ss1.valueOf()) | BigInt(ss2.valueOf())));
		/** @type {u64} */
		const un10 = new u64(new u64( BigInt(lo.valueOf()) << BigInt(s.valueOf())));
		/** @type {u64} */
		const un1 = new u64(new u64( BigInt(un10.valueOf()) >> BigInt(new int(32).valueOf())));
		/** @type {u64} */
		const un0 = new u64(new u64( BigInt(un10.valueOf()) & BigInt(math__bits__mask32.valueOf())));
		/** @type {u64} */
		let q1 = new u64(new u64( BigInt(un32.valueOf()) / BigInt(yn1.valueOf())));
		/** @type {u64} */
		let rhat = new u64(new u64( BigInt(un32.valueOf()) - BigInt((new u64( BigInt(q1.valueOf()) * BigInt(yn1.valueOf()))).valueOf())));
		while (+new bool( (new bool(q1.valueOf() >= math__bits__two32.valueOf())).valueOf() || new bool((new u64( BigInt(q1.valueOf()) * BigInt(yn0.valueOf()))).valueOf() > (new u64( BigInt((new u64( BigInt(math__bits__two32.valueOf()) * BigInt(rhat.valueOf()))).valueOf()) + BigInt(un1.valueOf()))).valueOf()).valueOf())) {
			try { 
				q1.val --;
				/** @type {u64} */
				rhat.val = rhat + new u64(yn1);
				if ((new bool(rhat.valueOf() >= math__bits__two32.valueOf())).valueOf()) {
					break;
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {u64} */
		const un21 = new u64(new u64( BigInt((new u64( BigInt(un32.valueOf()) * BigInt(math__bits__two32.valueOf()))).valueOf()) + BigInt((new u64( BigInt(un1.valueOf()) - BigInt((new u64( BigInt(q1.valueOf()) * BigInt(y.valueOf()))).valueOf()))).valueOf())));
		/** @type {u64} */
		let q0 = new u64(new u64( BigInt(un21.valueOf()) / BigInt(yn1.valueOf())));
		/** @type {u64} */
		rhat = new u64(new u64( BigInt(un21.valueOf()) - BigInt(new u64( BigInt(q0.valueOf()) * BigInt(yn1.valueOf())).valueOf())));
		while (+new bool( (new bool(q0.valueOf() >= math__bits__two32.valueOf())).valueOf() || new bool((new u64( BigInt(q0.valueOf()) * BigInt(yn0.valueOf()))).valueOf() > (new u64( BigInt((new u64( BigInt(math__bits__two32.valueOf()) * BigInt(rhat.valueOf()))).valueOf()) + BigInt(un0.valueOf()))).valueOf()).valueOf())) {
			try { 
				q0.val --;
				/** @type {u64} */
				rhat.val = rhat + new u64(yn1);
				if ((new bool(rhat.valueOf() >= math__bits__two32.valueOf())).valueOf()) {
					break;
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {u64} */
		const qq = new u64((new u64( BigInt((new u64( BigInt(q1.valueOf()) * BigInt(math__bits__two32.valueOf()))).valueOf()) + BigInt(q0.valueOf()))));
		/** @type {u64} */
		const rr = new u64(new u64( BigInt((new u64( BigInt(new u64( BigInt((new u64( BigInt(un21.valueOf()) * BigInt(math__bits__two32.valueOf()))).valueOf()) + BigInt(un0.valueOf())).valueOf()) - BigInt((new u64( BigInt(q0.valueOf()) * BigInt(y.valueOf()))).valueOf()))).valueOf()) >> BigInt(s.valueOf())));
		return [qq, rr];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u32} hi
 * @param {u32} lo
 * @param {u32} y
 * @returns {u32}
*/
function math__bits__rem_32(hi, lo, y) {
	try {
		return new u32(new u64( BigInt((new u64( BigInt((new u64( BigInt(new u64(hi).valueOf()) << BigInt(new int(32).valueOf()))).valueOf()) | BigInt(new u64(lo).valueOf()))).valueOf()) % BigInt(new u64(y).valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} hi
 * @param {u64} lo
 * @param {u64} y
 * @returns {u64}
*/
function math__bits__rem_64(hi, lo, y) {
	try {
		let [, rem] = math__bits__div_64(new u64( BigInt(hi.valueOf()) % BigInt(y.valueOf())), lo, y);
		return rem;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} x
 * @returns {multi_return_f64_int}
*/
function math__bits__normalize(x) {
	try {
		/** @type {f64} */
		const smallest_normal = new f64(new f32(2.2250738585072014e-308));
		if ((new bool((((new bool(x.valueOf() > new f32(0.0).valueOf())).valueOf() ? x : -x.val )).valueOf() < smallest_normal.valueOf())).valueOf()) {
			return [new f64( BigInt(x.valueOf()) * BigInt((new u64( BigInt(new u64(BigInt(1n)).valueOf()) << BigInt(new u64(BigInt(52n)).valueOf()))).valueOf())), new int(-52)];
		}
		return [x, new int(0)];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace math.bits */
/** @constant {Array_u8} */
let math__bits__ntz_8_tab = undefined;
/** @constant {Array_u8} */
let math__bits__pop_8_tab = undefined;
/** @constant {Array_u8} */
let math__bits__rev_8_tab = undefined;
/** @constant {Array_u8} */
let math__bits__len_8_tab = undefined;

/** @namespace builtin */
	function i8(val) { if (val === undefined) { val = new Number(0); }this.val = Math.floor(Number(val) & 0xffffffff)  }
	i8.prototype = {
		val: new Number(0),
		valueOf() { return Number(this.val)   },
		toString() { return this.valueOf().toString() },
		$toJS() { return +this }, 
	};

	function i8__eq(self,other) { return new bool(self.valueOf() === other.valueOf()); } 
	function i16(val) { if (val === undefined) { val = new Number(0); }this.val = Math.floor(Number(val) & 0xffffffff)  }
	i16.prototype = {
		val: new Number(0),
		valueOf() { return Number(this.val)   },
		toString() { return this.valueOf().toString() },
		$toJS() { return +this }, 
	};

	function i16__eq(self,other) { return new bool(self.valueOf() === other.valueOf()); } 
	function int(val) { if (val === undefined) { val = new Number(0); }this.val = Math.floor(Number(val) & 0xffffffff)  }
	int.prototype = {
		val: new Number(0),
		valueOf() { return Number(this.val)   },
		toString() { return this.valueOf().toString() },
		$toJS() { return +this }, 
	};

	function int__eq(self,other) { return new bool(self.valueOf() === other.valueOf()); } 
	function i64(val) { if (val === undefined) { val = BigInt(0); }this.val = BigInt.asIntN(64,BigInt(val)) }
	i64.prototype = {
		val: BigInt(0),
		valueOf() { return this.val   },
		toString() { return this.val.toString() },
		$toJS() { return this.val }, 
	};

	function i64__eq(self,other) { return new bool(self.valueOf() === other.valueOf()); } 
	function u8(val) { if (val === undefined) { val = new Number(0); }if (typeof(val) == "string") { this.val = val.charCodeAt() } else if (val instanceof string) { this.val = val.str.charCodeAt(); } else { this.val =  Math.round(Number(val)) } }
	u8.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0   },
		toString() { return new string(this.val + "") },
		$toJS() { return +this }, 
	};

	function u8__eq(self,other) { return new bool(self.valueOf() === other.valueOf()); } 
	function u16(val) { if (val === undefined) { val = new Number(0); }this.val = Math.floor(Number(val) & 0xffffffff)  }
	u16.prototype = {
		val: new Number(0),
		valueOf() { return Number(this.val)   },
		toString() { return this.valueOf().toString() },
		$toJS() { return +this }, 
	};

	function u16__eq(self,other) { return new bool(self.valueOf() === other.valueOf()); } 
	function u32(val) { if (val === undefined) { val = new Number(0); }this.val = Math.floor(Number(val) & 0xffffffff)  }
	u32.prototype = {
		val: new Number(0),
		valueOf() { return Number(this.val)   },
		toString() { return this.valueOf().toString() },
		$toJS() { return +this }, 
	};

	function u32__eq(self,other) { return new bool(self.valueOf() === other.valueOf()); } 
	function u64(val) { if (val === undefined) { val = BigInt(0); }this.val = BigInt.asUintN(64,BigInt(val)) }
	u64.prototype = {
		val: BigInt(0),
		valueOf() { return this.val   },
		toString() { return this.val.toString() },
		$toJS() { return this.val }, 
	};

	function u64__eq(self,other) { return new bool(self.valueOf() === other.valueOf()); } 
	function f32(val) { if (val === undefined) { val = new Number(0); }this.val = Number(val) }
	f32.prototype = {
		val: new Number(0),
		valueOf() { return this.val   },
		toString() { return this.val.toString() },
		$toJS() { return +this }, 
	};

	function f32__eq(self,other) { return self.val === other.val; } 
	function f64(val) { if (val === undefined) { val = new Number(0); }this.val = Number(val) }
	f64.prototype = {
		val: new Number(0),
		valueOf() { return this.val   },
		toString() { return this.val.toString() },
		$toJS() { return +this }, 
	};

	function f64__eq(self,other) { return self.val === other.val; } 
	function int_literal(val) { if (val === undefined) { val = new Number(0); }this.val = Math.floor(Number(val) & 0xffffffff)  }
	int_literal.prototype = {
		val: new Number(0),
		valueOf() { return Number(this.val)   },
		toString() { return this.valueOf().toString() },
		$toJS() { return +this }, 
	};

	function int_literal__eq(self,other) { return new bool(self.valueOf() === other.valueOf()); } 
	function float_literal(val) { if (val === undefined) { val = new Number(0); }this.val = Number(val) }
	float_literal.prototype = {
		val: new Number(0),
		valueOf() { return this.val   },
		toString() { return this.val.toString() },
		$toJS() { return +this }, 
	};

	function float_literal__eq(self,other) { return self.val === other.val; } 
	function bool(val) { if (val === undefined) { val = new Boolean(false); }this.val = val instanceof bool ? val.val : +val !== 0 }
	bool.prototype = {
		val: new Boolean(false),
		valueOf() { return this.val   },
		toString() { return this.val.toString() },
		$toJS() { return +this != 0 }, 
	};

	function bool__eq(self,other) { return new bool(self.val === other.valueOf()); } 
	function string(str) { if (str === undefined) { str = new String(""); }this.str = str.toString(); this.len = this.str.length }
	string.prototype = {
		str: new String(""),
		valueOf() { return this.str   },
		toString() { return this.str },
		$toJS() { return this.str }, 
	};

	function string__eq(self,other) { return new bool(self.str === other.str); } 
	function map(map) { if (map === undefined) { map = new map({}); }this.map = map; this.length = 0; }
	map.prototype = {
		map: new map({}),
		valueOf() { return this   },
		toString() { return this.map.toString() },
		$toJS() { return this.map }, 
	};

	function map__eq(self,other) { return new bool(vEq(self, other)); } 
	function array(arr) { if (arr === undefined) { arr = new array_buffer({}); }this.arr = arr
if (arr.index_start.val != 0 || arr.has_slice.val) { v_makeSlice(this); }  }
	array.prototype = {
		arr: new array_buffer({}),
		valueOf() { return this   },
		toString() { return JSON.stringify(this.arr.map(it => it.valueOf())) },
		$toJS() { return this.arr }, 
	};

	function array__eq(self,other) { return new bool(vEq(self, other)); } 
	function rune(val) { if (val === undefined) { val = new Number(0); }val = val.valueOf(); if (typeof val == "string") {this.val = val.charCodeAt();}  else if (val instanceof string) { this.val = val.str.charCodeAt(); } else { this.val =  val | 0 } }
	rune.prototype = {
		val: new Number(0),
		valueOf() { return this.val | 0   },
		toString() { return new string(this.val + "") },
		$toJS() { return +this }, 
	};

	function rune__eq(self,other) { return new bool(self.valueOf() === other.valueOf()); } 
	function any(any) { if (any === undefined) { any = null; }this.val = any }
	any.prototype = {
		any: null,
		valueOf() { return this.val   },
		toString() { return "&" + this.val },
		$toJS() { return this.val.$toJS() }, 
	};

	function any__eq(self,other) { return new bool(self == other); } 
	function voidptr(val) { if (val === undefined) { val = null; }this.val = val; }
	voidptr.prototype = {
		val: null,
		valueOf() { return this   },
		toString() { return "voidptr(" + this.val + ")" },
		$toJS() { return this.val }, 
	};

	function voidptr__eq(self,other) { return this.val === other.val; } 
Object.defineProperty(array.prototype,"len", { get: function() {return new int(this.arr.arr.length);}, set: function(l) { this.arr.arr.length = l.valueOf(); } }); 
Object.defineProperty(map.prototype,"len", { get: function() {return new int(this.length);}, set: function(l) { } }); 
Object.defineProperty(array.prototype,"length", { get: function() {return new int(this.arr.arr.length);}, set: function(l) { this.arr.arr.length = l.valueOf(); } }); 
/**
 * @constructor
 * @param {{arr?: Array, index_start?: int, len?: int, cap?: int, has_slice?: bool}} init
*/
function array_buffer({ arr = undefined, index_start = new int(0), len = new int(0), cap = new int(0), has_slice = new bool(false) }) {
	this.arr = arr
	this.index_start = index_start
	this.len = len
	this.cap = cap
	this.has_slice = has_slice
};
array_buffer.prototype = {
	...Object.prototype,
	...Any.prototype,
	toString() {
		return `array_buffer { arr: ${this["arr"].toString()} , index_start: ${this["index_start"].toString()} , len: ${this["len"].toString()} , cap: ${this["cap"].toString()} , has_slice: ${this["has_slice"].toString()} }`
	},
	/** @type {Array} */
	arr: undefined,
	/** @type {int} */
	index_start: new int(0),
	/** @type {int} */
	len: new int(0),
	/** @type {int} */
	cap: new int(0),
	/** @type {bool} */
	has_slice: new bool(false),
	$toJS() { return this; }
	};

/**
 * @function
 * @returns {void}
*/
function array_buffer_make_copy(a) {
a = new $ref(a)
	try {
		if ((new bool( new bool(a.val.index_start.valueOf() != new int(0).valueOf()).valueOf() || a.val.has_slice.valueOf())).valueOf()) {
			/** @type {Array} */
			let new_arr = makeEmtpyJSArray();
			for (let i = new int(0); i < a.val.len; i = new int(i + 1)) {
				try { 
					new_arr.push(a.val.get(i))
					/** @type {int} */
					let x = new int(i);
					/** @type {int} */
					x = new int(x);
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
			/** @type {Array} */
			new_arr = new_arr;
			a.val.arr = new_arr
			a.val.index_start = new int(0)
			a.val.has_slice = new bool(false)
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

array_buffer.prototype.make_copy = function() { return array_buffer_make_copy(this) }
/**
 * @function
 * @param {int} ix
 * @returns {voidptr}
*/
function array_buffer_get(a, ix) {
	try {
		/** @type {voidptr} */
		let res = null;
		res = a.arr[a.index_start.val + ix.val];
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} ix
 * @param {voidptr} val
 * @returns {void}
*/
function array_buffer_set(a, ix, val) {
a = new $ref(a)
	try {
		a.val.arr[a.val.index_start.valueOf() + ix.valueOf()] = val;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

array_buffer.prototype.get = function(ix) { return array_buffer_get(this,ix);}
array_buffer.prototype.set = function(ix,val) { array_buffer_set(this,ix,val); }
/**
 * @function
 * @param {array} arr
 * @param {anon_fn_voidptr_voidptr__int} comparator
 * @returns {void}
*/
function v_sort(arr, comparator) {
arr = new $ref(arr)
	try {
		/** @type {bool} */
		let need_iter = new bool(new bool(true));
		while (+need_iter) {
			try { 
				/** @type {bool} */
				need_iter = new bool(new bool(false));
				for (let i = new int(new int(1)); +new bool(i.valueOf() < arr.val.len.valueOf()); i.val ++) {
					try { 
						if ((new bool(comparator(arr.valueOf().arr.get(new int(i.valueOf())), arr.valueOf().arr.get(new int(new int( i.valueOf() - new int(1).valueOf()).valueOf()))).valueOf() != new int(1).valueOf())).valueOf()) {
							let tmp = arr.valueOf().arr.get(new int(i.valueOf())); arr.valueOf().arr.set(new int(i.valueOf()),arr.valueOf().arr.get(new int(new int( i.valueOf() - new int(1).valueOf()).valueOf()))); arr.valueOf().arr.set(new int(new int( i.valueOf() - new int(1).valueOf()).valueOf()),tmp); need_iter = new bool(new bool(true)); }
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} index
 * @returns {void}
*/
function array_trim(a, index) {
a = new $ref(a)
	try {
		if ((new bool(index.valueOf() < a.val.len.valueOf())).valueOf()) {
			/** @type {int} */
			a.val.len = new int(index);
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

function flatIntoArray(target, source, sourceLength, targetIndex, depth) {
"use strict";

for (var sourceIndex = 0; sourceIndex < sourceLength; ++sourceIndex) {
if (sourceIndex in source) {
var element = source[sourceIndex];
if (depth > 0 && Array.isArray(element))
targetIndex = flatIntoArray(target, element, element.length, targetIndex, depth - 1);
else {
target[targetIndex] = element;
++targetIndex;
}
}
}
return targetIndex;
}
function flatArray(target,depth) {
var array = target
var length = array.length;
var depthNum = 1;

if (depth !== undefined)
depthNum = +depth

var result = []

flatIntoArray(result, array, length, 0, depthNum);
return result;
}
/* [unsafe] */
/**
 * @function
 * @param {int} count
 * @param {int} depth
 * @returns {array}
*/
function array_repeat_to_depth(a, count, depth) {
	try {
		if ((new bool(count.valueOf() < new int(0).valueOf())).valueOf()) {
			builtin__panic (new string(`array.repeat: count is negative: ${int_str(count)}`));
		}
		/** @type {array} */
		let arr = empty_array();
		if ((new bool(a.len.valueOf() > new int(0).valueOf())).valueOf()) {
			for (let _tmp3 = new int(0); _tmp3 < count; _tmp3 = new int(_tmp3 + 1)) {
				try { 
					for (let i = new int(0); i < a.len; i = new int(i + 1)) {
						try { 
							if ((new bool(depth.valueOf() > new int(0).valueOf())).valueOf()) {
							} else {
								array_push(arr,array_buffer_get(a.arr,i));
							}
						} catch (e) {
						 if (e instanceof BreakException) { break; }
						 else if (e instanceof ContinueException) { continue; }
						 else { throw e; } }
					}
					
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
		}
		return arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {voidptr}
*/
function array_last(a) {
	try {
		/** @type {voidptr} */
		let res = null;
		res = a.arr.get(new int(a.len-1));
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} ix
 * @returns {voidptr}
*/
function array_get(a, ix) {
	try {
		/** @type {voidptr} */
		let result = null;
		result = a.arr.get(ix)
		return result;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} count
 * @returns {array}
*/
function array_repeat(a, count) {
	try {
		{
			return array_repeat_to_depth(a,count, new int(0));
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

function makeEmptyArray() { return new array(new array_buffer({ arr: [], len: new int(0), index_start: new int(0), cap: new int(0) })); }
function makeEmtpyJSArray() { return new Array(); }
/**
 * @function
 * @returns {array}
*/
function empty_array() {
	try {
		return makeEmptyArray();
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} i
 * @returns {void}
*/
function array_set_len(a, i) {
a = new $ref(a)
	try {
		a.arr.arr.length=i
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {voidptr} compare
 * @returns {void}
*/
function array_sort_with_compare(a, compare) {
a = new $ref(a)
	try {
		v_sort(a, compare);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {voidptr} compare
 * @returns {void}
*/
function array_sort_with_compare_old(a, compare) {
a = new $ref(a)
	try {
		a.val.arr.arr.sort(compare)
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function array_sort(a) {
a = new $ref(a)
	try {
		a.val.arr.arr.sort($sortComparator)
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} v
 * @returns {int}
*/
function array_index(a, v) {
	try {
		for (let i = new int(0); i < a.len; i = new int(i + 1)) {
			try { 
				if (a.arr.get(i).toString() == v.toString())
				{
					return i;
				}
				
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new int(-1);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} start
 * @param {int} end
 * @returns {array}
*/
function array_slice(a, start, end) {
	try {
		/** @type {array} */
		let result = a;
		let slice = a.arr.arr.slice(start,end)
		result = new array(new array_buffer({arr: a.arr.arr, len: new int(slice.length),cap: new int(slice.length),index_start: new int(start),has_slice: new bool(true)}))
		a.arr.has_slice = true
		return result;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} i
 * @param {voidptr} val
 * @returns {void}
*/
function array_insert(a, i, val) {
a = new $ref(a)
	try {
		a.val.arr.make_copy()
		a.val.arr.arr.splice(i,0,val)
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} i
 * @param {voidptr} val
 * @param {int} size
 * @returns {void}
*/
function array_insert_many(a, i, val, size) {
a = new $ref(a)
	try {
		a.val.arr.arr.splice(i,0,...val.arr.slice(0,+size))
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {voidptr} val
 * @returns {void}
*/
function array_push(a, val) {
a = new $ref(a)
	try {
		a.val.arr.make_copy()
		if (arguments[2] && arguments[2].valueOf()) {a.val.arr.arr.push(...val)} else {
		a.val.arr.arr.push(val)
		}
		a.val.arr.len.val += 1
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {array} arr
 * @param {anon_fn_voidptr__bool} callback
 * @returns {array}
*/
function v_filter(arr, callback) {
	try {
		/** @type {array} */
		let filtered = empty_array();
		for (let i = new int(new int(0)); +new bool(i.valueOf() < arr.arr.len.valueOf()); i.val ++) {
			try { 
				if ((callback(array_buffer_get(arr.arr,i))).valueOf()) {
					array_push(filtered,array_buffer_get(arr.arr,i));
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return filtered;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {array} arr
 * @param {anon_fn_voidptr__voidptr} callback
 * @returns {array}
*/
function v_map(arr, callback) {
	try {
		/** @type {array} */
		let maped = empty_array();
		for (let i = new int(new int(0)); +new bool(i.valueOf() < arr.arr.len.valueOf()); i.val ++) {
			try { 
				array_push(maped,callback(array_buffer_get(arr.arr,i)));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return maped;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @constructor
 * @param {{ix?: int, end?: int, arr?: Array}} init
*/
function array_iterator({ ix = new int(0), end = new int(0), arr = undefined }) {
	this.ix = ix
	this.end = end
	this.arr = arr
};
array_iterator.prototype = {
	...Object.prototype,
	...Any.prototype,
	toString() {
		return `array_iterator { ix: ${this["ix"].toString()} , end: ${this["end"].toString()} , arr: ${this["arr"].toString()} }`
	},
	/** @type {int} */
	ix: new int(0),
	/** @type {int} */
	end: new int(0),
	/** @type {Array} */
	arr: undefined,
	$toJS() { return this; }
	};

array_iterator.prototype.next = function () {
if (this.ix.val < this.end.val) {
this.ix.val++;
return {done: false, value: this.arr.arr.get(new int(this.ix.val-1))}
} else {
return {done: true, value: undefined}
}
}
array_iterator.prototype[Symbol.iterator] = function () { return this; }
array.prototype[Symbol.iterator] = function () { return new array_iterator({ix: new int(0),end: new int(this.arr.len),arr: this}); }
array.prototype.entries = function () { let result = []; for (let key = this.arr.index_start.val;key < this.arr.len.val;key++) { result.push([new int(key), this.arr.get(new int(key))]); } return result[Symbol.iterator](); }
array.prototype.map = function(callback) { return v_map(this,callback); }
array.prototype.filter = function(callback) { return v_filter(this,callback); }
Object.defineProperty(array.prototype,'cap',{ get: function () { return this.len; } })
array.prototype.any = function (value) {
let val ;if (typeof value == 'function') { val = function (x) { return value(x); } } else { val = function (x) { return vEq(x,value); } }
for (let i = 0;i < this.arr.arr.length;i++)
if (val(this.arr.get(i)))
return true;

return false;
}
array.prototype.all = function (value) {
let val ;if (typeof value == 'function') { val = function (x) { return value(x); } } else { val = function (x) { return vEq(x,value); } }
for (let i = 0;i < this.arr.arr.length;i++)
if (!val(this.arr.get(i)))
return false;

return true;
}


function v_makeSlice(array) { Object.defineProperty(array,'len', {get: function() { return this.arr.len; }, set: function(l) { this.arr.len = l; }}) }
/**
 * @function
 * @param {int} i
 * @returns {void}
*/
function array_delete(a, i) {
a = new $ref(a)
	try {
		array_delete_many(a.valueOf(),i, new int(1));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {array} dst
 * @param {array} src
 * @param {int} count
 * @returns {void}
*/
function arr_copy(dst, src, count) {
dst = new $ref(dst)
	try {
		for (let i = new int(new int(0)); +new bool(i.valueOf() < count.valueOf()); i.val ++) {
			try { 
				array_buffer_set(dst.val.arr,i, array_buffer_get(src.arr,i));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} i
 * @param {int} size
 * @returns {void}
*/
function array_delete_many(a, i, size) {
a = new $ref(a)
	try {
		a.val.arr.make_copy()
		a.val.arr.arr.splice(i.valueOf(),size.valueOf())
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {voidptr} val
 * @returns {void}
*/
function array_prepend(a, val) {
a = new $ref(a)
	try {
		array_insert(a.valueOf(),new int(0), val);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [unsafe] */
/**
 * @function
 * @param {voidptr} val
 * @param {int} size
 * @returns {void}
*/
function array_prepend_many(a, val, size) {
a = new $ref(a)
	try {
		array_insert_many(a.valueOf(),new int(0), val, size);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {array}
*/
function array_reverse(a) {
	try {
		/** @type {array} */
		let res = empty_array();
		res.arr.arr = Array.from(a.arr).reverse()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function array_reverse_in_place(a) {
a = new $ref(a)
	try {
		a.val.arr.arr.reverse()
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

array.prototype.$includes = function (elem) { return this.arr.arr.find(function(e) { return vEq(elem,e); }) !== undefined;}
/**
 * @function
 * @returns {void}
*/
function array_clear(a) {
a = new $ref(a)
	try {
		a.val.arr.make_copy()
		a.val.arr.arr.clear()
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {anon_fn_int_int__int} iter
 * @param {int} accum_start
 * @returns {int}
*/
function array_reduce(a, iter, accum_start) {
	try {
		/** @type {int} */
		let accum_ = new int(accum_start);
		for (let i = new int(0); i < a.len; i = new int(i + 1)) {
			try { 
				/** @type {int} */
				accum_ = new int(iter(accum_, array_get(a,i)));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return accum_;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {voidptr}
*/
function array_pop(a) {
a = new $ref(a)
	try {
		/** @type {voidptr} */
		let res = null;
		a.val.arr.make_copy()
		res = a.val.arr.arr.pop()
		a.val.arr.len.val -= 1
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {voidptr}
*/
function array_first(a) {
	try {
		/** @type {voidptr} */
		let res = null;
		res = a.arr.get(new int(0))
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

array.prototype.toString = function () {
let res = "["
for (let i = 0; i < this.arr.arr.length;i++) {
res += this.arr.get(i).toString();
if (i != this.arr.arr.length-1)
res += ', '
}
res += ']'
return res;

}
/**
 * @function
 * @param {voidptr} key
 * @returns {bool}
*/
function array_contains(a, key) {
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function array_delete_last(a) {
a = new $ref(a)
	try {
		a.val.arr.arr.pop();
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [unsafe] */
/**
 * @function
 * @returns {void}
*/
function array_free(a) {
a = new $ref(a)
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function array_bytestr(a) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		for (let i = 0;i < a.arr.len.valueOf();i++) res.str += String.fromCharCode(a.arr.get(new int(i)))
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function Array_string_str(a) {
	try {
		/** @type {strings__Builder} */
		let sb = strings__new_builder(new int( a.len.valueOf() * new int(3).valueOf()));
		strings__Builder_write_string(sb,new string("["));
		for (let i = new int(0); i < a.len; i = new int(i + 1)) {
			try { 
				/** @type {string} */
				const val = new string(a.arr.get(new int(i.valueOf())));
				strings__Builder_write_string(sb,new string("'"));
				strings__Builder_write_string(sb,val);
				strings__Builder_write_string(sb,new string("'"));
				if ((new bool(i.valueOf() < new int( a.len.valueOf() - new int(1).valueOf()).valueOf())).valueOf()) {
					strings__Builder_write_string(sb,new string(", "));
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		strings__Builder_write_string(sb,new string("]"));
		/** @type {string} */
		const res = new string(strings__Builder_str(new $ref(sb)));
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Array}
*/
function array_to_js_array(a) {
	try {
		/** @type {Array} */
		const tmp = Array.prototype.constructor();
		for (let i = new int(0); i < a.len; i = new int(i + 1)) {
			try { 
				tmp.push(array_buffer_get(a.arr,i));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return tmp;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Array}
*/
function array_to_number_array(a) {
	try {
		/** @type {Array} */
		const tmp = Array.prototype.constructor();
		for (let i = new int(0); i < a.len; i = new int(i + 1)) {
			try { 
				/** @type {voidptr} */
				const elem = array_buffer_get(a.arr,i);
				const _tmp4 = elem;
				tmp.push(Number(elem.valueOf()));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return tmp;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_u8} arr
 * @returns {Uint8Array}
*/
function uint8_array(arr) {
	try {
		let tmp = new Array();
		for (const elem of arr) {
			try { 
				const _tmp5 = elem;
				tmp.push(elem.val)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {Uint8Array} */
		let uint_arr = new Uint8Array();
		uint_arr = new Uint8Array(tmp)
		return uint_arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_u16} arr
 * @returns {Uint16Array}
*/
function uint16_array(arr) {
	try {
		let tmp = new Array();
		for (const elem of arr) {
			try { 
				const _tmp6 = elem;
				tmp.push(elem.val)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {Uint16Array} */
		let uint_arr = new Uint16Array();
		uint_arr = new Uint16Array(tmp)
		return uint_arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_u32} arr
 * @returns {Uint32Array}
*/
function uint32_array(arr) {
	try {
		let tmp = new Array();
		for (const elem of arr) {
			try { 
				const _tmp7 = elem;
				tmp.push(elem.val)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {Uint32Array} */
		let uint_arr = new Uint32Array();
		uint_arr = new Uint32Array(tmp)
		return uint_arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_i8} arr
 * @returns {Int8Array}
*/
function int8_array(arr) {
	try {
		let tmp = new Array();
		for (const elem of arr) {
			try { 
				const _tmp8 = elem;
				tmp.push(elem.val)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {Int8Array} */
		let int_arr = new Int8Array();
		int_arr = new Int8Array(tmp)
		return int_arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_i16} arr
 * @returns {Int16Array}
*/
function int16_array(arr) {
	try {
		let tmp = new Array();
		for (const elem of arr) {
			try { 
				const _tmp9 = elem;
				tmp.push(elem.val)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {Int16Array} */
		let int_arr = new Int16Array();
		int_arr = new Int16Array(tmp)
		return int_arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_int} arr
 * @returns {Int32Array}
*/
function int32_array(arr) {
	try {
		let tmp = new Array();
		for (const elem of arr) {
			try { 
				const _tmp10 = elem;
				tmp.push(elem.val)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {Int32Array} */
		let int_arr = new Int32Array();
		int_arr = new Int32Array(tmp)
		return int_arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_i64} arr
 * @returns {BigInt64Array}
*/
function int64_array(arr) {
	try {
		let tmp = new Array();
		for (const elem of arr) {
			try { 
				const _tmp11 = elem;
				tmp.push(elem.val)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {BigInt64Array} */
		let int_arr = new BigInt64Array();
		int_arr = new BigInt64Array(tmp)
		return int_arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_u64} arr
 * @returns {BigUint64Array}
*/
function uint64_array(arr) {
	try {
		let tmp = new Array();
		for (const elem of arr) {
			try { 
				const _tmp12 = elem;
				tmp.push(elem.val)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {BigUint64Array} */
		let int_arr = new BigUint64Array();
		int_arr = new BigUint64Array(tmp)
		return int_arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_f32} arr
 * @returns {Float32Array}
*/
function float32_array(arr) {
	try {
		let tmp = new Array();
		for (const elem of arr) {
			try { 
				const _tmp13 = elem;
				tmp.push(elem.val)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {Float32Array} */
		let float_arr = new Float32Array();
		float_arr = new Float32Array(tmp)
		return float_arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_f64} arr
 * @returns {Float64Array}
*/
function float64_array(arr) {
	try {
		let tmp = new Array();
		for (const elem of arr) {
			try { 
				const _tmp14 = elem;
				tmp.push(elem.val)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {Float64Array} */
		let float_arr = new Float64Array();
		float_arr = new Float64Array(tmp)
		return float_arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
/* [noreturn] */
/**
 * @function
 * @param {any} s
 * @returns {void}
*/
function js_throw(s) {
	try {
		throw s
		while (true) {
			try { 
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

let globalPrint;
if (false)
{
globalPrint = globalThis.print
}
/**
 * @function
 * @returns {void}
*/
function flush_stdout() {
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function flush_stderr() {
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s
 * @returns {void}
*/
function builtin__println(s) {
	try {
		if (false)
		{
		globalPrint(s.str)
		}
		else
		{
		console.log(s.str)
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s
 * @returns {void}
*/
function builtin__print(s) {
	try {
		if (false)
		{
		$process.stdout.write(s.str)
		}
		else
		{
		builtin__panic (new string("Cannot `print` in a browser, use `println` instead"));
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s
 * @returns {void}
*/
function builtin__eprintln(s) {
	try {
		if (false)
		{
		globalPrint(s.str)
		}
		else
		{
		console.error(s.str)
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s
 * @returns {void}
*/
function builtin__eprint(s) {
	try {
		if (false)
		{
		$process.stderr.write(s.str)
		}
		else
		{
		builtin__panic (new string("Cannot `eprint` in a browser, use `println` instead"));
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [noreturn] */
/**
 * @function
 * @param {int} c
 * @returns {void}
*/
function builtin__exit(c) {
	try {
		process.exit(c);
		js_throw(new string(`exit(${int_str(c)})`));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {voidptr} data
 * @param {Option} option
 * @returns {void}
*/
function opt_ok(data, option) {
	try {
		option.state = 0
		option.err = none__
		option.data = data
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} opt
 * @returns {string}
*/
function unwrap(opt) {
	try {
		/** @type {Option} */
		let o = new Option({});
		o = opt
		if ((new bool(o.state.valueOf() != new int(0).valueOf())).valueOf()) {
			js_throw(o.err);
		}
		/** @type {string} */
		let res = new string(new string(""));
		res = opt.data
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function js_stacktrace() {
	try {
		/** @type {string} */
		const stacktrace = new string(new string(""));
		let err = new TypeError();
		err.name = 'stacktrace: '
		stacktrace.str = err.stack
		return stacktrace;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function print_backtrace() {
	try {
		builtin__println (js_stacktrace());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {voidptr} val
 * @returns {bool}
*/
function builtin__isnil(val) {
	try {
		/** @type {bool} */
		const res = new bool(new bool(false));
		if (typeof val == 'function') { res.val = false; } else {
		val = val instanceof voidptr ? val.valueOf().val : val;
		res.val = val === null || val === undefined || val === false || val === 0 || val === BigInt(0) || (val instanceof int ? val.val == 0 : false)
		}
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function float_literal_str(f) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str += f.valueOf()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
/**
 * @function
 * @returns {void}
*/
function any_toString(a) {
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [noreturn] */
/**
 * @function
 * @param {string} s
 * @returns {void}
*/
function builtin__panic(s) {
	try {
		builtin__eprintln (new string(`V panic: ${s}\n${js_stacktrace()}`));
		builtin__exit(new int(1));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @interface IError
 * @typedef IError
 * @property {() => string} msg
 * @property {() => int} code
 */

function IError (arg) { return new $ref(arg); }
/**
 * @function
 * @returns {string}
*/
function IError_str(err) {
	try {
		let _tmp15 = undefined;
		if (err.val instanceof None__) {
			_tmp15 = new string("none");
			
		}
		else if (err.val instanceof Error) {
			_tmp15 = Error_msg(err.valueOf(),);
			
		}
		else if (err.val instanceof MessageError) {
			_tmp15 = MessageError_msg(err.valueOf(),);
			
		}
		
		else {
			/** @type {bool} */
			const old_error_style = new bool(new bool(new voidptr(new $ref(err.msg)).valueOf() != new voidptr(new $ref(err.code)).valueOf()));
			_tmp15 = ((old_error_style).valueOf() ? new string(`${IError_type_name(err,)}: ${err.msg}`) : new string(`${IError_type_name(err,)}: ${err.msg()}`))
		}
		return _tmp15;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @constructor
 * @param {{}} init
*/
function Error({  }) {
};
Error.prototype = {
	...Object.prototype,
	...Any.prototype,
	toString() {
		return `Error {}`
	},
	$toJS() { return this; }
	};

/**
 * @function
 * @returns {string}
*/
function Error_msg(err) {
	try {
		return new string("");
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {int}
*/
function Error_code(err) {
	try {
		return new int(0);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @constructor
 * @param {{msg?: string, code?: int}} init
*/
function MessageError({ msg = new string(""), code = new int(0) }) {
	this.msg = msg
	this.code = code
};
MessageError.prototype = {
	...Object.prototype,
	...Any.prototype,
	toString() {
		return `MessageError { msg: "${this["msg"].toString()}", code: ${this["code"].toString()} }`
	},
	/** @type {string} */
	msg: new string(""),
	/** @type {int} */
	code: new int(0),
	$toJS() { return this; }
	};

/**
 * @function
 * @returns {string}
*/
function MessageError_msg(err) {
	try {
		return err.msg;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {int}
*/
function MessageError_code(err) {
	try {
		return err.code;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @constant {IError} */
let none__ = undefined;

/**
 * @constructor
 * @param {{}} init
*/
function None__({  }) {
};
None__.prototype = {
	...Error.prototype,
	...Object.prototype,
	...Any.prototype,
	toString() {
		return `None__ {}`
	},
	$toJS() { return this; }
	};

/**
 * @function
 * @returns {string}
*/
function None___str(_) {
	try {
		return new string("none");
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @constructor
 * @param {{state?: u8, err?: IError}} init
*/
function Option({ state = new u8(0), err = none__ }) {
	this.state = state
	this.err = err
};
Option.prototype = {
	...Object.prototype,
	...Any.prototype,
	toString() {
		return `Option { state: ${this["state"].toString()} , err: ${this["err"].toString()} }`
	},
	/** @type {u8} */
	state: new u8(0),
	/** @type {IError} */
	err: undefined,
	$toJS() { return this; }
	};

/**
 * @function
 * @returns {string}
*/
function Option_str(o) {
	try {
		if ((new bool(o.state.valueOf() == new int(0).valueOf())).valueOf()) {
			return new string("Option{ ok }");
		}
		if ((new bool(o.state.valueOf() == new int(1).valueOf())).valueOf()) {
			return new string("Option{ none }");
		}
		return new string(`Option{ error: "${IError_str(o.err)}" }`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @constructor
 * @param {{state?: u8, err?: IError}} init
*/
function _option({ state = new u8(0), err = none__ }) {
	this.state = state
	this.err = err
};
_option.prototype = {
	...Object.prototype,
	...Any.prototype,
	toString() {
		return `_option { state: ${this["state"].toString()} , err: ${this["err"].toString()} }`
	},
	/** @type {u8} */
	state: new u8(0),
	/** @type {IError} */
	err: undefined,
	$toJS() { return this; }
	};

/**
 * @function
 * @returns {string}
*/
function _option_str(o) {
	try {
		if ((new bool(o.state.valueOf() == new int(0).valueOf())).valueOf()) {
			return new string("Option{ ok }");
		}
		if ((new bool(o.state.valueOf() == new int(1).valueOf())).valueOf()) {
			return new string("Option{ none }");
		}
		return new string(`Option{ error: "${IError_str(o.err)}" }`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} x
 * @returns {void}
*/
function trace_error(x) {
	try {
		builtin__eprintln (new string(`> ${"trace_error"} | ${x}`));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {string} message
 * @returns {IError}
*/
function error(message) {
	try {
		return new $ref((function() {
			let _tmp16 = new MessageError({});
			_tmp16.msg = message;
			return _tmp16;
		})()
		);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {string} message
 * @param {int} code
 * @returns {IError}
*/
function error_with_code(message, code) {
	try {
		return new $ref((function() {
			let _tmp17 = new MessageError({});
			_tmp17.msg = message;
			_tmp17.code = code;
			return _tmp17;
		})()
		);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [unsafe] */
/**
 * @function
 * @param {voidptr} ptr
 * @returns {void}
*/
function free(ptr) {
	try {
		const _tmp18 = ptr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
/**
 * @function
 * @returns {bool}
*/
function u8_is_space(b) {
	try {
		/** @type {bool} */
		let result = new bool(new bool(false));
		result.val = /^\s*$/.test(String.fromCharCode(b))
		return result;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u8_str(c) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = c.val.toString()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u8_ascii_str(c) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = String.fromCharCode(c.val)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} count
 * @returns {string}
*/
function u8_repeat(c, count) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		for (let _tmp19 = new int(0); _tmp19 < count; _tmp19 = new int(_tmp19 + 1)) {
			try { 
				/** @type {string} */
				res.str = res + new string(u8_ascii_str(c,));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {bool}
*/
function u8_is_digit(c) {
	try {
		return new bool( new bool(c.valueOf() >= new u8('0').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('9').valueOf()).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {bool}
*/
function u8_is_hex_digit(c) {
	try {
		return new bool( new bool( (new bool( new bool(c.valueOf() >= new u8('0').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('9').valueOf()).valueOf())).valueOf() || (new bool( new bool(c.valueOf() >= new u8('a').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('f').valueOf()).valueOf())).valueOf()).valueOf() || (new bool( new bool(c.valueOf() >= new u8('A').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('F').valueOf()).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {bool}
*/
function u8_is_oct_digit(c) {
	try {
		return new bool( new bool(c.valueOf() >= new u8('0').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('7').valueOf()).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {bool}
*/
function u8_is_bin_digit(c) {
	try {
		return new bool( new bool(c.valueOf() == new u8('0').valueOf()).valueOf() || new bool(c.valueOf() == new u8('1').valueOf()).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {bool}
*/
function u8_is_letter(c) {
	try {
		return new bool( (new bool( new bool(c.valueOf() >= new u8('a').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('z').valueOf()).valueOf())).valueOf() || (new bool( new bool(c.valueOf() >= new u8('A').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('Z').valueOf()).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {bool}
*/
function u8_is_alnum(c) {
	try {
		return new bool( new bool( (new bool( new bool(c.valueOf() >= new u8('a').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('z').valueOf()).valueOf())).valueOf() || (new bool( new bool(c.valueOf() >= new u8('A').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('Z').valueOf()).valueOf())).valueOf()).valueOf() || (new bool( new bool(c.valueOf() >= new u8('0').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('9').valueOf()).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {bool}
*/
function u8_is_capital(c) {
	try {
		return new bool( new bool(c.valueOf() >= new u8('A').valueOf()).valueOf() && new bool(c.valueOf() <= new u8('Z').valueOf()).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u8_str_escaped(b) {
	try {
		/** @type {string} */
		let str = new string(new string(""));
		
		if (vEq(b,new int(0))) {
			/** @type {string} */
			str = new string(new string((function() { let s = String(); 
			s += String.fromCharCode(96);
			s += String.fromCharCode(92);
			s += String.fromCharCode(48);
			s += String.fromCharCode(96);
			return s; })()
			));
		}
		else if (vEq(b,new int(7))) {
			/** @type {string} */
			str = new string(new string((function() { let s = String(); 
			s += String.fromCharCode(96);
			s += String.fromCharCode(92);
			s += String.fromCharCode(97);
			s += String.fromCharCode(96);
			return s; })()
			));
		}
		else if (vEq(b,new int(8))) {
			/** @type {string} */
			str = new string(new string((function() { let s = String(); 
			s += String.fromCharCode(96);
			s += String.fromCharCode(92);
			s += String.fromCharCode(98);
			s += String.fromCharCode(96);
			return s; })()
			));
		}
		else if (vEq(b,new int(9))) {
			/** @type {string} */
			str = new string(new string((function() { let s = String(); 
			s += String.fromCharCode(96);
			s += String.fromCharCode(92);
			s += String.fromCharCode(116);
			s += String.fromCharCode(96);
			return s; })()
			));
		}
		else if (vEq(b,new int(10))) {
			/** @type {string} */
			str = new string(new string((function() { let s = String(); 
			s += String.fromCharCode(96);
			s += String.fromCharCode(92);
			s += String.fromCharCode(110);
			s += String.fromCharCode(96);
			return s; })()
			));
		}
		else if (vEq(b,new int(11))) {
			/** @type {string} */
			str = new string(new string((function() { let s = String(); 
			s += String.fromCharCode(96);
			s += String.fromCharCode(92);
			s += String.fromCharCode(118);
			s += String.fromCharCode(96);
			return s; })()
			));
		}
		else if (vEq(b,new int(12))) {
			/** @type {string} */
			str = new string(new string((function() { let s = String(); 
			s += String.fromCharCode(96);
			s += String.fromCharCode(92);
			s += String.fromCharCode(102);
			s += String.fromCharCode(96);
			return s; })()
			));
		}
		else if (vEq(b,new int(13))) {
			/** @type {string} */
			str = new string(new string((function() { let s = String(); 
			s += String.fromCharCode(96);
			s += String.fromCharCode(92);
			s += String.fromCharCode(114);
			s += String.fromCharCode(96);
			return s; })()
			));
		}
		else if (vEq(b,new int(27))) {
			/** @type {string} */
			str = new string(new string((function() { let s = String(); 
			s += String.fromCharCode(96);
			s += String.fromCharCode(92);
			s += String.fromCharCode(101);
			s += String.fromCharCode(96);
			return s; })()
			));
		}
		else if ((b >= new int(32) && b <= new int(126))) {
			/** @type {string} */
			str = new string(u8_ascii_str(b,));
		}
		else {
			/** @type {string} */
			str = new string(new string( new string("0x").valueOf() + u8_hex(b,).valueOf()));
		};
		return str;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
/**
 * @function
 * @returns {string}
*/
function f32_str(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val + ''
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function f64_str(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val + ''
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
function byte(val) { return val;  }
/**
 * @function
 * @returns {string}
*/
function i8_str(i) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		res.str = i.val.toString()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function i16_str(i) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		res.str = i.val.toString()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u16_str(i) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		res.str = i.val.toString()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function int_str(i) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		res = new string( i+'' )
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function i64_str(i) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		res = new string( i + '')
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u32_str(i) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		res = new string( i + '')
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u64_str(i) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		res = new string( i + '')
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function bool_str(i) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		res = new string( i + '')
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function any_str(i) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		res = new string( i.toString() )
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function int_literal_str(i) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = i.val.toString()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u64_hex(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val.toString(16)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u64_hex_full(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val.toString(16)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function i64_hex(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val.toString(16)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u32_hex(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val.toString(16)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u16_hex(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val.toString(16)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function i8_hex(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val.toString(16)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function i16_hex(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val.toString(16)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function int_hex(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val.toString(16)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function int_literal_hex(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val.toString(16)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u8_hex(x) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = x.val.toString(16)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function Array_u8_hex(b) {
	try {
		/** @type {string} */
		let hex = new string(new string(""));
		for (const i of b) {
			try { 
				/** @type {u8} */
				let z = new u8(i);
				/** @type {u8} */
				z = new u8(z);
				let n0 = i.val >> 4
				hex.str += n0 < 10 ? String.fromCharCode(n0) : String.fromCharCode(n0 + 87)
				let n1 = i.val & 0xF
				hex.str += n1 < 10 ? String.fromCharCode(n1) : String.fromCharCode(n1 + 87)
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return hex;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function int_hex2(i) {
	try {
		return new string( new string("0x").valueOf() + int_hex(i,).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function i8_hex2(i) {
	try {
		return new string( new string("0x").valueOf() + i8_hex(i,).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function i16_hex2(i) {
	try {
		return new string( new string("0x").valueOf() + i16_hex(i,).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function i64_hex2(i) {
	try {
		return new string( new string("0x").valueOf() + i64_hex(i,).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u8_hex2(i) {
	try {
		return new string( new string("0x").valueOf() + u8_hex(i,).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u16_hex2(i) {
	try {
		return new string( new string("0x").valueOf() + u16_hex(i,).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u32_hex2(i) {
	try {
		return new string( new string("0x").valueOf() + u32_hex(i,).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function u64_hex2(i) {
	try {
		return new string( new string("0x").valueOf() + u64_hex(i,).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
function Any(val) { return val; }
/**
 * @function
 * @param {Any} x
 * @returns {bool}
*/
function js_is_null(x) {
	try {
		/** @type {bool} */
		const res = new bool(new bool(false));
		res.val = x === null
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Any} x
 * @returns {bool}
*/
function js_is_undefined(x) {
	try {
		/** @type {bool} */
		const res = new bool(new bool(false));
		res.val = x === undefined
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Any}
*/
function js_null() {
	try {
		/** @type {Any} */
		let obj = new Any();
		obj = null;
		return obj;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Any}
*/
function js_undefined() {
	try {
		/** @type {Any} */
		let obj = new Any();
		obj = undefined;
		return obj;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_JS__String} arr
 * @returns {int}
*/
function native_str_arr_len(arr) {
	try {
		/** @type {int} */
		const len = new int(new int(0));
		len = arr.length
		return len;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
/** @namespace builtin */
/**
 * @function
 * @returns {node_process}
*/
function js_node_process() {
	try {
		return process
		return {};
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
/**
 * @function
 * @param {Any} key
 * @param {Any} val
 * @returns {void}
*/
function map_internal_set(m, key, val) {
m = new $ref(m)
	try {
		if ('$toJS' in key) key = key.$toJS();
		if (!(key in m.val.map)) m.val.length++;
		m.val.map[key] = val
		const _tmp20 = key;
		const _tmp21 = val;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Any} key
 * @returns {Any}
*/
function map_internal_get(m, key) {
m = new $ref(m)
	try {
		/** @type {Any} */
		let val = new Any(null);
		if (typeof key != "string" && '$toJS' in key) key = key.$toJS();
		val =  m.val.map[key]
		const _tmp22 = key;
		return val;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

map.prototype.get = function (key) { return map_internal_get(this,key); }
map.prototype.set = function(key,val) { map_internal_set(this,key,val); }
map.prototype.has = function (key) { if (typeof key != "string" && '$toJS' in key) { key = key.$toJS() } return key in this.map; }
/* [unsafe] */
/**
 * @function
 * @param {Any} key
 * @returns {void}
*/
function map_delete(m, key) {
m = new $ref(m)
	try {
		let k = '$toJS' in key ? key.$toJS() : key;
		if (delete m.val.map[k]) { m.val.length--; };
		const _tmp23 = key;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function map_free(m) {
m = new $ref(m)
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

map.prototype.toString = function () {
function fmtKey(key) { return typeof key == 'string' ? '\'' + key + '\'' : key}
let res = '{'
for (const entry of this) {
res += fmtKey(entry[0]) + ': ' + entry[0];
}
res += '}'
return res;
}
map.prototype.getOrSet = function (key, init) { if (this.map.has(key)) { return this.map.get(key); } else { this.map.set(key,init); return init; } }
/** @namespace builtin */
/**
 * @constructor
 * @param {{promise?: Promise}} init
*/
function _v_Promise({ promise }) {
	this.promise = promise
};
_v_Promise.prototype = {
	toString() {
		return `_v_Promise { promise: ${this["promise"].toString()} }`
	},
	/** @type {Promise} */
	$toJS() { return this; }
	};

/**
 * @function
 * @param {anon_fn_js__any} on_fullfilled
 * @param {anon_fn_js__any} on_rejected
 * @returns {void}
*/
function Promise_T_JS__Any_then_T_Any(p, on_fullfilled, on_rejected) {
	try {
		p.promise.then(on_fullfilled, on_rejected);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {anon_fn_js__any} callback
 * @returns {Promise_T_JS__Any}
*/
function Promise_T_JS__Any_catch_T_Any(p, callback) {
	try {
		/** @type {Promise} */
		const promise = p.promise.v_catch(callback);
		return (function() {
			let _tmp24 = new _v_Promise({});
			_tmp24.promise = promise;
			return _tmp24;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Any} error
 * @returns {Promise_T_JS__Any}
*/
function promise_reject(error) {
	try {
		/** @type {Promise} */
		const promise = Promise.reject(error);
		return (function() {
			let _tmp25 = new _v_Promise({});
			_tmp25.promise = promise;
			return _tmp25;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
/**
 * @function
 * @returns {string}
*/
function Array_rune_string(ra) {
	try {
		/** @type {strings__Builder} */
		let sb = strings__new_builder(ra.len);
		strings__Builder_write_runes(sb,ra);
		/** @type {string} */
		const res = new string(strings__Builder_str(new $ref(sb)));
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} count
 * @returns {string}
*/
function rune_repeat(c, count) {
	try {
		if ((new bool(count.valueOf() < new int(0).valueOf())).valueOf()) {
			builtin__panic (new string(`rune.repeat: count is negative: ${int_str(count)}`));
		} else if ((new bool(count.valueOf() == new int(0).valueOf())).valueOf()) {
			return new string("");
		} else if ((new bool(count.valueOf() == new int(1).valueOf())).valueOf()) {
			return rune_str(c);
		}
		/** @type {string} */
		const res = new string(new string(""));
		res.str = String.fromCharCode(Number(c.val))
		return string_repeat(res,count);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function rune_str(c) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = String.fromCharCode(Number(c.val))
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
/**
 * @function
 * @returns {Array_rune}
*/
function string_runes(s) {
	try {
		/** @type {Array_rune} */
		let runes = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		for (let i = new int(new int(0)); +new bool(i.valueOf() < s.len.valueOf()); i.val ++) {
			try { 
				let r = new rune(new u8('0')); r = new rune(s.str[i.val].charCodeAt())
				array_push(runes,r,false);
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return runes;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} a
 * @param {int} b
 * @returns {string}
*/
function string_slice(s, a, b) {
	try {
		return new string(s.str.slice(Number(a.$toJS()), Number(b.$toJS())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} start
 * @param {int} end
 * @returns {string}
*/
function string_substr(s, start, end) {
	try {
		return string_slice(s,start, end);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} dot
 * @returns {string}
*/
function string_after(s, dot) {
	try {
		return new string(s.str.slice(Number(new int( new int(s.str.lastIndexOf(dot.str)).valueOf() + new int(1).valueOf()).$toJS()), s.str.length));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u8} dot
 * @returns {string}
*/
function string_after_char(s, dot) {
	try {
		return s;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} dot
 * @returns {string}
*/
function string_all_after(s, dot) {
	try {
		/** @type {int} */
		const pos = new int(((new bool(dot.len.valueOf() == new int(0).valueOf())).valueOf() ? new int(-1) : new int(s.str.indexOf(dot.str))));
		if ((new bool(pos.valueOf() == new int(-1).valueOf())).valueOf()) {
			return string_clone(s,);
		}
		return string_slice(s,new int( pos.valueOf() + dot.len.valueOf()), s.len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} dot
 * @returns {string}
*/
function string_all_after_last(s, dot) {
	try {
		/** @type {int} */
		const pos = new int(((new bool(dot.len.valueOf() == new int(0).valueOf())).valueOf() ? new int(-1) : new int(s.str.lastIndexOf(dot.str))));
		if ((new bool(pos.valueOf() == new int(-1).valueOf())).valueOf()) {
			return string_clone(s,);
		}
		return string_slice(s,new int( pos.valueOf() + dot.len.valueOf()), s.len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} dot
 * @returns {string}
*/
function string_all_before(s, dot) {
	try {
		/** @type {int} */
		const pos = new int(((new bool(dot.len.valueOf() == new int(0).valueOf())).valueOf() ? new int(-1) : new int(s.str.indexOf(dot.str))));
		if ((new bool(pos.valueOf() == new int(-1).valueOf())).valueOf()) {
			return string_clone(s,);
		}
		return string_slice(s,new int(0), pos);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} dot
 * @returns {string}
*/
function string_all_before_last(s, dot) {
	try {
		/** @type {int} */
		const pos = new int(((new bool(dot.len.valueOf() == new int(0).valueOf())).valueOf() ? new int(-1) : new int(s.str.lastIndexOf(dot.str))));
		if ((new bool(pos.valueOf() == new int(-1).valueOf())).valueOf()) {
			return string_clone(s,);
		}
		return string_slice(s,new int(0), pos);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {bool}
*/
function string_bool(s) {
	try {
		return new bool(s.valueOf() == new string("true").valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} dot
 * @returns {Array_string}
*/
function string_split(s, dot) {
	try {
		/** @type {Array} */
		const tmparr = s.str.split(dot.str).map((function () { 
		return function (it) {
			/** @type {string} */
			const res = new string(new string(""));
			res.str = it
			return res;
		}})()
		);
		const _tmp26 = tmparr;
		/** @type {Array_string} */
		let arr = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		arr = new array(new array_buffer({arr: tmparr,index_start: new int(0),len: new int(tmparr.length)}))
		return arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Array_u8}
*/
function string_bytes(s) {
	try {
		/** @type {string} */
		const sep = new string(new string(""));
		/** @type {Array} */
		const tmparr = s.str.split(sep.str).map((function () { 
		return function (it) {
			return new Any(new u8(it.charCodeAt(Number(new int(0).$toJS()))));
		}})()
		);
		const _tmp27 = tmparr;
		/** @type {Array_u8} */
		let arr = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		arr = new array(new array_buffer({arr: tmparr,index_start: new int(0),len: new int(tmparr.length)}))
		return arr;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function string_capitalize(s) {
	try {
		/** @type {string} */
		const part = new string(new string(s.str.slice(Number(new int(1).$toJS()), s.str.length)));
		return new string(s.str.charAt(Number(new int(0).$toJS())).toUpperCase().concat(part.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function string_clone(s) {
	try {
		return new string(s.str);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} substr
 * @returns {bool}
*/
function string_contains(s, substr) {
	try {
		return new bool(s.str.includes(substr.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} chars
 * @returns {bool}
*/
function string_contains_any(s, chars) {
	try {
		/** @type {string} */
		const sep = new string(new string(""));
		/** @type {Array} */
		const res = chars.str.split(sep.str);
		for (let i = new int(0); i < new int(res.length); i = new int(i + 1)) {
			try { 
				if ((new bool(s.str.includes(res.at(Number(i.$toJS()))))).valueOf()) {
					return new bool(true);
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new bool(false);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_string} chars
 * @returns {bool}
*/
function string_contains_any_substr(s, chars) {
	try {
		if ((new bool(chars.len.valueOf() == new int(0).valueOf())).valueOf()) {
			return new bool(true);
		}
		for (const x of chars) {
			try { 
				if ((new bool(s.str.includes(x.str))).valueOf()) {
					return new bool(true);
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new bool(false);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} substr
 * @returns {int}
*/
function string_count(s, substr) {
	try {
		/** @type {Array} */
		const arr = s.str.split(substr.str);
		/** @type {int} */
		const len = new int(new int(arr.length));
		if ((new bool(len.valueOf() == new int(0).valueOf())).valueOf()) {
			return new int(0);
		} else {
			return new int( len.valueOf() - new int(1).valueOf());
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} p
 * @returns {bool}
*/
function string_ends_with(s, p) {
	try {
		/** @type {bool} */
		let res = new bool(new bool(false));
		res.val = s.str.endsWith(p.str)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} p
 * @returns {bool}
*/
function string_starts_with(s, p) {
	try {
		return new bool(s.str.startsWith(p.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Array_string}
*/
function string_fields(s) {
	try {
		/** @type {Array_string} */
		let res = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		/** @type {int} */
		let word_start = new int(new int(0));
		/** @type {int} */
		let word_len = new int(new int(0));
		/** @type {bool} */
		let is_in_word = new bool(new bool(false));
		/** @type {bool} */
		let is_space = new bool(new bool(false));
		for (const [i, c] of Array.from(s.str.split('').entries(), ([i, c]) => [i, new u8(c)])) {
			try { 
				/** @type {bool} */
				is_space = new bool((Array_int_contains(new array(new array_buffer({arr: [new int(new int(32)), new int(new int(9)), new int(new int(10))], len: new int(3), cap: new int(3)})),c)));
				if ((!is_space.val ).valueOf()) {
					word_len.val ++;
				}
				if ((new bool( !is_in_word.val .valueOf() && !is_space.val .valueOf())).valueOf()) {
					/** @type {int} */
					word_start = new int(i);
					/** @type {bool} */
					is_in_word = new bool(new bool(true));
					continue;
				}
				if ((new bool( is_space.valueOf() && is_in_word.valueOf())).valueOf()) {
					array_push(res,string_slice(s,word_start, new int( word_start.valueOf() + word_len.valueOf())),false);
					/** @type {bool} */
					is_in_word = new bool(new bool(false));
					/** @type {int} */
					word_len = new int(new int(0));
					/** @type {int} */
					word_start = new int(new int(0));
					continue;
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		if ((new bool( is_in_word.valueOf() && new bool(word_len.valueOf() > new int(0).valueOf()).valueOf())).valueOf()) {
			array_push(res,string_slice(s,word_start, s.len),false);
		}
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} start
 * @param {string} end
 * @returns {string}
*/
function string_find_between(s, start, end) {
	try {
		return new string(s.str.slice(Number(new int( new int(s.str.indexOf(start.str)).valueOf() + new int(1).valueOf()).$toJS()), s.str.indexOf(end.str)));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function string_free(s) {
s = new $ref(s)
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {int}
*/
function string_hash(s) {
	try {
		/** @type {u32} */
		let h = new u32(new int(0));
		if ((new bool( new bool(h.valueOf() == new int(0).valueOf()).valueOf() && new bool(s.len.valueOf() > new int(0).valueOf()).valueOf())).valueOf()) {
			for (const c of s.str.split('').map(c => new u8(c))) {
				try { 
					/** @type {u32} */
					h = new u32(new u32( new u32( h.valueOf() * new int(31).valueOf()).valueOf() + new u32(c).valueOf()));
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
		}
		return new int(h);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {int}
*/
function string_int(s) {
	try {
		/** @type {int} */
		const res = new int(new int(0));
		if (typeof(s) == "string") { res.val = parseInt(s) }
		else { res.val = parseInt(s.str) }
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {i64}
*/
function string_i64(s) {
	try {
		return new i64(parseInt(s.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {i8}
*/
function string_i8(s) {
	try {
		return new i8(parseInt(s.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {i16}
*/
function string_i16(s) {
	try {
		return new i16(parseInt(s.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {f32}
*/
function string_f32(s) {
	try {
		return new f32(parseFloat(s.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {f64}
*/
function string_f64(s) {
	try {
		return new f64(parseFloat(s.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {u16}
*/
function string_u16(s) {
	try {
		return new u16(parseInt(s.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {u32}
*/
function string_u32(s) {
	try {
		return new u32(parseInt(s.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {u64}
*/
function string_u64(s) {
	try {
		return new u64(parseInt(s.str));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {u64}
*/
function string_u8(s) {
	try {
		/** @type {u8} */
		const res = new u8(new int(0));
		res.val = u8(JS.parseInt(s.str))
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} cutset
 * @returns {string}
*/
function string_trim_right(s, cutset) {
	try {
		if ((new bool( new bool(s.len.valueOf() < new int(1).valueOf()).valueOf() || new bool(cutset.len.valueOf() < new int(1).valueOf()).valueOf())).valueOf()) {
			return string_clone(s,);
		}
		/** @type {int} */
		let pos = new int(new int( s.len.valueOf() - new int(1).valueOf()));
		while (+new bool(pos.valueOf() >= new int(0).valueOf())) {
			try { 
				/** @type {bool} */
				let found = new bool(new bool(false));
				for (const cs of cutset.str.split('').map(c => new u8(c))) {
					try { 
						if ((new bool(new u8(s.str.charCodeAt(pos)).valueOf() == cs.valueOf())).valueOf()) {
							/** @type {bool} */
							found = new bool(new bool(true));
						}
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
				if ((!found.val ).valueOf()) {
					break;
				}
				pos.val --;
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		if ((new bool(pos.valueOf() < new int(0).valueOf())).valueOf()) {
			return new string("");
		}
		return string_slice(s,new int(0), new int( pos.valueOf() + new int(1).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [direct_array_access] */
/**
 * @function
 * @param {string} cutset
 * @returns {string}
*/
function string_trim_left(s, cutset) {
	try {
		if ((new bool( new bool(s.len.valueOf() < new int(1).valueOf()).valueOf() || new bool(cutset.len.valueOf() < new int(1).valueOf()).valueOf())).valueOf()) {
			return string_clone(s,);
		}
		/** @type {int} */
		let pos = new int(new int(0));
		while (+new bool(pos.valueOf() < s.len.valueOf())) {
			try { 
				/** @type {bool} */
				let found = new bool(new bool(false));
				for (const cs of cutset.str.split('').map(c => new u8(c))) {
					try { 
						if ((new bool(new u8(s.str.charCodeAt(pos)).valueOf() == cs.valueOf())).valueOf()) {
							/** @type {bool} */
							found = new bool(new bool(true));
							break;
						}
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
				if ((!found.val ).valueOf()) {
					break;
				}
				pos.val ++;
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return string_slice(s,pos, s.len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} str
 * @returns {string}
*/
function string_trim_string_left(s, str) {
	try {
		if ((string_starts_with(s,str)).valueOf()) {
			return string_slice(s,str.len, s.len);
		}
		return string_clone(s,);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} str
 * @returns {string}
*/
function string_trim_string_right(s, str) {
	try {
		if ((string_ends_with(s,str)).valueOf()) {
			return string_slice(s,new int(0), new int( s.len.valueOf() - str.len.valueOf()));
		}
		return string_clone(s,);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [deprecated] */
/* [deprecated_after] */
/**
 * @function
 * @deprecated
 * @param {string} str
 * @returns {string}
*/
function string_trim_prefix(s, str) {
	try {
		return string_trim_string_left(s,str);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [deprecated] */
/* [deprecated_after] */
/**
 * @function
 * @deprecated
 * @param {string} str
 * @returns {string}
*/
function string_trim_suffix(s, str) {
	try {
		return string_trim_string_right(s,str);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} a
 * @param {string} b
 * @returns {int}
*/
function compare_strings(a, b) {
a = new $ref(a)
b = new $ref(b)
	try {
		if ((new bool(a.valueOf().valueOf() < b.valueOf().valueOf())).valueOf()) {
			return new int(-1);
		}
		if ((new bool(a.valueOf().valueOf() > b.valueOf().valueOf())).valueOf()) {
			return new int(1);
		}
		return new int(0);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} a
 * @param {string} b
 * @returns {int}
*/
function compare_strings_reverse(a, b) {
a = new $ref(a)
b = new $ref(b)
	try {
		if ((new bool(a.valueOf().valueOf() < b.valueOf().valueOf())).valueOf()) {
			return new int(1);
		}
		if ((new bool(a.valueOf().valueOf() > b.valueOf().valueOf())).valueOf()) {
			return new int(-1);
		}
		return new int(0);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} a
 * @param {string} b
 * @returns {int}
*/
function compare_strings_by_len(a, b) {
a = new $ref(a)
b = new $ref(b)
	try {
		if ((new bool(a.val.len.valueOf() < b.val.len.valueOf())).valueOf()) {
			return new int(-1);
		}
		if ((new bool(a.val.len.valueOf() > b.val.len.valueOf())).valueOf()) {
			return new int(1);
		}
		return new int(0);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} a
 * @param {string} b
 * @returns {int}
*/
function compare_lower_strings(a, b) {
a = new $ref(a)
b = new $ref(b)
	try {
		/** @type {string} */
		const aa = new string(string_to_lower(a.valueOf(),));
		/** @type {string} */
		const bb = new string(string_to_lower(b.valueOf(),));
		return compare_strings(new $ref(aa), new $ref(bb));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} idx
 * @returns {u8}
*/
function string_at(s, idx) {
	try {
		/** @type {u8} */
		let result = new u8(new int(0));
		result = new u8(s.str.charCodeAt(result))
		return result;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function string_to_lower(s) {
	try {
		/** @type {string} */
		let result = new string(new string(""));
		let str = s.str.toLowerCase()
		result = new string(str)
		return result;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} old_sub
 * @param {string} new_sub
 * @returns {string}
*/
function string_replace(s, old_sub, new_sub) {
	try {
		/** @type {string} */
		let result = new string(new string(""));
		result = new string( s.str.replaceAll(old_sub.str, new_sub.str) )
		return result;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function string_to_upper(s) {
	try {
		/** @type {string} */
		let result = new string(new string(""));
		let str = s.str.toUpperCase()
		result = new string(str)
		return result;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function Array_string_sort(s) {
s = new $ref(s)
	try {
		array_sort_with_compare(s.valueOf(),compare_strings);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function Array_string_sort_ignore_case(s) {
s = new $ref(s)
	try {
		array_sort_with_compare(s.valueOf(),compare_lower_strings);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function Array_string_sort_by_len(s) {
s = new $ref(s)
	try {
		array_sort_with_compare(s.valueOf(),compare_strings_by_len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function string_str(s) {
	try {
		return string_clone(s,);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} count
 * @returns {string}
*/
function string_repeat(s, count) {
	try {
		/** @type {string} */
		let result = new string(new string(""));
		result = new string(s.str.repeat(count))
		return result;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

function string_iterator(string) { this.stringIteratorFieldIndex = 0; this.stringIteratorIteratedString = string.str; }
string_iterator.prototype.next = function next() {
var done = true;
var value = undefined;
var position = this.stringIteratorFieldIndex;
if (position !== -1) {
var string = this.stringIteratorIteratedString;
var length = string.length >>> 0;
if (position >= length) {
this.stringIteratorFieldIndex = -1;
} else {
done = false;
var first = string.charCodeAt(position);
if (first < 0xD800 || first > 0xDBFF || position + 1 === length)
value = new u8(string[position]);
else {
value = new u8(string[position]+string[position+1])
}
this.stringIteratorFieldIndex = position + value.length;
}
}
return {
value, done
}
}
string.prototype[Symbol.iterator] = function () { return new string_iterator(this) }
/**
 * @function
 * @returns {string}
*/
function string_strip_margin(s) {
	try {
		return string_strip_margin_custom(s,new u8('|'));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [direct_array_access] */
/**
 * @function
 * @param {u8} del
 * @returns {string}
*/
function string_strip_margin_custom(s, del) {
	try {
		/** @type {u8} */
		let sep = new u8(del);
		if ((u8_is_space(sep,)).valueOf()) {
			builtin__eprintln (new string("Warning: `strip_margin` cannot use white-space as a delimiter"));
			builtin__eprintln (new string("    Defaulting to `|`"));
			/** @type {u8} */
			sep = new u8(new u8('|'));
		}
		/** @type {Array_u8} */
		let ret = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		ret = new array()
		/** @type {int} */
		let count = new int(new int(0));
		for (let i = new int(new int(0)); +new bool(i.valueOf() < s.len.valueOf()); i.val ++) {
			try { 
				if (((Array_int_contains(new array(new array_buffer({arr: [new int(new int(10)), new int(new int(13))], len: new int(2), cap: new int(2)})),new u8(s.str.charCodeAt(i))))).valueOf()) {
					{
						ret.arr.set(new int(count.valueOf()),new u8(new u8(s.str.charCodeAt(i)))); }
					
					count.val ++;
					if ((new bool( new bool( new bool(new u8(s.str.charCodeAt(i)).valueOf() == new int(13).valueOf()).valueOf() && new bool(i.valueOf() < new int( s.len.valueOf() - new int(1).valueOf()).valueOf()).valueOf()).valueOf() && new bool(new u8(s.str.charCodeAt(new int( i.valueOf() + new int(1).valueOf()))).valueOf() == new int(10).valueOf()).valueOf())).valueOf()) {
						{
							ret.arr.set(new int(count.valueOf()),new u8(new u8(s.str.charCodeAt(new int( i.valueOf() + new int(1).valueOf()))))); }
						
						count.val ++;
						i.val ++;
					}
					while (+new bool(new u8(s.str.charCodeAt(i)).valueOf() != sep.valueOf())) {
						try { 
							i.val ++;
							if ((new bool(i.valueOf() >= s.len.valueOf())).valueOf()) {
								break;
							}
						} catch (e) {
						 if (e instanceof BreakException) { break; }
						 else if (e instanceof ContinueException) { continue; }
						 else { throw e; } }
					}
					
				} else {
					{
						ret.arr.set(new int(count.valueOf()),new u8(new u8(s.str.charCodeAt(i)))); }
					
					count.val ++;
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {string} */
		let result = new string(new string(""));
		for (let x of ret.arr) result.str += String.fromCharCode(x.val)
		return result;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [direct_array_access] */
/**
 * @function
 * @param {string} delim
 * @param {int} nth
 * @returns {Array_string}
*/
function string_split_nth(s, delim, nth) {
	try {
		/** @type {Array_string} */
		let res = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		/** @type {int} */
		let i = new int(new int(0));
		
		if (vEq(delim.len,new int(0))) {
			/** @type {int} */
			i = new int(new int(1));
			for (const ch of s.str.split('').map(c => new u8(c))) {
				try { 
					if ((new bool( new bool(nth.valueOf() > new int(0).valueOf()).valueOf() && new bool(i.valueOf() >= nth.valueOf()).valueOf())).valueOf()) {
						array_push(res,string_slice(s,i, s.len),false);
						break;
					}
					array_push(res,u8_str(ch),false);
					i.val ++;
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
			return res;
		}
		else if (vEq(delim.len,new int(1))) {
			/** @type {int} */
			let start = new int(new int(0));
			/** @type {u8} */
			const delim_byte = new u8(new u8(delim.str.charCodeAt(new int(0))));
			while (+new bool(i.valueOf() < s.len.valueOf())) {
				try { 
					if ((new bool(new u8(s.str.charCodeAt(i)).valueOf() == delim_byte.valueOf())).valueOf()) {
						/** @type {bool} */
						const was_last = new bool(new bool( new bool(nth.valueOf() > new int(0).valueOf()).valueOf() && new bool(res.len.valueOf() == new int( nth.valueOf() - new int(1).valueOf()).valueOf()).valueOf()));
						if ((was_last).valueOf()) {
							break;
						}
						/** @type {string} */
						const val = new string(string_slice(s,start, i));
						array_push(res,val,false);
						/** @type {int} */
						start = new int(new int( i.valueOf() + delim.len.valueOf()));
						/** @type {int} */
						i = new int(start);
					} else {
						i.val ++;
					}
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
			if ((new bool( new bool(nth.valueOf() < new int(1).valueOf()).valueOf() || new bool(res.len.valueOf() < nth.valueOf()).valueOf())).valueOf()) {
				array_push(res,string_slice(s,start, s.len),false);
			}
			return res;
		}
		else {
			/** @type {int} */
			let start = new int(new int(0));
			while (+new bool(i.valueOf() <= s.len.valueOf())) {
				try { 
					/** @type {bool} */
					const is_delim = new bool(new bool( new bool(new int( i.valueOf() + delim.len.valueOf()).valueOf() <= s.len.valueOf()).valueOf() && new bool(string_slice(s,i, new int( i.valueOf() + delim.len.valueOf())).valueOf() == delim.valueOf()).valueOf()));
					if ((is_delim).valueOf()) {
						/** @type {bool} */
						const was_last = new bool(new bool( new bool(nth.valueOf() > new int(0).valueOf()).valueOf() && new bool(res.len.valueOf() == new int( nth.valueOf() - new int(1).valueOf()).valueOf()).valueOf()));
						if ((was_last).valueOf()) {
							break;
						}
						/** @type {string} */
						const val = new string(string_slice(s,start, i));
						array_push(res,val,false);
						/** @type {int} */
						start = new int(new int( i.valueOf() + delim.len.valueOf()));
						/** @type {int} */
						i = new int(start);
					} else {
						i.val ++;
					}
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
			if ((new bool( new bool(nth.valueOf() < new int(1).valueOf()).valueOf() || new bool(res.len.valueOf() < nth.valueOf()).valueOf())).valueOf()) {
				array_push(res,string_slice(s,start, s.len),false);
			}
			return res;
		};
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @constructor
 * @param {{idx?: int, val_idx?: int}} init
*/
function RepIndex({ idx = new int(0), val_idx = new int(0) }) {
	this.idx = idx
	this.val_idx = val_idx
};
RepIndex.prototype = {
	...Object.prototype,
	...Any.prototype,
	toString() {
		return `RepIndex { idx: ${this["idx"].toString()} , val_idx: ${this["val_idx"].toString()} }`
	},
	/** @type {int} */
	idx: new int(0),
	/** @type {int} */
	val_idx: new int(0),
	$toJS() { return this; }
	};

/* [direct_array_access] */
/**
 * @function
 * @param {Array_string} vals
 * @returns {string}
*/
function string_replace_each(s, vals) {
	try {
		if ((new bool( new bool(s.len.valueOf() == new int(0).valueOf()).valueOf() || new bool(vals.len.valueOf() == new int(0).valueOf()).valueOf())).valueOf()) {
			return string_clone(s,);
		}
		if ((new bool(new int( vals.len.valueOf() % new int(2).valueOf()).valueOf() != new int(0).valueOf())).valueOf()) {
			builtin__eprintln (new string("string.replace_each(): odd number of strings"));
			return string_clone(s,);
		}
		/** @type {Array_RepIndex} */
		let idxs = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		/** @type {int} */
		let idx = new int(new int(0));
		/** @type {int} */
		let new_len = new int(s.len);
		/** @type {string} */
		const s_ = new string(string_clone(s,));
		function setCharAt(str,index,chr) {
		if(index > str.length-1) return str;
		return str.substring(0,index) + chr + str.substring(index+1);
		}
		for (let rep_i = new int(new int(0)); +new bool(rep_i.valueOf() < vals.len.valueOf()); rep_i = new int(new int( rep_i.valueOf() + new int(2).valueOf()))) {
			try { 
				let rep = new string(vals.arr.get(new int(rep_i.valueOf()))); let with_ = new string(vals.arr.get(new int(new int( rep_i.valueOf() + new int(1).valueOf()).valueOf()))); with_ = new string(with_); while (true) {
					try { 
						idx = new int(string_index_after(s_,rep, idx)); if ((new bool(idx.valueOf() == new int(-1).valueOf())).valueOf()) {
							break;
						}
						for (let i = new int(0); i < rep.len; i = new int(i + 1)) {
							try { 
								/** @type {int} */
								let j_ = new int(i);
								/** @type {int} */
								j_ = new int(j_);
								s_.str = setCharAt(s_.str,idx + i, String.fromCharCode(127))
							} catch (e) {
							 if (e instanceof BreakException) { break; }
							 else if (e instanceof ContinueException) { continue; }
							 else { throw e; } }
						}
						
						/** @type {RepIndex} */
						const rep_idx = (function() {
							let _tmp28 = new RepIndex({});
							_tmp28.idx = new int(0);
							_tmp28.val_idx = new int(0);
							return _tmp28;
						})()
						;
						rep_idx.idx = idx.val
						rep_idx.val_idx = new int(rep_i.val)
						array_push(idxs,rep_idx,false);
						/** @type {int} */
						idx.val = Math.floor(idx + new int(rep.len));
						/** @type {int} */
						new_len.val = Math.floor(new_len + new int(new int( with_.len.valueOf() - rep.len.valueOf())));
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		if ((new bool(idxs.len.valueOf() == new int(0).valueOf())).valueOf()) {
			return string_clone(s,);
		}
v_sort(idxs,compare_RepIndex_by_idx);
		/** @type {string} */
		let b = new string(new string(""));
		for (let i = 0; i < new_len.val;i++) b.str += String.fromCharCode(127)
		/** @type {int} */
		new_len = new int(new_len);
		/** @type {int} */
		let idx_pos = new int(new int(0));
		/** @type {RepIndex} */
		let cur_idx = idxs.arr.get(new int(idx_pos.valueOf()));
		/** @type {int} */
		let b_i = new int(new int(0));
		for (let i = new int(new int(0)); +new bool(i.valueOf() < s.len.valueOf()); i.val ++) {
			try { 
				if ((new bool(i.valueOf() == cur_idx.idx.valueOf())).valueOf()) {
					let rep = new string(vals.arr.get(new int(cur_idx.val_idx.valueOf()))); let with_ = new string(vals.arr.get(new int(new int( cur_idx.val_idx.valueOf() + new int(1).valueOf()).valueOf()))); for (let j = new int(0); j < with_.len; j = new int(j + 1)) {
						try { 
							/** @type {int} */
							let j_ = new int(j);
							/** @type {int} */
							j_ = new int(j_);
							b.str = setCharAt(b.str,b_i, with_.str[j])
							b_i.val ++;
						} catch (e) {
						 if (e instanceof BreakException) { break; }
						 else if (e instanceof ContinueException) { continue; }
						 else { throw e; } }
					}
					
					/** @type {int} */
					i.val = Math.floor(i + new int(new int( rep.len.valueOf() - new int(1).valueOf())));
					idx_pos.val ++;
					if ((new bool(idx_pos.valueOf() < idxs.len.valueOf())).valueOf()) {
						/** @type {RepIndex} */
						cur_idx = idxs.arr.get(new int(idx_pos.valueOf()));
					}
				} else {
					b.str = setCharAt(b.str,b_i,s.str[i]) //b.str[b_i] = s.str[i]
					b_i.val ++;
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return b;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} p
 * @returns {int}
*/
function string_last_index_(s, p) {
	try {
		if ((new bool( new bool(p.len.valueOf() > s.len.valueOf()).valueOf() || new bool(p.len.valueOf() == new int(0).valueOf()).valueOf())).valueOf()) {
			return new int(-1);
		}
		/** @type {int} */
		let i = new int(new int( s.len.valueOf() - p.len.valueOf()));
		while (+new bool(i.valueOf() >= new int(0).valueOf())) {
			try { 
				/** @type {int} */
				let j = new int(new int(0));
				while (+new bool( new bool(j.valueOf() < p.len.valueOf()).valueOf() && new bool(new u8(s.str.charCodeAt(new int( i.valueOf() + j.valueOf()))).valueOf() == new u8(p.str.charCodeAt(j)).valueOf()).valueOf())) {
					try { 
						j.val ++;
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
				if ((new bool(j.valueOf() == p.len.valueOf())).valueOf()) {
					return i;
				}
				i.val --;
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new int(-1);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} p
 * @returns {int}
*/
function string_last_index(s, p) {
	try {
		/** @type {int} */
		const idx = new int(string_last_index_(s,p));
		if ((new bool(idx.valueOf() == new int(-1).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: none__});
		}
		const _tmp29 = new _option({});
		_tmp29.state = new u8(0);_tmp29.data = idx
		return _tmp29;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function string_trim_space(s) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = s.str.trim()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} p
 * @param {int} start
 * @returns {int}
*/
function string_index_after(s, p, start) {
	try {
		if ((new bool(p.len.valueOf() > s.len.valueOf())).valueOf()) {
			return new int(-1);
		}
		/** @type {int} */
		let strt = new int(start);
		if ((new bool(start.valueOf() < new int(0).valueOf())).valueOf()) {
			/** @type {int} */
			strt = new int(new int(0));
		}
		if ((new bool(start.valueOf() >= s.len.valueOf())).valueOf()) {
			return new int(-1);
		}
		/** @type {int} */
		let i = new int(strt);
		while (+new bool(i.valueOf() < s.len.valueOf())) {
			try { 
				/** @type {int} */
				let j = new int(new int(0));
				/** @type {int} */
				let ii = new int(i);
				while (+new bool( new bool(j.valueOf() < p.len.valueOf()).valueOf() && new bool(new u8(s.str.charCodeAt(ii)).valueOf() == new u8(p.str.charCodeAt(j)).valueOf()).valueOf())) {
					try { 
						j.val ++;
						ii.val ++;
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
				if ((new bool(j.valueOf() == p.len.valueOf())).valueOf()) {
					return i;
				}
				i.val ++;
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new int(-1);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Array_string}
*/
function string_split_into_lines(s) {
	try {
		/** @type {Array_string} */
		let res = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		if ((new bool(s.len.valueOf() == new int(0).valueOf())).valueOf()) {
			return res;
		}
		res.arr.arr = s.str.split("\n")
		if (res.arr.arr[res.arr.arr.length-1] == "") res.arr.arr.pop();
		res.arr.len = new int(res.arr.arr.length);
		res.arr.cap = new int(res.arr.arr.length);
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} rep
 * @param {string} with_
 * @returns {string}
*/
function string_replace_once(s, rep, with_) {
	try {
		/** @type {string} */
		const s2 = new string(new string(""));
		s2.val = s.str.replace(rep.str,with_.str)
		return s2;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function string_title(s) {
	try {
		/** @type {Array_string} */
		const words = string_split(s,new string(" "));
		/** @type {Array_string} */
		let tit = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		for (const word of words) {
			try { 
				array_push(tit,string_capitalize(word,),false);
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {string} */
		const title = new string(Array_string_join(tit,new string(" ")));
		return title;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} chars
 * @returns {int}
*/
function string_index_any(s, chars) {
	try {
		for (const [i, ss] of Array.from(s.str.split('').entries(), ([i, ss]) => [i, new u8(ss)])) {
			try { 
				for (const c of chars.str.split('').map(c => new u8(c))) {
					try { 
						if ((new bool(c.valueOf() == ss.valueOf())).valueOf()) {
							return i;
						}
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new int(-1);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} max
 * @returns {string}
*/
function string_limit(s, max) {
	try {
		/** @type {Array_rune} */
		const u = string_runes(s,);
		if ((new bool(u.len.valueOf() <= max.valueOf())).valueOf()) {
			return string_clone(s,);
		}
		return Array_rune_string(array_slice(u,new int(0), max),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {bool}
*/
function string_is_title(s) {
	try {
		/** @type {Array_string} */
		const words = string_split(s,new string(" "));
		for (const word of words) {
			try { 
				if ((!string_is_capital(word,).val ).valueOf()) {
					return new bool(false);
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new bool(true);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [direct_array_access] */
/**
 * @function
 * @returns {bool}
*/
function string_is_capital(s) {
	try {
		if ((new bool( new bool(s.len.valueOf() == new int(0).valueOf()).valueOf() || !(new bool( new bool(new u8(s.str.charCodeAt(new int(0))).valueOf() >= new u8('A').valueOf()).valueOf() && new bool(new u8(s.str.charCodeAt(new int(0))).valueOf() <= new u8('Z').valueOf()).valueOf())).val .valueOf())).valueOf()) {
			return new bool(false);
		}
		for (let i = new int(1); i < s.len; i = new int(i + 1)) {
			try { 
				if ((new bool( new bool(new u8(s.str.charCodeAt(i)).valueOf() >= new u8('A').valueOf()).valueOf() && new bool(new u8(s.str.charCodeAt(i)).valueOf() <= new u8('Z').valueOf()).valueOf())).valueOf()) {
					return new bool(false);
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new bool(true);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [direct_array_access] */
/**
 * @function
 * @returns {bool}
*/
function string_starts_with_capital(s) {
	try {
		if ((new bool( new bool(s.len.valueOf() == new int(0).valueOf()).valueOf() || !(new bool( new bool(new u8(s.str.charCodeAt(new int(0))).valueOf() >= new u8('A').valueOf()).valueOf() && new bool(new u8(s.str.charCodeAt(new int(0))).valueOf() <= new u8('Z').valueOf()).valueOf())).val .valueOf())).valueOf()) {
			return new bool(false);
		}
		return new bool(true);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {bool}
*/
function string_is_upper(s) {
	try {
		/** @type {bool} */
		const res = new bool(new bool(false));
		res.val = s.str == s.str.toUpperCase() && s.str != s.str.toLowerCase()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {bool}
*/
function string_is_lower(s) {
	try {
		/** @type {bool} */
		const res = new bool(new bool(false));
		res.val = s.str == s.str.toLowerCase() && s.str != s.str.toUpperCase()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function string_reverse(s) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = [...s.str].reverse().join('')
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} cutset
 * @returns {string}
*/
function string_trim(s, cutset) {
	try {
		if ((new bool( new bool(s.len.valueOf() < new int(1).valueOf()).valueOf() || new bool(cutset.len.valueOf() < new int(1).valueOf()).valueOf())).valueOf()) {
			return string_clone(s,);
		}
		/** @type {int} */
		let pos_left = new int(new int(0));
		/** @type {int} */
		let pos_right = new int(new int( s.len.valueOf() - new int(1).valueOf()));
		/** @type {bool} */
		let cs_match = new bool(new bool(true));
		while (+new bool( new bool( new bool(pos_left.valueOf() <= s.len.valueOf()).valueOf() && new bool(pos_right.valueOf() >= new int(-1).valueOf()).valueOf()).valueOf() && cs_match.valueOf())) {
			try { 
				/** @type {bool} */
				cs_match = new bool(new bool(false));
				for (const cs of cutset.str.split('').map(c => new u8(c))) {
					try { 
						if ((new bool(new u8(s.str.charCodeAt(pos_left)).valueOf() == cs.valueOf())).valueOf()) {
							pos_left.val ++;
							/** @type {bool} */
							cs_match = new bool(new bool(true));
							break;
						}
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
				for (const cs of cutset.str.split('').map(c => new u8(c))) {
					try { 
						if ((new bool(new u8(s.str.charCodeAt(pos_right)).valueOf() == cs.valueOf())).valueOf()) {
							pos_right.val --;
							/** @type {bool} */
							cs_match = new bool(new bool(true));
							break;
						}
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
				if ((new bool(pos_left.valueOf() > pos_right.valueOf())).valueOf()) {
					return new string("");
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return string_substr(s,pos_left, new int( pos_right.valueOf() + new int(1).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} sep
 * @returns {string}
*/
function Array_string_join(s, sep) {
	try {
		/** @type {string} */
		let res = new string(new string(""));
		for (const [i, str] of s.entries()) {
			try { 
				/** @type {string} */
				res.str = res + new string(str);
				if ((new bool(i.valueOf() != new int( s.len.valueOf() - new int(1).valueOf()).valueOf())).valueOf()) {
					/** @type {string} */
					res.str = res + new string(sep);
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

Object.defineProperty(string.prototype,"len", { get: function() {return new int(new TextEncoder().encode(this.str).length);}, set: function(l) {/* ignore */ } });
/**
 * @function
 * @param {string} search
 * @returns {int}
*/
function string_index(s, search) {
	try {
		/** @type {int} */
		const res = new int(new int(0));
		res.val = s.str.indexOf(search)
		if ((new bool(res.valueOf() == new int(-1).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: none__});
		}
		const _tmp30 = new _option({});
		_tmp30.state = new u8(0);_tmp30.data = res
		return _tmp30;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {int}
*/
function string_utf32_code(_rune) {
	try {
		/** @type {int} */
		const res = new int(new int(0));
		res.val = s.str.charCodeAt()
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {String} jsstr
 * @returns {string}
*/
function tos(jsstr) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = jsstr
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} a
 * @returns {int}
*/
function string_compare(s, a) {
	try {
		/** @type {int} */
		const min_len = new int(((new bool(s.len.valueOf() < a.len.valueOf())).valueOf() ? s.len : a.len));
		for (let i = new int(0); i < min_len; i = new int(i + 1)) {
			try { 
				if ((new bool(new u8(s.str.charCodeAt(i)).valueOf() < new u8(a.str.charCodeAt(i)).valueOf())).valueOf()) {
					return new int(-1);
				}
				if ((new bool(new u8(s.str.charCodeAt(i)).valueOf() > new u8(a.str.charCodeAt(i)).valueOf())).valueOf()) {
					return new int(1);
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		if ((new bool(s.len.valueOf() < a.len.valueOf())).valueOf()) {
			return new int(-1);
		}
		if ((new bool(s.len.valueOf() > a.len.valueOf())).valueOf()) {
			return new int(1);
		}
		return new int(0);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace builtin */
/**
 * @function
 * @param {string} s
 * @returns {int}
*/
function utf8_str_visible_length(s) {
	try {
		/** @type {int} */
		const res = new int(new int(0));
		res.val = s.str.length;
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s
 * @returns {int}
*/
function utf8_str_len(s) {
	try {
		return s.len;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u8} b
 * @returns {int}
*/
function utf8_char_len(b) {
	try {
		return new int_literal( (new int_literal( (new u8( new int(0xe5000000).valueOf() >> (new u8( (new u8( b.valueOf() >> new int(3).valueOf())).valueOf() & new int(0x1e).valueOf())).valueOf())).valueOf() & new int(3).valueOf())).valueOf() + new int(1).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace time */
/**
 * @function
 * @param {int} oy
 * @param {int} m
 * @param {int} d
 * @returns {int}
*/
function time__days_from_civil(oy, m, d) {
	try {
		/** @type {int} */
		const y = new int(((new bool(m.valueOf() <= new int(2).valueOf())).valueOf() ? new int( oy.valueOf() - new int(1).valueOf()) : oy));
		/** @type {int} */
		const era = new int(new int( y.valueOf() / new int(400).valueOf()));
		/** @type {int} */
		const yoe = new int(new int( y.valueOf() - new int( era.valueOf() * new int(400).valueOf()).valueOf()));
		/** @type {int} */
		const doy = new int(new int( new int( new int( (new int( new int( new int(153).valueOf() * (new int( m.valueOf() + (((new bool(m.valueOf() > new int(2).valueOf())).valueOf() ? new int(-3) : new int(9))).valueOf())).valueOf()).valueOf() + new int(2).valueOf())).valueOf() / new int(5).valueOf()).valueOf() + d.valueOf()).valueOf() - new int(1).valueOf()));
		/** @type {int} */
		const doe = new int(new int( new int( new int( new int( yoe.valueOf() * new int(365).valueOf()).valueOf() + new int( yoe.valueOf() / new int(4).valueOf()).valueOf()).valueOf() - new int( yoe.valueOf() / new int(100).valueOf()).valueOf()).valueOf() + doy.valueOf()));
		return new int( new int( new int( era.valueOf() * new int(146097).valueOf()).valueOf() + doe.valueOf()).valueOf() - new int(719468).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace time */
/**
 * @function
 * @returns {string}
*/
function time__Time_format(t) {
	try {
		return new string(`${int_str(t.year)}-${int_str(t.month)}-${int_str(t.day)} ${int_str(t.hour)}:${int_str(t.minute)}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_format_ss(t) {
	try {
		return new string(`${int_str(t.year)}-${int_str(t.month)}-${int_str(t.day)} ${int_str(t.hour)}:${int_str(t.minute)}:${int_str(t.second)}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_format_ss_milli(t) {
	try {
		return new string(`${int_str(t.year)}-${int_str(t.month)}-${int_str(t.day)} ${int_str(t.hour)}:${int_str(t.minute)}:${int_str(t.second)}.${int_str((new int( t.microsecond.valueOf() / new int(1000).valueOf())))}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_format_ss_micro(t) {
	try {
		return new string(`${int_str(t.year)}-${int_str(t.month)}-${int_str(t.day)} ${int_str(t.hour)}:${int_str(t.minute)}:${int_str(t.second)}.${int_str(t.microsecond)}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_hhmm(t) {
	try {
		return new string(`${int_str(t.hour)}:${int_str(t.minute)}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_hhmmss(t) {
	try {
		return new string(`${int_str(t.hour)}:${int_str(t.minute)}:${int_str(t.second)}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_hhmm12(t) {
	try {
		return time__Time_get_fmt_time_str(t,time__FormatTime.hhmm12);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_ymmdd(t) {
	try {
		return time__Time_get_fmt_date_str(t,time__FormatDelimiter.hyphen, time__FormatDate.yyyymmdd);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_ddmmy(t) {
	try {
		return time__Time_get_fmt_date_str(t,time__FormatDelimiter.dot, time__FormatDate.ddmmyyyy);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_md(t) {
	try {
		return time__Time_get_fmt_date_str(t,time__FormatDelimiter.space, time__FormatDate.mmmd);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} n
 * @returns {string}
*/
function time__ordinal_suffix(n) {
	try {
		if ((new bool( new bool(n.valueOf() > new int(3).valueOf()).valueOf() && new bool(n.valueOf() < new int(21).valueOf()).valueOf())).valueOf()) {
			return new string(`${int_str(n)}th`);
		}
		let _tmp31 = new int( n.valueOf() % new int(10).valueOf());
		
		if (vEq(_tmp31,new int(1))) {
			return new string(`${int_str(n)}st`);
		}
		else if (vEq(_tmp31,new int(2))) {
			return new string(`${int_str(n)}nd`);
		}
		else if (vEq(_tmp31,new int(3))) {
			return new string(`${int_str(n)}rd`);
		}
		else {
			return new string(`${int_str(n)}th`);
		};
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @constant {Array_string} */
let time__tokens_2 = undefined;
/** @constant {Array_string} */
let time__tokens_3 = undefined;
/** @constant {Array_string} */
let time__tokens_4 = undefined;

/**
 * @function
 * @param {string} s
 * @returns {string}
*/
function time__Time_custom_format(t, s) {
	try {
		/** @type {Array_string} */
		let tokens = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		for (let i = new int(new int(0)); +new bool(i.valueOf() < s.len.valueOf()); ) {
			try { 
				for (let j = new int(new int(4)); +new bool(j.valueOf() > new int(0).valueOf()); j.val --) {
					try { 
						if ((new bool(i.valueOf() > new int( s.len.valueOf() - j.valueOf()).valueOf())).valueOf()) {
							continue;
						}
						if ((new bool( new bool( new bool( new bool(j.valueOf() == new int(1).valueOf()).valueOf() || (new bool( new bool(j.valueOf() == new int(2).valueOf()).valueOf() && (Array_string_contains(time__tokens_2,string_slice(s,i, new int( i.valueOf() + j.valueOf())))).valueOf())).valueOf()).valueOf() || (new bool( new bool(j.valueOf() == new int(3).valueOf()).valueOf() && (Array_string_contains(time__tokens_3,string_slice(s,i, new int( i.valueOf() + j.valueOf())))).valueOf())).valueOf()).valueOf() || (new bool( new bool(j.valueOf() == new int(4).valueOf()).valueOf() && (Array_string_contains(time__tokens_4,string_slice(s,i, new int( i.valueOf() + j.valueOf())))).valueOf())).valueOf())).valueOf()) {
							array_push(tokens,string_slice(s,i, new int( i.valueOf() + j.valueOf())),false);
							i.val = Math.floor(i + new int((new int( j.valueOf() - new int(1).valueOf())))); break;
						}
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
				i.val ++;
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {strings__Builder} */
		let sb = strings__new_builder(new int(128));
		for (const token of tokens) {
			try { 
				
				if (token.str === new string("M").str) {
					strings__Builder_write_string(sb,int_str(t.month));
				}
				else if (token.str === new string("MM").str) {
					strings__Builder_write_string(sb,new string(`${int_str(t.month)}`));
				}
				else if (token.str === new string("Mo").str) {
					strings__Builder_write_string(sb,time__ordinal_suffix(t.month));
				}
				else if (token.str === new string("MMM").str) {
					strings__Builder_write_string(sb,string_slice(time__long_months.arr.get(new int(new int( t.month.valueOf() - new int(1).valueOf()).valueOf())),new int(0), new int(3)));
				}
				else if (token.str === new string("MMMM").str) {
					strings__Builder_write_string(sb,time__long_months.arr.get(new int(new int( t.month.valueOf() - new int(1).valueOf()).valueOf())));
				}
				else if (token.str === new string("D").str) {
					strings__Builder_write_string(sb,int_str(t.day));
				}
				else if (token.str === new string("DD").str) {
					strings__Builder_write_string(sb,new string(`${int_str(t.day)}`));
				}
				else if (token.str === new string("Do").str) {
					strings__Builder_write_string(sb,time__ordinal_suffix(t.day));
				}
				else if (token.str === new string("DDD").str) {
					strings__Builder_write_string(sb,int_str((new int( new int( t.day.valueOf() + time__days_before.arr.get(new int(new int( t.month.valueOf() - new int(1).valueOf()).valueOf())).valueOf()).valueOf() + new int(time__is_leap_year(t.year)).valueOf()))));
				}
				else if (token.str === new string("DDDD").str) {
					strings__Builder_write_string(sb,new string(`${int_str(new int( new int( t.day.valueOf() + time__days_before.arr.get(new int(new int( t.month.valueOf() - new int(1).valueOf()).valueOf())).valueOf()).valueOf() + new int(time__is_leap_year(t.year)).valueOf()))}`));
				}
				else if (token.str === new string("DDDo").str) {
					strings__Builder_write_string(sb,time__ordinal_suffix(new int( new int( t.day.valueOf() + time__days_before.arr.get(new int(new int( t.month.valueOf() - new int(1).valueOf()).valueOf())).valueOf()).valueOf() + new int(time__is_leap_year(t.year)).valueOf())));
				}
				else if (token.str === new string("d").str) {
					strings__Builder_write_string(sb,int_str(time__Time_day_of_week(t,)));
				}
				else if (token.str === new string("dd").str) {
					strings__Builder_write_string(sb,string_slice(time__long_days.arr.get(new int(new int( time__Time_day_of_week(t,).valueOf() - new int(1).valueOf()).valueOf())),new int(0), new int(2)));
				}
				else if (token.str === new string("ddd").str) {
					strings__Builder_write_string(sb,string_slice(time__long_days.arr.get(new int(new int( time__Time_day_of_week(t,).valueOf() - new int(1).valueOf()).valueOf())),new int(0), new int(3)));
				}
				else if (token.str === new string("dddd").str) {
					strings__Builder_write_string(sb,time__long_days.arr.get(new int(new int( time__Time_day_of_week(t,).valueOf() - new int(1).valueOf()).valueOf())));
				}
				else if (token.str === new string("YY").str) {
					strings__Builder_write_string(sb,string_slice(int_str(t.year),new int(2), new int(4)));
				}
				else if (token.str === new string("YYYY").str) {
					strings__Builder_write_string(sb,int_str(t.year));
				}
				else if (token.str === new string("H").str) {
					strings__Builder_write_string(sb,int_str(t.hour));
				}
				else if (token.str === new string("HH").str) {
					strings__Builder_write_string(sb,new string(`${int_str(t.hour)}`));
				}
				else if (token.str === new string("h").str) {
					strings__Builder_write_string(sb,int_str((new int( t.hour.valueOf() % new int(12).valueOf()))));
				}
				else if (token.str === new string("hh").str) {
					strings__Builder_write_string(sb,new string(`${int_str((new int( t.hour.valueOf() % new int(12).valueOf())))}`));
				}
				else if (token.str === new string("m").str) {
					strings__Builder_write_string(sb,int_str(t.minute));
				}
				else if (token.str === new string("mm").str) {
					strings__Builder_write_string(sb,new string(`${int_str(t.minute)}`));
				}
				else if (token.str === new string("s").str) {
					strings__Builder_write_string(sb,int_str(t.second));
				}
				else if (token.str === new string("ss").str) {
					strings__Builder_write_string(sb,new string(`${int_str(t.second)}`));
				}
				else if (token.str === new string("k").str) {
					strings__Builder_write_string(sb,int_str((new int( t.hour.valueOf() + new int(1).valueOf()))));
				}
				else if (token.str === new string("kk").str) {
					strings__Builder_write_string(sb,new string(`${int_str((new int( t.hour.valueOf() + new int(1).valueOf())))}`));
				}
				else if (token.str === new string("w").str) {
					strings__Builder_write_string(sb,new string(`${f64_str(time__mceil(new int( (new int( new int( t.day.valueOf() + time__days_before.arr.get(new int(new int( t.month.valueOf() - new int(1).valueOf()).valueOf())).valueOf()).valueOf() + new int(time__is_leap_year(t.year)).valueOf())).valueOf() / new int(7).valueOf())))}`));
				}
				else if (token.str === new string("ww").str) {
					strings__Builder_write_string(sb,new string(`${f64_str(time__mceil(new int( (new int( new int( t.day.valueOf() + time__days_before.arr.get(new int(new int( t.month.valueOf() - new int(1).valueOf()).valueOf())).valueOf()).valueOf() + new int(time__is_leap_year(t.year)).valueOf())).valueOf() / new int(7).valueOf())))}`));
				}
				else if (token.str === new string("wo").str) {
					strings__Builder_write_string(sb,time__ordinal_suffix(new int(time__mceil(new int( (new int( new int( t.day.valueOf() + time__days_before.arr.get(new int(new int( t.month.valueOf() - new int(1).valueOf()).valueOf())).valueOf()).valueOf() + new int(time__is_leap_year(t.year)).valueOf())).valueOf() / new int(7).valueOf())))));
				}
				else if (token.str === new string("Q").str) {
					strings__Builder_write_string(sb,new string(`${int_str(new int( (new int( t.month.valueOf() % new int(4).valueOf())).valueOf() + new int(1).valueOf()))}`));
				}
				else if (token.str === new string("QQ").str) {
					strings__Builder_write_string(sb,new string(`${int_str(new int( (new int( t.month.valueOf() % new int(4).valueOf())).valueOf() + new int(1).valueOf()))}`));
				}
				else if (token.str === new string("Qo").str) {
					strings__Builder_write_string(sb,time__ordinal_suffix(new int( (new int( t.month.valueOf() % new int(4).valueOf())).valueOf() + new int(1).valueOf())));
				}
				else if (token.str === new string("c").str) {
					strings__Builder_write_string(sb,new string(`${int_str(new int( time__Time_day_of_week(t,).valueOf() + new int(1).valueOf()))}`));
				}
				else if (token.str === new string("N").str) {
					strings__Builder_write_string(sb,new string("AD"));
				}
				else if (token.str === new string("NN").str) {
					strings__Builder_write_string(sb,new string("Anno Domini"));
				}
				else if (token.str === new string("Z").str) {
					/** @type {int} */
					let hours = new int(new int( time__offset().valueOf() / time__seconds_per_hour.valueOf()));
					if ((new bool(hours.valueOf() >= new int(0).valueOf())).valueOf()) {
						strings__Builder_write_string(sb,new string(`+${int_str(hours)}`));
					} else {
						/** @type {int} */
						hours = new int(-hours.val );
						strings__Builder_write_string(sb,new string(`-${int_str(hours)}`));
					}
				}
				else if (token.str === new string("ZZ").str) {
					/** @type {int} */
					let hours = new int(new int( time__offset().valueOf() / time__seconds_per_hour.valueOf()));
					if ((new bool(hours.valueOf() >= new int(0).valueOf())).valueOf()) {
						strings__Builder_write_string(sb,new string(`+${int_str(hours)}00`));
					} else {
						/** @type {int} */
						hours = new int(-hours.val );
						strings__Builder_write_string(sb,new string(`-${int_str(hours)}00`));
					}
				}
				else if (token.str === new string("ZZZ").str) {
					/** @type {int} */
					let hours = new int(new int( time__offset().valueOf() / time__seconds_per_hour.valueOf()));
					if ((new bool(hours.valueOf() >= new int(0).valueOf())).valueOf()) {
						strings__Builder_write_string(sb,new string(`+${int_str(hours)}:00`));
					} else {
						/** @type {int} */
						hours = new int(-hours.val );
						strings__Builder_write_string(sb,new string(`-${int_str(hours)}:00`));
					}
				}
				else if (token.str === new string("a").str) {
					if ((new bool(t.hour.valueOf() > new int(12).valueOf())).valueOf()) {
						strings__Builder_write_string(sb,new string("pm"));
					} else {
						strings__Builder_write_string(sb,new string("am"));
					}
				}
				else if (token.str === new string("A").str) {
					if ((new bool(t.hour.valueOf() > new int(12).valueOf())).valueOf()) {
						strings__Builder_write_string(sb,new string("PM"));
					} else {
						strings__Builder_write_string(sb,new string("AM"));
					}
				}
				else {
					strings__Builder_write_string(sb,token);
				};
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return strings__Builder_str(new $ref(sb));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_clean(t) {
	try {
		/** @type {time__Time} */
		const znow = time__now();
		if ((new bool( new bool( new bool(t.month.valueOf() == znow.month.valueOf()).valueOf() && new bool(t.year.valueOf() == znow.year.valueOf()).valueOf()).valueOf() && new bool(t.day.valueOf() == znow.day.valueOf()).valueOf())).valueOf()) {
			return time__Time_get_fmt_time_str(t,time__FormatTime.hhmm24);
		}
		if ((new bool(t.year.valueOf() == znow.year.valueOf())).valueOf()) {
			return time__Time_get_fmt_str(t,time__FormatDelimiter.space, time__FormatTime.hhmm24, time__FormatDate.mmmd);
		}
		return time__Time_format(t,);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_clean12(t) {
	try {
		/** @type {time__Time} */
		const znow = time__now();
		if ((new bool( new bool( new bool(t.month.valueOf() == znow.month.valueOf()).valueOf() && new bool(t.year.valueOf() == znow.year.valueOf()).valueOf()).valueOf() && new bool(t.day.valueOf() == znow.day.valueOf()).valueOf())).valueOf()) {
			return time__Time_get_fmt_time_str(t,time__FormatTime.hhmm12);
		}
		if ((new bool(t.year.valueOf() == znow.year.valueOf())).valueOf()) {
			return time__Time_get_fmt_str(t,time__FormatDelimiter.space, time__FormatTime.hhmm12, time__FormatDate.mmmd);
		}
		return time__Time_format(t,);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {time__FormatTime} fmt_time
 * @returns {string}
*/
function time__Time_get_fmt_time_str(t, fmt_time) {
	try {
		if ((new bool(fmt_time.valueOf() == time__FormatTime.no_time.valueOf())).valueOf()) {
			return new string("");
		}
		/** @type {string} */
		const tp = new string(((new bool(t.hour.valueOf() > new int(11).valueOf())).valueOf() ? new string("p.m.") : new string("a.m.")));
		/** @type {int} */
		const hour_ = new int(((new bool(t.hour.valueOf() > new int(12).valueOf())).valueOf() ? new int( t.hour.valueOf() - new int(12).valueOf()) : (new bool(t.hour.valueOf() == new int(0).valueOf())).valueOf() ? new int(12) : t.hour));
		let _tmp32 = undefined;
		switch (fmt_time) {
			case time__FormatTime.hhmm12: 
				{
					_tmp32 = new string(`${int_str(hour_)}:${int_str(t.minute)} ${tp}`);
					
				} break;
			case time__FormatTime.hhmm24: 
				{
					_tmp32 = new string(`${int_str(t.hour)}:${int_str(t.minute)}`);
					
				} break;
			case time__FormatTime.hhmmss12: 
				{
					_tmp32 = new string(`${int_str(hour_)}:${int_str(t.minute)}:${int_str(t.second)} ${tp}`);
					
				} break;
			case time__FormatTime.hhmmss24: 
				{
					_tmp32 = new string(`${int_str(t.hour)}:${int_str(t.minute)}:${int_str(t.second)}`);
					
				} break;
			case time__FormatTime.hhmmss24_milli: 
				{
					_tmp32 = new string(`${int_str(t.hour)}:${int_str(t.minute)}:${int_str(t.second)}.${int_str((new int( t.microsecond.valueOf() / new int(1000).valueOf())))}`);
					
				} break;
			case time__FormatTime.hhmmss24_micro: 
				{
					_tmp32 = new string(`${int_str(t.hour)}:${int_str(t.minute)}:${int_str(t.second)}.${int_str(t.microsecond)}`);
					
				} break;
			default:
				{
					_tmp32 = new string(`unknown enumeration ${time__FormatTime_str(fmt_time)}`);
					
				} break;
		}
		return _tmp32;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {time__FormatDelimiter} fmt_dlmtr
 * @param {time__FormatDate} fmt_date
 * @returns {string}
*/
function time__Time_get_fmt_date_str(t, fmt_dlmtr, fmt_date) {
	try {
		if ((new bool(fmt_date.valueOf() == time__FormatDate.no_date.valueOf())).valueOf()) {
			return new string("");
		}
		/** @type {string} */
		const month = new string(time__Time_smonth(t,));
		/** @type {string} */
		const year = new string(`${int_str((new int( t.year.valueOf() % new int(100).valueOf())))}`);
		let _tmp33 = undefined;
		switch (fmt_date) {
			case time__FormatDate.ddmmyy: 
				{
					_tmp33 = `${int_str(t.day)}|${int_str(t.month)}|${year}`;
					
				} break;
			case time__FormatDate.ddmmyyyy: 
				{
					_tmp33 = `${int_str(t.day)}|${int_str(t.month)}|${int_str(t.year)}`;
					
				} break;
			case time__FormatDate.mmddyy: 
				{
					_tmp33 = `${int_str(t.month)}|${int_str(t.day)}|${year}`;
					
				} break;
			case time__FormatDate.mmddyyyy: 
				{
					_tmp33 = `${int_str(t.month)}|${int_str(t.day)}|${int_str(t.year)}`;
					
				} break;
			case time__FormatDate.mmmd: 
				{
					_tmp33 = `${month}|${int_str(t.day)}`;
					
				} break;
			case time__FormatDate.mmmdd: 
				{
					_tmp33 = `${month}|${int_str(t.day)}`;
					
				} break;
			case time__FormatDate.mmmddyy: 
				{
					_tmp33 = `${month}|${int_str(t.day)}|${year}`;
					
				} break;
			case time__FormatDate.mmmddyyyy: 
				{
					_tmp33 = `${month}|${int_str(t.day)}|${int_str(t.year)}`;
					
				} break;
			case time__FormatDate.yyyymmdd: 
				{
					_tmp33 = `${int_str(t.year)}|${int_str(t.month)}|${int_str(t.day)}`;
					
				} break;
			case time__FormatDate.yymmdd: 
				{
					_tmp33 = `${year}|${int_str(t.month)}|${int_str(t.day)}`;
					
				} break;
			default:
				{
					_tmp33 = `unknown enumeration ${time__FormatDate_str(fmt_date)}`;
					
				} break;
		}
		/** @type {string} */
		let res = new string(_tmp33);
		/** @type {string} */
		const del = new string(((vEq(fmt_dlmtr,time__FormatDelimiter.dot))? (new string(".")) : (vEq(fmt_dlmtr,time__FormatDelimiter.hyphen))? (new string("-")) : (vEq(fmt_dlmtr,time__FormatDelimiter.slash))? (new string("/")) : (vEq(fmt_dlmtr,time__FormatDelimiter.space))? (new string(" ")) : (new string(""))));
		/** @type {string} */
		res = new string(string_replace(res,new string("|"), del));
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {time__FormatDelimiter} fmt_dlmtr
 * @param {time__FormatTime} fmt_time
 * @param {time__FormatDate} fmt_date
 * @returns {string}
*/
function time__Time_get_fmt_str(t, fmt_dlmtr, fmt_time, fmt_date) {
	try {
		if ((new bool(fmt_date.valueOf() == time__FormatDate.no_date.valueOf())).valueOf()) {
			if ((new bool(fmt_time.valueOf() == time__FormatTime.no_time.valueOf())).valueOf()) {
				return new string("");
			} else {
				return time__Time_get_fmt_time_str(t,fmt_time);
			}
		} else {
			if ((new bool(fmt_time.valueOf() != time__FormatTime.no_time.valueOf())).valueOf()) {
				/** @type {string} */
				const dstr = new string(time__Time_get_fmt_date_str(t,fmt_dlmtr, fmt_date));
				/** @type {string} */
				const tstr = new string(time__Time_get_fmt_time_str(t,fmt_time));
				return new string(`${dstr} ${tstr}`);
			} else {
				return time__Time_get_fmt_date_str(t,fmt_dlmtr, fmt_date);
			}
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_utc_string(t) {
	try {
		/** @type {string} */
		const day_str = new string(time__Time_weekday_str(t,));
		/** @type {string} */
		const month_str = new string(time__Time_smonth(t,));
		/** @type {string} */
		const utc_string = new string(`${day_str}, ${int_str(t.day)} ${month_str} ${int_str(t.year)} ${int_str(t.hour)}:${int_str(t.minute)}:${int_str(t.second)} UTC`);
		return utc_string;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} x
 * @returns {f64}
*/
function time__mceil(x) {
	try {
		if ((new bool(x.valueOf() > new int(0).valueOf())).valueOf()) {
			return new int( new int(1).valueOf() + new int(x).valueOf());
		}
		if ((new bool(x.valueOf() < new int(0).valueOf())).valueOf()) {
			return -new int(-x.val ).val ;
		}
		return new int(0);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace time */
/* [inline] */
/**
 * @function
 * @param {time__Time} t2
 * @returns {bool}
*/
function time__Time__eq(t1, t2) {
	try {
		return new bool( new bool(t1.unix.valueOf() == t2.unix.valueOf()).valueOf() && new bool(t1.microsecond.valueOf() == t2.microsecond.valueOf()).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {time__Time} t2
 * @returns {bool}
*/
function time__Time__lt(t1, t2) {
	try {
		return new bool( new bool(t1.unix.valueOf() < t2.unix.valueOf()).valueOf() || (new bool( new bool(t1.unix.valueOf() == t2.unix.valueOf()).valueOf() && new bool(t1.microsecond.valueOf() < t2.microsecond.valueOf()).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {time__Time} rhs
 * @returns {time__Duration}
*/
function time__Time__minus(lhs, rhs) {
	try {
		/** @type {i64} */
		const lhs_micro = new i64(new i64( BigInt(new i64( BigInt(lhs.unix.valueOf()) * BigInt(new int(1000000).valueOf())).valueOf()) + BigInt(lhs.microsecond.valueOf())));
		/** @type {i64} */
		const rhs_micro = new i64(new i64( BigInt(new i64( BigInt(rhs.unix.valueOf()) * BigInt(new int(1000000).valueOf())).valueOf()) + BigInt(rhs.microsecond.valueOf())));
		return new i64( BigInt((new i64( BigInt(lhs_micro.valueOf()) - BigInt(rhs_micro.valueOf()))).valueOf()) * BigInt(time__microsecond.valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace time */
/**
 * @function
 * @param {string} s
 * @returns {time__Time}
*/
function time__parse(s) {
	try {
		/** @type {time__Time} */
		let res = new time__Time({});
		let date = new Date(s.str)
		res.year.val = date.getFullYear()
		res.month.val = date.getMonth()
		res.day.val = date.getDay()
		res.hour.val = date.getHours()
		res.minute.val = date.getMinutes()
		res.second.val = date.getSeconds()
		res.microsecond.val = date.getMilliseconds() * 1000
		res.unix.val = (date.getTime() / 1000).toFixed(0)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} s
 * @returns {time__Time}
*/
function time__parse_iso8601(s) {
	try {
		const _tmp34 = new _option({});
		_tmp34.state = new u8(0);_tmp34.data = time__parse(s)
		return _tmp34;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace time */
/**
 * @constructor
 * @param {{code?: int}} init
*/
function time__TimeParseError({ code = new int(0) }) {
	this.code = code
};
time__TimeParseError.prototype = {
	...Error.prototype,
	toString() {
		return `time__TimeParseError { code: ${this["code"].toString()} }`
	},
	/** @type {int} */
	code: new int(0),
	$toJS() { return this; }
	};

/**
 * @function
 * @returns {string}
*/
function time__TimeParseError_msg(err) {
	try {
		return new string(`Invalid time format code: ${int_str(err.code)}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} code
 * @returns {IError}
*/
function time__error_invalid_time(code) {
	try {
		return (function() {
			let _tmp35 = new time__TimeParseError({});
			_tmp35.code = code;
			return _tmp35;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace time */
/* [params] */
/**
 * @constructor
 * @param {{auto_start?: bool}} init
*/
function time__StopWatchOptions({ auto_start = new bool(true) }) {
	this.auto_start = auto_start
};
time__StopWatchOptions.prototype = {
	toString() {
		return `time__StopWatchOptions { auto_start: ${this["auto_start"].toString()} }`
	},
	/** @type {bool} */
	auto_start: new bool(false),
	$toJS() { return this; }
	};

/**
 * @constructor
 * @param {{elapsed?: u64, start?: u64, end?: u64}} init
*/
function time__StopWatch({ elapsed = new u64(0), start = new u64(0), end = new u64(0) }) {
	this.elapsed = elapsed
	this.start = start
	this.end = end
};
time__StopWatch.prototype = {
	toString() {
		return `time__StopWatch { elapsed: ${this["elapsed"].toString()} , start: ${this["start"].toString()} , end: ${this["end"].toString()} }`
	},
	/** @type {u64} */
	elapsed: new u64(0),
	/** @type {u64} */
	start: new u64(0),
	/** @type {u64} */
	end: new u64(0),
	$toJS() { return this; }
	};

/**
 * @function
 * @param {time__StopWatchOptions} opts
 * @returns {time__StopWatch}
*/
function time__new_stopwatch(opts) {
	try {
		/** @type {u64} */
		let initial = new u64(new u64(BigInt(0n)));
		if ((opts.auto_start).valueOf()) {
			/** @type {u64} */
			initial = new u64(time__sys_mono_now());
		}
		return (function() {
			let _tmp36 = new time__StopWatch({});
			_tmp36.elapsed = new int(0);
			_tmp36.start = initial;
			_tmp36.end = new int(0);
			return _tmp36;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function time__StopWatch_start(t) {
t = new $ref(t)
	try {
		/** @type {u64} */
		t.val.start = new u64(time__sys_mono_now());
		/** @type {u64} */
		t.val.end = new u64(new int(0));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function time__StopWatch_restart(t) {
t = new $ref(t)
	try {
		/** @type {u64} */
		t.val.start = new u64(time__sys_mono_now());
		/** @type {u64} */
		t.val.end = new u64(new int(0));
		/** @type {u64} */
		t.val.elapsed = new u64(new int(0));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function time__StopWatch_stop(t) {
t = new $ref(t)
	try {
		/** @type {u64} */
		t.val.end = new u64(time__sys_mono_now());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function time__StopWatch_pause(t) {
t = new $ref(t)
	try {
		if ((new bool(t.val.start.valueOf() > new int(0).valueOf())).valueOf()) {
			if ((new bool(t.val.end.valueOf() == new int(0).valueOf())).valueOf()) {
				/** @type {u64} */
				t.val.elapsed.val = t.val.elapsed + new u64(new u64( BigInt(time__sys_mono_now().valueOf()) - BigInt(t.val.start.valueOf())));
			} else {
				/** @type {u64} */
				t.val.elapsed.val = t.val.elapsed + new u64(new u64( BigInt(t.val.end.valueOf()) - BigInt(t.val.start.valueOf())));
			}
		}
		/** @type {u64} */
		t.val.start = new u64(new int(0));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {time__Duration}
*/
function time__StopWatch_elapsed(t) {
	try {
		if ((new bool(t.start.valueOf() > new int(0).valueOf())).valueOf()) {
			if ((new bool(t.end.valueOf() == new int(0).valueOf())).valueOf()) {
				return new time__Duration(new i64(new u64( BigInt(new u64( BigInt(time__sys_mono_now().valueOf()) - BigInt(t.start.valueOf())).valueOf()) + BigInt(t.elapsed.valueOf()))));
			} else {
				return new time__Duration(new i64(new u64( BigInt(new u64( BigInt(t.end.valueOf()) - BigInt(t.start.valueOf())).valueOf()) + BigInt(t.elapsed.valueOf()))));
			}
		}
		return new time__Duration(new i64(t.elapsed));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace time */
/**
 * @function
 * @returns {time__Time}
*/
function time__now() {
	try {
		/** @type {time__Time} */
		let res = new time__Time({});
		let date = new Date()
		res.year.val = date.getFullYear()
		res.month.val = date.getMonth()
		res.day.val = date.getDay()
		res.hour.val = date.getHours()
		res.minute.val = date.getMinutes()
		res.second.val = date.getSeconds()
		res.microsecond.val = date.getMilliseconds() * 1000
		res.unix.val = (date.getTime() / 1000).toFixed(0)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {time__Time}
*/
function time__utc() {
	try {
		/** @type {time__Time} */
		let res = new time__Time({});
		let date = new Date()
		res.year.val = date.getUTCFullYear()
		res.month.val = date.getUTCMonth()
		res.day.val = date.getUTCDay()
		res.hour.val = date.getUTCHours()
		res.minute.val = date.getUTCMinutes()
		res.second.val = date.getUTCSeconds()
		res.microsecond.val = date.getUTCMilliseconds() * 1000
		res.unix.val = (date.getTime() / 1000).toFixed(0)
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {time__Time}
*/
function time__Time_local(t) {
	try {
		return t;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {time__Duration} dur
 * @returns {void}
*/
function time__sleep(dur) {
	try {
		let now = new Date().getTime()
		let toWait = BigInt(dur.val) / BigInt(time__millisecond)
		while (new Date().getTime() < now + Number(toWait)) {}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {i64}
*/
function time__ticks() {
	try {
		/** @type {i64} */
		const t = new i64(new i64(BigInt(0n)));
		t.val = BigInt(new Date().getTime())
		return t;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace time */
/** @constant {string} */
const time__days_string = new string("MonTueWedThuFriSatSun");
/** @constant {Array_string} */
let time__long_days = undefined;
/** @constant {Array_int} */
let time__month_days = undefined;
/** @constant {string} */
const time__months_string = new string("JanFebMarAprMayJunJulAugSepOctNovDec");
/** @constant {Array_string} */
let time__long_months = undefined;
/** @constant {i64} */
let time__absolute_zero_year = undefined;
/** @constant {int} */
const time__seconds_per_minute = new int(60);
/** @constant {int} */
let time__seconds_per_hour = undefined;
/** @constant {int} */
let time__seconds_per_day = undefined;
/** @constant {int} */
let time__seconds_per_week = undefined;
/** @constant {int} */
let time__days_per_400_years = undefined;
/** @constant {int} */
let time__days_per_100_years = undefined;
/** @constant {int} */
let time__days_per_4_years = undefined;
/** @constant {int} */
const time__days_in_year = new int(365);
/** @constant {Array_int} */
let time__days_before = undefined;

/**
 * @constructor
 * @param {{year?: int, month?: int, day?: int, hour?: int, minute?: int, second?: int, microsecond?: int, unix?: i64, is_local?: bool}} init
*/
function time__Time({ year = new int(0), month = new int(0), day = new int(0), hour = new int(0), minute = new int(0), second = new int(0), microsecond = new int(0), unix = new i64(0), is_local = new bool(false) }) {
	this.year = year
	this.month = month
	this.day = day
	this.hour = hour
	this.minute = minute
	this.second = second
	this.microsecond = microsecond
	this.unix = unix
	this.is_local = is_local
};
time__Time.prototype = {
	toString() {
		return `time__Time { year: ${this["year"].toString()} , month: ${this["month"].toString()} , day: ${this["day"].toString()} , hour: ${this["hour"].toString()} , minute: ${this["minute"].toString()} , second: ${this["second"].toString()} , microsecond: ${this["microsecond"].toString()} , unix: ${this["unix"].toString()} , is_local: ${this["is_local"].toString()} }`
	},
	/** @type {int} */
	year: new int(0),
	/** @type {int} */
	month: new int(0),
	/** @type {int} */
	day: new int(0),
	/** @type {int} */
	hour: new int(0),
	/** @type {int} */
	minute: new int(0),
	/** @type {int} */
	second: new int(0),
	/** @type {int} */
	microsecond: new int(0),
	/** @type {i64} */
	unix: new i64(0),
	/** @type {bool} */
	is_local: new bool(false),
	$toJS() { return this; }
	};

/** @enum {number} */
const time__FormatTime = {
	hhmm12: 0,
	hhmm24: 1,
	hhmmss12: 2,
	hhmmss24: 3,
	hhmmss24_milli: 4,
	hhmmss24_micro: 5,
	no_time: 6,
};

/** @enum {number} */
const time__FormatDate = {
	ddmmyy: 0,
	ddmmyyyy: 1,
	mmddyy: 2,
	mmddyyyy: 3,
	mmmd: 4,
	mmmdd: 5,
	mmmddyy: 6,
	mmmddyyyy: 7,
	no_date: 8,
	yyyymmdd: 9,
	yymmdd: 10,
};

/** @enum {number} */
const time__FormatDelimiter = {
	dot: 0,
	hyphen: 1,
	slash: 2,
	space: 3,
	no_delimiter: 4,
};

/**
 * @function
 * @returns {string}
*/
function time__Time_smonth(t) {
t = new $ref(t)
	try {
		if ((new bool( new bool(t.val.month.valueOf() <= new int(0).valueOf()).valueOf() || new bool(t.val.month.valueOf() > new int(12).valueOf()).valueOf())).valueOf()) {
			return new string("---");
		}
		/** @type {int} */
		const i = new int(new int( t.val.month.valueOf() - new int(1).valueOf()));
		return string_slice(time__months_string,new int( i.valueOf() * new int(3).valueOf()), new int( (new int( i.valueOf() + new int(1).valueOf())).valueOf() * new int(3).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {i64}
*/
function time__Time_unix_time(t) {
t = new $ref(t)
	try {
		return t.val.unix;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {i64}
*/
function time__Time_unix_time_milli(t) {
t = new $ref(t)
	try {
		return new i64( BigInt(new i64( BigInt(t.val.unix.valueOf()) * BigInt(new int(1000).valueOf())).valueOf()) + BigInt((new int( t.val.microsecond.valueOf() / new int(1000).valueOf())).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {time__Duration} d
 * @returns {time__Time}
*/
function time__Time_add(t, d) {
t = new $ref(t)
	try {
		/** @type {i64} */
		const microseconds = new i64(new i64( BigInt(new i64( BigInt(new i64( BigInt(new i64(t.val.unix).valueOf()) * BigInt(new int(1000000).valueOf())).valueOf()) + BigInt(t.val.microsecond.valueOf())).valueOf()) + BigInt(time__Duration_microseconds(d,).valueOf())));
		/** @type {i64} */
		const unix = new i64(new i64( BigInt(microseconds.valueOf()) / BigInt(new int(1000000).valueOf())));
		/** @type {i64} */
		const micro = new i64(new i64( BigInt(microseconds.valueOf()) % BigInt(new int(1000000).valueOf())));
		return time__unix2(unix, new int(micro));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} seconds
 * @returns {time__Time}
*/
function time__Time_add_seconds(t, seconds) {
t = new $ref(t)
	try {
		return time__Time_add(t.valueOf(),new int( BigInt(seconds.valueOf()) * BigInt(time__second.valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} days
 * @returns {time__Time}
*/
function time__Time_add_days(t, days) {
t = new $ref(t)
	try {
		return time__Time_add(t.valueOf(),new int( BigInt(new int( days.valueOf() * new int(24).valueOf()).valueOf()) * BigInt(time__hour.valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {time__Time} t
 * @returns {time__Duration}
*/
function time__since(t) {
	try {
		return time__Time__minus(time__now(), t);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_relative(t) {
t = new $ref(t)
	try {
		/** @type {time__Time} */
		const znow = time__now();
		/** @type {i64} */
		let secs = new i64(new i64( BigInt(znow.unix.valueOf()) - BigInt(t.val.unix.valueOf())));
		/** @type {string} */
		let prefix = new string(new string(""));
		/** @type {string} */
		let suffix = new string(new string(""));
		if ((new bool(secs.valueOf() < new int(0).valueOf())).valueOf()) {
			/** @type {i64} */
			secs.val = secs * new i64(new int(-1));
			/** @type {string} */
			prefix = new string(new string("in "));
		} else {
			/** @type {string} */
			suffix = new string(new string(" ago"));
		}
		if ((new bool(secs.valueOf() < new int_literal( time__seconds_per_minute.valueOf() / new int(2).valueOf()).valueOf())).valueOf()) {
			return new string("now");
		}
		if ((new bool(secs.valueOf() < time__seconds_per_hour.valueOf())).valueOf()) {
			/** @type {i64} */
			const m = new i64(new i64( BigInt(secs.valueOf()) / BigInt(time__seconds_per_minute.valueOf())));
			if ((new bool(m.valueOf() == new int(1).valueOf())).valueOf()) {
				return new string(`${prefix}1 minute${suffix}`);
			}
			return new string(`${prefix}${i64_str(m)} minutes${suffix}`);
		}
		if ((new bool(secs.valueOf() < new int_literal( time__seconds_per_hour.valueOf() * new int(24).valueOf()).valueOf())).valueOf()) {
			/** @type {i64} */
			const h = new i64(new i64( BigInt(secs.valueOf()) / BigInt(time__seconds_per_hour.valueOf())));
			if ((new bool(h.valueOf() == new int(1).valueOf())).valueOf()) {
				return new string(`${prefix}1 hour${suffix}`);
			}
			return new string(`${prefix}${i64_str(h)} hours${suffix}`);
		}
		if ((new bool(secs.valueOf() < new int_literal( new int_literal( time__seconds_per_hour.valueOf() * new int(24).valueOf()).valueOf() * new int(7).valueOf()).valueOf())).valueOf()) {
			/** @type {i64} */
			const d = new i64(new i64( BigInt(new i64( BigInt(secs.valueOf()) / BigInt(time__seconds_per_hour.valueOf())).valueOf()) / BigInt(new int(24).valueOf())));
			if ((new bool(d.valueOf() == new int(1).valueOf())).valueOf()) {
				return new string(`${prefix}1 day${suffix}`);
			}
			return new string(`${prefix}${i64_str(d)} days${suffix}`);
		}
		if ((new bool(secs.valueOf() < new int_literal( new int_literal( time__seconds_per_hour.valueOf() * new int(24).valueOf()).valueOf() * time__days_in_year.valueOf()).valueOf())).valueOf()) {
			if ((new bool(prefix.valueOf() == new string("in ").valueOf())).valueOf()) {
				return new string(`on ${time__Time_md(t.valueOf(),)}`);
			}
			return new string(`last ${time__Time_md(t.valueOf(),)}`);
		}
		/** @type {i64} */
		const y = new i64(new i64( BigInt(new i64( BigInt(new i64( BigInt(secs.valueOf()) / BigInt(time__seconds_per_hour.valueOf())).valueOf()) / BigInt(new int(24).valueOf())).valueOf()) / BigInt(time__days_in_year.valueOf())));
		if ((new bool(y.valueOf() == new int(1).valueOf())).valueOf()) {
			return new string(`${prefix}1 year${suffix}`);
		}
		return new string(`${prefix}${i64_str(y)} years${suffix}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_relative_short(t) {
t = new $ref(t)
	try {
		/** @type {time__Time} */
		const znow = time__now();
		/** @type {i64} */
		let secs = new i64(new i64( BigInt(znow.unix.valueOf()) - BigInt(t.val.unix.valueOf())));
		/** @type {string} */
		let prefix = new string(new string(""));
		/** @type {string} */
		let suffix = new string(new string(""));
		if ((new bool(secs.valueOf() < new int(0).valueOf())).valueOf()) {
			/** @type {i64} */
			secs.val = secs * new i64(new int(-1));
			/** @type {string} */
			prefix = new string(new string("in "));
		} else {
			/** @type {string} */
			suffix = new string(new string(" ago"));
		}
		if ((new bool(secs.valueOf() < new int_literal( time__seconds_per_minute.valueOf() / new int(2).valueOf()).valueOf())).valueOf()) {
			return new string("now");
		}
		if ((new bool(secs.valueOf() < time__seconds_per_hour.valueOf())).valueOf()) {
			/** @type {i64} */
			const m = new i64(new i64( BigInt(secs.valueOf()) / BigInt(time__seconds_per_minute.valueOf())));
			if ((new bool(m.valueOf() == new int(1).valueOf())).valueOf()) {
				return new string(`${prefix}1m${suffix}`);
			}
			return new string(`${prefix}${i64_str(m)}m${suffix}`);
		}
		if ((new bool(secs.valueOf() < new int_literal( time__seconds_per_hour.valueOf() * new int(24).valueOf()).valueOf())).valueOf()) {
			/** @type {i64} */
			const h = new i64(new i64( BigInt(secs.valueOf()) / BigInt(time__seconds_per_hour.valueOf())));
			if ((new bool(h.valueOf() == new int(1).valueOf())).valueOf()) {
				return new string(`${prefix}1h${suffix}`);
			}
			return new string(`${prefix}${i64_str(h)}h${suffix}`);
		}
		if ((new bool(secs.valueOf() < new int_literal( new int_literal( time__seconds_per_hour.valueOf() * new int(24).valueOf()).valueOf() * time__days_in_year.valueOf()).valueOf())).valueOf()) {
			/** @type {i64} */
			const d = new i64(new i64( BigInt(new i64( BigInt(secs.valueOf()) / BigInt(time__seconds_per_hour.valueOf())).valueOf()) / BigInt(new int(24).valueOf())));
			if ((new bool(d.valueOf() == new int(1).valueOf())).valueOf()) {
				return new string(`${prefix}1d${suffix}`);
			}
			return new string(`${prefix}${i64_str(d)}d${suffix}`);
		}
		/** @type {i64} */
		const y = new i64(new i64( BigInt(new i64( BigInt(new i64( BigInt(secs.valueOf()) / BigInt(time__seconds_per_hour.valueOf())).valueOf()) / BigInt(new int(24).valueOf())).valueOf()) / BigInt(time__days_in_year.valueOf())));
		if ((new bool(y.valueOf() == new int(1).valueOf())).valueOf()) {
			return new string(`${prefix}1y${suffix}`);
		}
		return new string(`${prefix}${i64_str(y)}y${suffix}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} y
 * @param {int} m
 * @param {int} d
 * @returns {int}
*/
function time__day_of_week(y, m, d) {
	try {
		/** @type {Array_int} */
		const t = new array(new array_buffer({arr: [new int(new int(0)), new int(new int(3)), new int(new int(2)), new int(new int(5)), new int(new int(0)), new int(new int(3)), new int(new int(5)), new int(new int(1)), new int(new int(4)), new int(new int(6)), new int(new int(2)), new int(new int(4))], len: new int(12), cap: new int(12)}));
		/** @type {int} */
		let sy = new int(y);
		if ((new bool(m.valueOf() < new int(3).valueOf())).valueOf()) {
			/** @type {int} */
			sy = new int(new int( sy.valueOf() - new int(1).valueOf()));
		}
		return new int( new int( (new int( new int( new int( new int( new int( new int( sy.valueOf() + new int( sy.valueOf() / new int(4).valueOf()).valueOf()).valueOf() - new int( sy.valueOf() / new int(100).valueOf()).valueOf()).valueOf() + new int( sy.valueOf() / new int(400).valueOf()).valueOf()).valueOf() + t.arr.get(new int(new int( m.valueOf() - new int(1).valueOf()).valueOf())).valueOf()).valueOf() + d.valueOf()).valueOf() - new int(1).valueOf())).valueOf() % new int(7).valueOf()).valueOf() + new int(1).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {int}
*/
function time__Time_day_of_week(t) {
t = new $ref(t)
	try {
		return time__day_of_week(t.val.year, t.val.month, t.val.day);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_weekday_str(t) {
t = new $ref(t)
	try {
		/** @type {int} */
		const i = new int(new int( time__Time_day_of_week(t.valueOf(),).valueOf() - new int(1).valueOf()));
		return string_slice(time__long_days.arr.get(new int(i.valueOf())),new int(0), new int(3));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_long_weekday_str(t) {
t = new $ref(t)
	try {
		/** @type {int} */
		const i = new int(new int( time__Time_day_of_week(t.valueOf(),).valueOf() - new int(1).valueOf()));
		return time__long_days.arr.get(new int(i.valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} year
 * @returns {bool}
*/
function time__is_leap_year(year) {
	try {
		return new bool( (new bool(new int( year.valueOf() % new int(4).valueOf()).valueOf() == new int(0).valueOf())).valueOf() && (new bool( new bool(new int( year.valueOf() % new int(100).valueOf()).valueOf() != new int(0).valueOf()).valueOf() || new bool(new int( year.valueOf() % new int(400).valueOf()).valueOf() == new int(0).valueOf()).valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} month
 * @param {int} year
 * @returns {int}
*/
function time__days_in_month(month, year) {
	try {
		if ((new bool( new bool(month.valueOf() > new int(12).valueOf()).valueOf() || new bool(month.valueOf() < new int(1).valueOf()).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string(`Invalid month: ${int_str(month)}`))});
		}
		/** @type {int} */
		const extra = new int(((new bool( new bool(month.valueOf() == new int(2).valueOf()).valueOf() && time__is_leap_year(year).valueOf())).valueOf() ? new int(1) : new int(0)));
		/** @type {int} */
		const res = new int(new int( time__month_days.arr.get(new int(new int( month.valueOf() - new int(1).valueOf()).valueOf())).valueOf() + extra.valueOf()));
		const _tmp37 = new _option({});
		_tmp37.state = new u8(0);_tmp37.data = res
		return _tmp37;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Time_debug(t) {
t = new $ref(t)
	try {
		return new string(`Time{ year: ${int_str(t.val.year)} month: ${int_str(t.val.month)} day: ${int_str(t.val.day)} hour: ${int_str(t.val.hour)} minute: ${int_str(t.val.minute)} second: ${int_str(t.val.second)} microsecond: ${int_str(t.val.microsecond)} unix: ${i64_str(t.val.unix)} }`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

function time__Duration(val) { return val;  }
/** @constant {time__Duration} */
let time__nanosecond = undefined;
/** @constant {time__Duration} */
let time__microsecond = undefined;
/** @constant {time__Duration} */
let time__millisecond = undefined;
/** @constant {time__Duration} */
let time__second = undefined;
/** @constant {time__Duration} */
let time__minute = undefined;
/** @constant {time__Duration} */
let time__hour = undefined;
/** @constant {time__Duration} */
let time__infinite = undefined;

/**
 * @function
 * @returns {i64}
*/
function time__Duration_nanoseconds(d) {
	try {
		return new i64(d);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {i64}
*/
function time__Duration_microseconds(d) {
	try {
		return new i64( BigInt(new i64(d).valueOf()) / BigInt(time__microsecond.valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {i64}
*/
function time__Duration_milliseconds(d) {
	try {
		return new i64( BigInt(new i64(d).valueOf()) / BigInt(time__millisecond.valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {f64}
*/
function time__Duration_seconds(d) {
	try {
		/** @type {i64} */
		const sec = new i64(new i64( BigInt(d.valueOf()) / BigInt(time__second.valueOf())));
		/** @type {i64} */
		const nsec = new i64(new i64( BigInt(d.valueOf()) % BigInt(time__second.valueOf())));
		return new f64( new f64(sec).valueOf() + new f64( BigInt(new f64(nsec).valueOf()) / BigInt(time__second.valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {f64}
*/
function time__Duration_minutes(d) {
	try {
		/** @type {i64} */
		const min = new i64(new i64( BigInt(d.valueOf()) / BigInt(time__minute.valueOf())));
		/** @type {i64} */
		const nsec = new i64(new i64( BigInt(d.valueOf()) % BigInt(time__minute.valueOf())));
		return new f64( new f64(min).valueOf() + new f64( BigInt(new f64(nsec).valueOf()) / BigInt(time__minute.valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {f64}
*/
function time__Duration_hours(d) {
	try {
		/** @type {i64} */
		const hr = new i64(new i64( BigInt(d.valueOf()) / BigInt(time__hour.valueOf())));
		/** @type {i64} */
		const nsec = new i64(new i64( BigInt(d.valueOf()) % BigInt(time__hour.valueOf())));
		return new f64( new f64(hr).valueOf() + new f64( BigInt(new f64(nsec).valueOf()) / BigInt(time__hour.valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function time__Duration_str(d) {
	try {
		if ((new bool(time__Duration_alias_eq(d, time__infinite))).valueOf()) {
			return new string("inf");
		}
		/** @type {i64} */
		let t = new i64(new i64(d));
		/** @type {i64} */
		const hr = new i64(new i64( BigInt(t.valueOf()) / BigInt(time__hour.valueOf())));
		/** @type {i64} */
		t.val = t - new i64(new i64( BigInt(hr.valueOf()) * BigInt(time__hour.valueOf())));
		/** @type {i64} */
		const min = new i64(new i64( BigInt(t.valueOf()) / BigInt(time__minute.valueOf())));
		/** @type {i64} */
		t.val = t - new i64(new i64( BigInt(min.valueOf()) * BigInt(time__minute.valueOf())));
		/** @type {i64} */
		const sec = new i64(new i64( BigInt(t.valueOf()) / BigInt(time__second.valueOf())));
		/** @type {i64} */
		t.val = t - new i64(new i64( BigInt(sec.valueOf()) * BigInt(time__second.valueOf())));
		/** @type {i64} */
		const ms = new i64(new i64( BigInt(t.valueOf()) / BigInt(time__millisecond.valueOf())));
		/** @type {i64} */
		t.val = t - new i64(new i64( BigInt(ms.valueOf()) * BigInt(time__millisecond.valueOf())));
		/** @type {i64} */
		const us = new i64(new i64( BigInt(t.valueOf()) / BigInt(time__microsecond.valueOf())));
		/** @type {i64} */
		t.val = t - new i64(new i64( BigInt(us.valueOf()) * BigInt(time__microsecond.valueOf())));
		/** @type {i64} */
		const ns = new i64(t);
		if ((new bool(hr.valueOf() > new int(0).valueOf())).valueOf()) {
			return new string(`${i64_str(hr)}:${i64_str(min)}:${i64_str(sec)}`);
		}
		if ((new bool(min.valueOf() > new int(0).valueOf())).valueOf()) {
			return new string(`${i64_str(min)}:${i64_str(sec)}.${i64_str(ms)}`);
		}
		if ((new bool(sec.valueOf() > new int(0).valueOf())).valueOf()) {
			return new string(`${i64_str(sec)}.${i64_str(ms)}s`);
		}
		if ((new bool(ms.valueOf() > new int(0).valueOf())).valueOf()) {
			return new string(`${i64_str(ms)}.${i64_str(us)}ms`);
		}
		if ((new bool(us.valueOf() > new int(0).valueOf())).valueOf()) {
			return new string(`${i64_str(us)}.${i64_str(ns)}us`);
		}
		return new string(`${i64_str(ns)}ns`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {int}
*/
function time__offset() {
	try {
		/** @type {time__Time} */
		const t = time__utc();
		/** @type {time__Time} */
		const local = time__Time_local(t,);
		return new int(new i64( BigInt(local.unix.valueOf()) - BigInt(t.unix.valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace time */
var $timeOff = 0;
var $seen = 0
function $sys_mono_new_Date() {
var t = Date.now()
if (t < $seen)
$timeOff += ($seen - t)

$seen = t
return t + $timeOff
}
/**
 * @function
 * @returns {u64}
*/
function time__sys_mono_now() {
	try {
		if (true)
		{
		/** @type {u64} */
		let res = new u64(new u64(BigInt(0n)));
		res = new u64(Math.floor(window.performance.now() * 1000000))
		return res;
		}
		else if (false)
		{
		/** @type {u64} */
		let res = new u64(new u64(BigInt(0n)));
		res.val = $process.hrtime.bigint()
		return res;
		}
		else
		{
		/** @type {u64} */
		let res = new u64(new u64(BigInt(0n)));
		res = new u64($sys_mono_new_Date() * 1000000)
		return res;
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace time */
/**
 * @function
 * @param {i64} abs
 * @returns {time__Time}
*/
function time__unix(abs) {
	try {
		/** @type {i64} */
		let day_offset = new i64(new i64( BigInt(abs.valueOf()) / BigInt(time__seconds_per_day.valueOf())));
		if ((new bool(new i64( BigInt(abs.valueOf()) % BigInt(time__seconds_per_day.valueOf())).valueOf() < new int(0).valueOf())).valueOf()) {
			day_offset.val --;
		}
		let [year, month, day] = time__calculate_date_from_offset(day_offset);
		let [hr, min, sec] = time__calculate_time_from_offset(new i64( BigInt(abs.valueOf()) % BigInt(time__seconds_per_day.valueOf())));
		return (function() {
			let _tmp38 = new time__Time({});
			_tmp38.year = year;
			_tmp38.month = month;
			_tmp38.day = day;
			_tmp38.hour = hr;
			_tmp38.minute = min;
			_tmp38.second = sec;
			_tmp38.unix = abs;
			return _tmp38;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {i64} abs
 * @param {int} microsecond
 * @returns {time__Time}
*/
function time__unix2(abs, microsecond) {
	try {
		/** @type {i64} */
		let day_offset = new i64(new i64( BigInt(abs.valueOf()) / BigInt(time__seconds_per_day.valueOf())));
		if ((new bool(new i64( BigInt(abs.valueOf()) % BigInt(time__seconds_per_day.valueOf())).valueOf() < new int(0).valueOf())).valueOf()) {
			day_offset.val --;
		}
		let [year, month, day] = time__calculate_date_from_offset(day_offset);
		let [hr, min, sec] = time__calculate_time_from_offset(new i64( BigInt(abs.valueOf()) % BigInt(time__seconds_per_day.valueOf())));
		return (function() {
			let _tmp39 = new time__Time({});
			_tmp39.year = year;
			_tmp39.month = month;
			_tmp39.day = day;
			_tmp39.hour = hr;
			_tmp39.minute = min;
			_tmp39.second = sec;
			_tmp39.microsecond = microsecond;
			_tmp39.unix = abs;
			return _tmp39;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {i64} day_offset_
 * @returns {multi_return_int_int_int}
*/
function time__calculate_date_from_offset(day_offset_) {
	try {
		/** @type {i64} */
		let day_offset = new i64(day_offset_);
		/** @type {i64} */
		day_offset.val = day_offset + new i64(new int(719468));
		/** @type {int} */
		let era = new int(new int(0));
		if ((new bool(day_offset.valueOf() >= new int(0).valueOf())).valueOf()) {
			/** @type {int} */
			era = new int(new int(new i64( BigInt(day_offset.valueOf()) / BigInt(time__days_per_400_years.valueOf()))));
		} else {
			/** @type {int} */
			era = new int(new int(new i64( BigInt((new i64( BigInt(new i64( BigInt(day_offset.valueOf()) - BigInt(time__days_per_400_years.valueOf())).valueOf()) - BigInt(new int(1).valueOf()))).valueOf()) / BigInt(time__days_per_400_years.valueOf()))));
		}
		/** @type {i64} */
		const doe = new i64(new i64( BigInt(day_offset.valueOf()) - BigInt(new int( era.valueOf() * time__days_per_400_years.valueOf()).valueOf())));
		/** @type {i64} */
		const yoe = new i64(new i64( BigInt((new i64( BigInt(new i64( BigInt(new i64( BigInt(doe.valueOf()) - BigInt(new i64( BigInt(doe.valueOf()) / BigInt((new int_literal( time__days_per_4_years.valueOf() - new int(1).valueOf())).valueOf())).valueOf())).valueOf()) + BigInt(new i64( BigInt(doe.valueOf()) / BigInt(time__days_per_100_years.valueOf())).valueOf())).valueOf()) - BigInt(new i64( BigInt(doe.valueOf()) / BigInt((new int_literal( time__days_per_400_years.valueOf() - new int(1).valueOf())).valueOf())).valueOf()))).valueOf()) / BigInt(time__days_in_year.valueOf())));
		/** @type {int} */
		let y = new int(new int(new i64( BigInt(yoe.valueOf()) + BigInt(new int( era.valueOf() * new int(400).valueOf()).valueOf()))));
		/** @type {i64} */
		const doy = new i64(new i64( BigInt(doe.valueOf()) - BigInt((new i64( BigInt(new i64( BigInt(new i64( BigInt(time__days_in_year.valueOf()) * BigInt(yoe.valueOf())).valueOf()) + BigInt(new i64( BigInt(yoe.valueOf()) / BigInt(new int(4).valueOf())).valueOf())).valueOf()) - BigInt(new i64( BigInt(yoe.valueOf()) / BigInt(new int(100).valueOf())).valueOf()))).valueOf())));
		/** @type {i64} */
		const mp = new i64(new i64( BigInt((new i64( BigInt(new i64( BigInt(new int(5).valueOf()) * BigInt(doy.valueOf())).valueOf()) + BigInt(new int(2).valueOf()))).valueOf()) / BigInt(new int(153).valueOf())));
		/** @type {int} */
		const d = new int(new int(new i64( BigInt(new i64( BigInt(doy.valueOf()) - BigInt(new i64( BigInt((new i64( BigInt(new i64( BigInt(new int(153).valueOf()) * BigInt(mp.valueOf())).valueOf()) + BigInt(new int(2).valueOf()))).valueOf()) / BigInt(new int(5).valueOf())).valueOf())).valueOf()) + BigInt(new int(1).valueOf()))));
		/** @type {int} */
		let m = new int(new int(mp));
		if ((new bool(mp.valueOf() < new int(10).valueOf())).valueOf()) {
			/** @type {int} */
			m.val = Math.floor(m + new int(new int(3)));
		} else {
			/** @type {int} */
			m.val = Math.floor(m - new int(new int(9)));
		}
		if ((new bool(m.valueOf() <= new int(2).valueOf())).valueOf()) {
			/** @type {int} */
			y.val = Math.floor(y + new int(new int(1)));
		}
		return [y, m, d];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {i64} second_offset_
 * @returns {multi_return_int_int_int}
*/
function time__calculate_time_from_offset(second_offset_) {
	try {
		/** @type {i64} */
		let second_offset = new i64(second_offset_);
		if ((new bool(second_offset.valueOf() < new int(0).valueOf())).valueOf()) {
			/** @type {i64} */
			second_offset.val = second_offset + new i64(time__seconds_per_day);
		}
		/** @type {i64} */
		const hour_ = new i64(new i64( BigInt(second_offset.valueOf()) / BigInt(time__seconds_per_hour.valueOf())));
		/** @type {i64} */
		second_offset.val = second_offset % new i64(time__seconds_per_hour);
		/** @type {i64} */
		const min = new i64(new i64( BigInt(second_offset.valueOf()) / BigInt(time__seconds_per_minute.valueOf())));
		/** @type {i64} */
		second_offset.val = second_offset % new i64(time__seconds_per_minute);
		return [new int(hour_), new int(min), new int(second_offset)];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace gx */
/** @constant {gx__Color} */
let gx__black = undefined;
/** @constant {gx__Color} */
let gx__gray = undefined;
/** @constant {gx__Color} */
let gx__white = undefined;
/** @constant {gx__Color} */
let gx__red = undefined;
/** @constant {gx__Color} */
let gx__green = undefined;
/** @constant {gx__Color} */
let gx__blue = undefined;
/** @constant {gx__Color} */
let gx__yellow = undefined;
/** @constant {gx__Color} */
let gx__magenta = undefined;
/** @constant {gx__Color} */
let gx__cyan = undefined;
/** @constant {gx__Color} */
let gx__orange = undefined;
/** @constant {gx__Color} */
let gx__purple = undefined;
/** @constant {gx__Color} */
let gx__indigo = undefined;
/** @constant {gx__Color} */
let gx__pink = undefined;
/** @constant {gx__Color} */
let gx__violet = undefined;
/** @constant {gx__Color} */
let gx__dark_blue = undefined;
/** @constant {gx__Color} */
let gx__dark_gray = undefined;
/** @constant {gx__Color} */
let gx__dark_green = undefined;
/** @constant {gx__Color} */
let gx__dark_red = undefined;
/** @constant {gx__Color} */
let gx__light_blue = undefined;
/** @constant {gx__Color} */
let gx__light_gray = undefined;
/** @constant {gx__Color} */
let gx__light_green = undefined;
/** @constant {gx__Color} */
let gx__light_red = undefined;

/**
 * @constructor
 * @param {{r?: u8, g?: u8, b?: u8, a?: u8}} init
*/
function gx__Color({ r = new u8(0), g = new u8(0), b = new u8(0), a = new int(255) }) {
	this.r = r
	this.g = g
	this.b = b
	this.a = a
};
gx__Color.prototype = {
	toString() {
		return `gx__Color { r: ${this["r"].toString()} , g: ${this["g"].toString()} , b: ${this["b"].toString()} , a: ${this["a"].toString()} }`
	},
	/** @type {u8} */
	r: new u8(0),
	/** @type {u8} */
	g: new u8(0),
	/** @type {u8} */
	b: new u8(0),
	/** @type {u8} */
	a: new u8(0),
	$toJS() { return this; }
	};

/**
 * @function
 * @param {int} color
 * @returns {gx__Color}
*/
function gx__hex(color) {
	try {
		return (function() {
			let _tmp40 = new gx__Color({});
			_tmp40.r = new u8(new int( (new int( color.valueOf() >> new int(24).valueOf())).valueOf() & new int(0xFF).valueOf()));
			_tmp40.g = new u8(new int( (new int( color.valueOf() >> new int(16).valueOf())).valueOf() & new int(0xFF).valueOf()));
			_tmp40.b = new u8(new int( (new int( color.valueOf() >> new int(8).valueOf())).valueOf() & new int(0xFF).valueOf()));
			_tmp40.a = new u8(new int( color.valueOf() & new int(0xFF).valueOf()));
			return _tmp40;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u8} r
 * @param {u8} g
 * @param {u8} b
 * @returns {gx__Color}
*/
function gx__rgb(r, g, b) {
	try {
		return (function() {
			let _tmp41 = new gx__Color({});
			_tmp41.r = r;
			_tmp41.g = g;
			_tmp41.b = b;
			return _tmp41;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u8} r
 * @param {u8} g
 * @param {u8} b
 * @param {u8} a
 * @returns {gx__Color}
*/
function gx__rgba(r, g, b, a) {
	try {
		return (function() {
			let _tmp42 = new gx__Color({});
			_tmp42.r = r;
			_tmp42.g = g;
			_tmp42.b = b;
			_tmp42.a = a;
			return _tmp42;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gx__Color} b
 * @returns {gx__Color}
*/
function gx__Color__plus(a, b) {
	try {
		/** @type {int} */
		let na = new int(new int( new int(a.a).valueOf() + b.a.valueOf()));
		/** @type {int} */
		let nr = new int(new int( new int(a.r).valueOf() + b.r.valueOf()));
		/** @type {int} */
		let ng = new int(new int( new int(a.g).valueOf() + b.g.valueOf()));
		/** @type {int} */
		let nb = new int(new int( new int(a.b).valueOf() + b.b.valueOf()));
		if ((new bool(na.valueOf() > new int(255).valueOf())).valueOf()) {
			/** @type {int} */
			na = new int(new int(255));
		}
		if ((new bool(nr.valueOf() > new int(255).valueOf())).valueOf()) {
			/** @type {int} */
			nr = new int(new int(255));
		}
		if ((new bool(ng.valueOf() > new int(255).valueOf())).valueOf()) {
			/** @type {int} */
			ng = new int(new int(255));
		}
		if ((new bool(nb.valueOf() > new int(255).valueOf())).valueOf()) {
			/** @type {int} */
			nb = new int(new int(255));
		}
		return (function() {
			let _tmp43 = new gx__Color({});
			_tmp43.r = new u8(nr);
			_tmp43.g = new u8(ng);
			_tmp43.b = new u8(nb);
			_tmp43.a = new u8(na);
			return _tmp43;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gx__Color} b
 * @returns {gx__Color}
*/
function gx__Color__minus(a, b) {
	try {
		/** @type {u8} */
		let na = new u8(((new bool(a.a.valueOf() > b.a.valueOf())).valueOf() ? a.a : b.a));
		/** @type {int} */
		let nr = new int(new int( new int(a.r).valueOf() - b.r.valueOf()));
		/** @type {int} */
		let ng = new int(new int( new int(a.g).valueOf() - b.g.valueOf()));
		/** @type {int} */
		let nb = new int(new int( new int(a.b).valueOf() - b.b.valueOf()));
		if ((new bool(na.valueOf() < new int(0).valueOf())).valueOf()) {
			/** @type {u8} */
			na = new u8(new int(0));
		}
		if ((new bool(nr.valueOf() < new int(0).valueOf())).valueOf()) {
			/** @type {int} */
			nr = new int(new int(0));
		}
		if ((new bool(ng.valueOf() < new int(0).valueOf())).valueOf()) {
			/** @type {int} */
			ng = new int(new int(0));
		}
		if ((new bool(nb.valueOf() < new int(0).valueOf())).valueOf()) {
			/** @type {int} */
			nb = new int(new int(0));
		}
		return (function() {
			let _tmp44 = new gx__Color({});
			_tmp44.r = new u8(nr);
			_tmp44.g = new u8(ng);
			_tmp44.b = new u8(nb);
			_tmp44.a = new u8(na);
			return _tmp44;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gx__Color} c2
 * @returns {gx__Color}
*/
function gx__Color__mult(c, c2) {
	try {
		return (function() {
			let _tmp45 = new gx__Color({});
			_tmp45.r = new u8( c.r.valueOf() * c2.r.valueOf());
			_tmp45.g = new u8( c.g.valueOf() * c2.g.valueOf());
			_tmp45.b = new u8( c.b.valueOf() * c2.b.valueOf());
			_tmp45.a = new u8( c.a.valueOf() * c2.a.valueOf());
			return _tmp45;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gx__Color} c2
 * @returns {gx__Color}
*/
function gx__Color__div(c, c2) {
	try {
		return (function() {
			let _tmp46 = new gx__Color({});
			_tmp46.r = new u8( c.r.valueOf() / c2.r.valueOf());
			_tmp46.g = new u8( c.g.valueOf() / c2.g.valueOf());
			_tmp46.b = new u8( c.b.valueOf() / c2.b.valueOf());
			_tmp46.a = new u8( c.a.valueOf() / c2.a.valueOf());
			return _tmp46;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gx__Color} b
 * @returns {gx__Color}
*/
function gx__Color_over(a, b) {
	try {
		/** @type {f32} */
		const aa = new f32(new f32( new f32(a.a).valueOf() / new int(255).valueOf()));
		/** @type {f32} */
		const ab = new f32(new f32( new f32(b.a).valueOf() / new int(255).valueOf()));
		/** @type {f32} */
		const ar = new f32(new f32( aa.valueOf() + new f32( ab.valueOf() * (new f32( new int(1).valueOf() - aa.valueOf())).valueOf()).valueOf()));
		/** @type {f32} */
		const rr = new f32(new f32( (new f32( new f32( new f32(a.r).valueOf() * aa.valueOf()).valueOf() + new f32( new f32( new f32(b.r).valueOf() * ab.valueOf()).valueOf() * (new f32( new int(1).valueOf() - aa.valueOf())).valueOf()).valueOf())).valueOf() / ar.valueOf()));
		/** @type {f32} */
		const gr = new f32(new f32( (new f32( new f32( new f32(a.g).valueOf() * aa.valueOf()).valueOf() + new f32( new f32( new f32(b.g).valueOf() * ab.valueOf()).valueOf() * (new f32( new int(1).valueOf() - aa.valueOf())).valueOf()).valueOf())).valueOf() / ar.valueOf()));
		/** @type {f32} */
		const br = new f32(new f32( (new f32( new f32( new f32(a.b).valueOf() * aa.valueOf()).valueOf() + new f32( new f32( new f32(b.b).valueOf() * ab.valueOf()).valueOf() * (new f32( new int(1).valueOf() - aa.valueOf())).valueOf()).valueOf())).valueOf() / ar.valueOf()));
		return (function() {
			let _tmp47 = new gx__Color({});
			_tmp47.r = new u8(rr);
			_tmp47.g = new u8(gr);
			_tmp47.b = new u8(br);
			_tmp47.a = new u8(new f32( ar.valueOf() * new int(255).valueOf()));
			return _tmp47;
		})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gx__Color} c2
 * @returns {bool}
*/
function gx__Color_eq(c, c2) {
	try {
		return new bool( new bool( new bool( new bool(c.r.valueOf() == c2.r.valueOf()).valueOf() && new bool(c.g.valueOf() == c2.g.valueOf()).valueOf()).valueOf() && new bool(c.b.valueOf() == c2.b.valueOf()).valueOf()).valueOf() && new bool(c.a.valueOf() == c2.a.valueOf()).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function gx__Color_str(c) {
	try {
		return new string(`Color{${u8_str(c.r)}, ${u8_str(c.g)}, ${u8_str(c.b)}, ${u8_str(c.a)}}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {int}
*/
function gx__Color_rgba8(c) {
	try {
		return new int(new u32( new u32( new u32( new u32( new u32(c.r).valueOf() << new int(24).valueOf()).valueOf() | new u32( new u32(c.g).valueOf() << new int(16).valueOf()).valueOf()).valueOf() | new u32( new u32(c.b).valueOf() << new int(8).valueOf()).valueOf()).valueOf() | new u32(c.a).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {int}
*/
function gx__Color_bgra8(c) {
	try {
		return new int(new u32( new u32( new u32( new u32( new u32(c.b).valueOf() << new int(24).valueOf()).valueOf() | new u32( new u32(c.g).valueOf() << new int(16).valueOf()).valueOf()).valueOf() | new u32( new u32(c.r).valueOf() << new int(8).valueOf()).valueOf()).valueOf() | new u32(c.a).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {int}
*/
function gx__Color_abgr8(c) {
	try {
		return new int(new u32( new u32( new u32( new u32( new u32(c.a).valueOf() << new int(24).valueOf()).valueOf() | new u32( new u32(c.b).valueOf() << new int(16).valueOf()).valueOf()).valueOf() | new u32( new u32(c.g).valueOf() << new int(8).valueOf()).valueOf()).valueOf() | new u32(c.r).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @constant {Map_string_gx__Color} */
let gx__string_colors = undefined;

/**
 * @function
 * @param {string} s
 * @returns {gx__Color}
*/
function gx__color_from_string(s) {
	try {
		return gx__string_colors.get(s.$toJS());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function gx__Color_to_css_string(c) {
	try {
		return new string(`rgba(${u8_str(c.r)},${u8_str(c.g)},${u8_str(c.b)},${u8_str(c.a)})`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace gx */
/**
 * @constructor
 * @param {{obj?: voidptr, id?: int, width?: int, height?: int}} init
*/
function gx__Image({ obj = new voidptr(null), id = new int(0), width = new int(0), height = new int(0) }) {
	this.obj = obj
	this.id = id
	this.width = width
	this.height = height
};
gx__Image.prototype = {
	toString() {
		return `gx__Image { obj: ${this["obj"].toString()} , id: ${this["id"].toString()} , width: ${this["width"].toString()} , height: ${this["height"].toString()} }`
	},
	/** @type {voidptr} */
	obj: new voidptr(null),
	/** @type {int} */
	id: new int(0),
	/** @type {int} */
	width: new int(0),
	/** @type {int} */
	height: new int(0),
	$toJS() { return this; }
	};

/**
 * @function
 * @returns {bool}
*/
function gx__Image_is_empty(i) {
	try {
		return builtin__isnil(i.obj);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace gx */
/** @enum {number} */
const gx__HorizontalAlign = {
	left: 0,
	center: 1,
	right: 2,
};

/** @enum {number} */
const gx__VerticalAlign = {
	top: 0,
	middle: 1,
	bottom: 2,
	baseline: 3,
};

/** @namespace gx */
/** @constant {gx__HorizontalAlign} */
let gx__align_left = undefined;
/** @constant {gx__HorizontalAlign} */
let gx__align_right = undefined;

/* [params] */
/**
 * @constructor
 * @param {{color?: gx__Color, size?: int, align?: gx__HorizontalAlign, vertical_align?: gx__VerticalAlign, max_width?: int, family?: string, bold?: bool, mono?: bool, italic?: bool}} init
*/
function gx__TextCfg({ color = gx__black, size = new int(16), align = gx__HorizontalAlign.left, vertical_align = gx__VerticalAlign.top, max_width = new int(0), family = new string(""), bold = new bool(false), mono = new bool(false), italic = new bool(false) }) {
	this.color = color
	this.size = size
	this.align = align
	this.vertical_align = vertical_align
	this.max_width = max_width
	this.family = family
	this.bold = bold
	this.mono = mono
	this.italic = italic
};
gx__TextCfg.prototype = {
	toString() {
		return `gx__TextCfg { color: ${this["color"].toString()} , size: ${this["size"].toString()} , align: ${this["align"].toString()} , vertical_align: ${this["vertical_align"].toString()} , max_width: ${this["max_width"].toString()} , family: "${this["family"].toString()}", bold: ${this["bold"].toString()} , mono: ${this["mono"].toString()} , italic: ${this["italic"].toString()} }`
	},
	/** @type {gx__Color} */
	color: new gx__Color({}),
	/** @type {int} */
	size: new int(0),
	/** @type {gx__HorizontalAlign} */
	align: undefined,
	/** @type {gx__VerticalAlign} */
	vertical_align: undefined,
	/** @type {int} */
	max_width: new int(0),
	/** @type {string} */
	family: new string(""),
	/** @type {bool} */
	bold: new bool(false),
	/** @type {bool} */
	mono: new bool(false),
	/** @type {bool} */
	italic: new bool(false),
	$toJS() { return this; }
	};

/**
 * @function
 * @returns {string}
*/
function gx__TextCfg_to_css_string(cfg) {
cfg = new $ref(cfg)
	try {
		/** @type {string} */
		let font_style = new string(new string(""));
		if ((cfg.val.bold).valueOf()) {
			/** @type {string} */
			font_style.str = font_style + new string(new string("bold "));
		}
		if ((cfg.val.mono).valueOf()) {
			/** @type {string} */
			font_style.str = font_style + new string(new string("mono "));
		}
		if ((cfg.val.italic).valueOf()) {
			/** @type {string} */
			font_style.str = font_style + new string(new string("italic "));
		}
		return new string(`${font_style} ${int_str(cfg.val.size)}px ${cfg.val.family}`);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace rand.constants */
/** @constant {u64} */
let rand__constants__lower_mask = undefined;
/** @constant {int} */
const rand__constants__max_u32 = new int(0xFFFFFFFF);
/** @constant {u64} */
let rand__constants__max_u64 = undefined;
/** @constant {f32} */
let rand__constants__max_u32_as_f32 = undefined;
/** @constant {f64} */
let rand__constants__max_u64_as_f64 = undefined;
/** @constant {u32} */
let rand__constants__u31_mask = undefined;
/** @constant {u64} */
let rand__constants__u63_mask = undefined;

/** @namespace js.dom */
/**
 * @constructor
 * @param {{alpha?: bool, color_space?: string, desynchronized?: bool, will_read_frequently?: bool}} init
*/
function js__dom__CanvasRenderingContext2DSettings({ alpha = new bool(false), color_space = new string(""), desynchronized = new bool(false), will_read_frequently = new bool(false) }) {
	this.alpha = alpha
	this.color_space = color_space
	this.desynchronized = desynchronized
	this.will_read_frequently = will_read_frequently
};
js__dom__CanvasRenderingContext2DSettings.prototype = {
	...Path2D.prototype,
	toString() {
		return `js__dom__CanvasRenderingContext2DSettings { alpha: ${this["alpha"].toString()} , color_space: "${this["color_space"].toString()}", desynchronized: ${this["desynchronized"].toString()} , will_read_frequently: ${this["will_read_frequently"].toString()} }`
	},
	/** @type {bool} */
	alpha: new bool(false),
	/** @type {string} */
	color_space: new string(""),
	/** @type {bool} */
	desynchronized: new bool(false),
	/** @type {bool} */
	will_read_frequently: new bool(false),
	$toJS() { return this; }
	};

/**
 * @function
 * @returns {Any}
*/
function js__dom__CanvasRenderingContext2DSettings_to_js(settings) {
	try {
		/** @type {Any} */
		let object = new Any();
		object = { alpha: settings.alpha, colorSpace: settings.color_space.str, desynchronized: settings.desynchronized.val, willReadFrequently: settings.will_read_frequently.val };
		return object;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

function js__dom__SVGMatrix(val) { return val;  }
function js__dom__WebKitCSSMatrix(val) { return val;  }
function js__dom__WindowProxy(val) { return val;  }
/**
 * @function
 * @param {Document} doc
 * @returns {String}
*/
function js__dom__document_url(doc) {
	try {
		/** @type {String} */
		let url = new String();
		url = doc.URL;
		return url;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @constant {Document} */
let js__dom__document = undefined;

/**
 * @function
 * @returns {Window}
*/
function js__dom__window() {
	try {
		/** @type {Any} */
		let x = new voidptr(new u64(BigInt(0n)));
		x = window;
		return x;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function js__dom__init() {
	try {
		js__dom__document = document;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {anon_fn_js__eventtarget_js__event} callback
 * @returns {js__dom__EventCallback}
*/
function js__dom__event_listener(callback) {
	try {
		return (function () { 
		let _tmp48 = anon_fn_js__eventtarget_js__event_$copy(callback);
		return function (event) {
			let callback = _tmp48;
			/** @type {EventTarget} */
			let target = new voidptr(new u64(BigInt(0n)));
			target = this;
			callback(target, event);
		}})()
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {HTMLEmbedElement} embed
 * @returns {String}
*/
function js__dom__html_embed_type(embed) {
	try {
		/** @type {String} */
		let str = new String();
		str = embed.type
		return str;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {anon_fn_js__window_js__devicemotionevent__interface} cb
 * @returns {js__dom__OnDeviceMotion}
*/
function js__dom__on_device_motion(cb) {
	try {
		/** @type {anon_fn_ced01a4c33e511e0_js__devicemotionevent__interface_13818} */
		const clos = (function () { 
		let _tmp49 = anon_fn_js__window_js__devicemotionevent__interface_$copy(cb);
		return function (ev) {
			let cb = _tmp49;
			/** @type {Any} */
			let win = new voidptr(new u64(BigInt(0n)));
			win = this;
			return cb(win, ev);
		}})()
		;
		return clos;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {anon_fn_js__window_js__deviceorientationevent__interface} cb
 * @returns {js__dom__OnDeviceOrientation}
*/
function js__dom__on_device_orientation(cb) {
	try {
		/** @type {anon_fn_ced01a4c33e511e0_js__deviceorientationevent__interface_14090} */
		const clos = (function () { 
		let _tmp50 = anon_fn_js__window_js__deviceorientationevent__interface_$copy(cb);
		return function (ev) {
			let cb = _tmp50;
			/** @type {Any} */
			let win = new voidptr(new u64(BigInt(0n)));
			win = this;
			return cb(win, ev);
		}})()
		;
		return clos;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_vertex_shader() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.VERTEX_SHADER;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_fragment_shader() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.FRAGMENT_SHADER;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_element_array_buffer() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.ELEMENT_ARRAY_BUFFER;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_array_buffer() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.ARRAY_BUFFER;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_color_buffer_bit() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.COLOR_BUFFER_BIT;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_depth_buffer_bit() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.COLOR_BUFFER_BIT;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_triangles() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.TRIANGLES;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_unsigned_short() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.UNSIGNED_SHORT;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_static_draw() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.STATIC_DRAW;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_link_status() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.LINK_STATUS;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_compile_status() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.COMPILE_STATUS;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_float() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.FLOAT;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {Number}
*/
function js__dom__gl_depth_test() {
	try {
		/** @type {Number} */
		let num = new Number();
		num = WebGLRenderingContext.DEPTH_TEST;
		return num;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Event} ev
 * @returns {string}
*/
function js__dom__event_type(ev) {
	try {
		/** @type {string} */
		const res = new string(new string(""));
		res.str = ev.type;
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} typ
 * @param {bool} bubbles
 * @param {bool} cancelable
 * @param {bool} composed
 * @returns {Event}
*/
function js__dom__create_event(typ, bubbles, cancelable, composed) {
	try {
		/** @type {Event} */
		let ev = new voidptr(new u64(BigInt(0n)));
		ev = new Event(typ.str,bubbles.val,cancelable.val,composed.val);
		return ev;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace js.dom */
/** @namespace hash */
/**
 * @interface hash__Hasher
 * @typedef hash__Hasher
 * @property {(b: Array_u8) => Array_u8} sum
 * @property {() => int} size
 * @property {() => int} block_size
 */

function hash__Hasher (arg) { return new $ref(arg); }
/**
 * @interface hash__Hash32er
 * @typedef hash__Hash32er
 * @property {() => u32} sum32
 */

function hash__Hash32er (arg) { return new $ref(arg); }
/**
 * @interface hash__Hash64er
 * @typedef hash__Hash64er
 * @property {() => u64} sum64
 */

function hash__Hash64er (arg) { return new $ref(arg); }
/** @namespace hash */
/**
 * @function
 * @param {string} s
 * @param {u64} key
 * @returns {u64}
*/
function hash__sum64_string(s, key) {
	try {
		builtin__panic (new string("not yet implemented"));
		return new int(0);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace hash */
/** @constant {u64} */
let hash__wyp0 = undefined;
/** @constant {u64} */
let hash__wyp1 = undefined;
/** @constant {u64} */
let hash__wyp2 = undefined;
/** @constant {u64} */
let hash__wyp3 = undefined;
/** @constant {u64} */
let hash__wyp4 = undefined;

/* [inline] */
/**
 * @function
 * @param {u64} v
 * @param {u32} k
 * @returns {u64}
*/
function hash__wyrotr(v, k) {
	try {
		return new u64( BigInt((new u64( BigInt(v.valueOf()) >> BigInt(k.valueOf()))).valueOf()) | BigInt((new u64( BigInt(v.valueOf()) << BigInt((new u32( new int(64).valueOf() - k.valueOf())).valueOf()))).valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u64} a
 * @param {u64} b
 * @returns {u64}
*/
function hash__wymum(a, b) {
	try {
		/** @type {u32} */
		const mask32 = new u32(new int(4294967295));
		/** @type {u64} */
		const x0 = new u64(new u64( BigInt(a.valueOf()) & BigInt(mask32.valueOf())));
		/** @type {u64} */
		const x1 = new u64(new u64( BigInt(a.valueOf()) >> BigInt(new int(32).valueOf())));
		/** @type {u64} */
		const y0 = new u64(new u64( BigInt(b.valueOf()) & BigInt(mask32.valueOf())));
		/** @type {u64} */
		const y1 = new u64(new u64( BigInt(b.valueOf()) >> BigInt(new int(32).valueOf())));
		/** @type {u64} */
		const w0 = new u64(new u64( BigInt(x0.valueOf()) * BigInt(y0.valueOf())));
		/** @type {u64} */
		const t = new u64(new u64( BigInt(new u64( BigInt(x1.valueOf()) * BigInt(y0.valueOf())).valueOf()) + BigInt((new u64( BigInt(w0.valueOf()) >> BigInt(new int(32).valueOf()))).valueOf())));
		/** @type {u64} */
		let w1 = new u64(new u64( BigInt(t.valueOf()) & BigInt(mask32.valueOf())));
		/** @type {u64} */
		const w2 = new u64(new u64( BigInt(t.valueOf()) >> BigInt(new int(32).valueOf())));
		/** @type {u64} */
		w1.val = w1 + new u64(new u64( BigInt(x0.valueOf()) * BigInt(y1.valueOf())));
		/** @type {u64} */
		const hi = new u64(new u64( BigInt(new u64( BigInt(new u64( BigInt(x1.valueOf()) * BigInt(y1.valueOf())).valueOf()) + BigInt(w2.valueOf())).valueOf()) + BigInt((new u64( BigInt(w1.valueOf()) >> BigInt(new int(32).valueOf()))).valueOf())));
		/** @type {u64} */
		const lo = new u64(new u64( BigInt(a.valueOf()) * BigInt(b.valueOf())));
		return new u64( BigInt(hi.valueOf()) ^ BigInt(lo.valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u8} p
 * @param {u64} k
 * @returns {u64}
*/
function hash__wyr3(p, k) {
p = new $ref(p)
	try {
		{
			return new u64( BigInt(new u64( BigInt((new u64( BigInt(new u64(p.valueOf().arr.get(new int(new int(0).valueOf()))).valueOf()) << BigInt(new int(16).valueOf()))).valueOf()) | BigInt((new u64( BigInt(new u64(p.valueOf().arr.get(new int(new u64( BigInt(k.valueOf()) >> BigInt(new int(1).valueOf())).valueOf()))).valueOf()) << BigInt(new int(8).valueOf()))).valueOf())).valueOf()) | BigInt(new u64(p.valueOf().arr.get(new int(new u64( BigInt(k.valueOf()) - BigInt(new int(1).valueOf())).valueOf()))).valueOf()));
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u8} p
 * @returns {u64}
*/
function hash__wyr4(p) {
p = new $ref(p)
	try {
		{
			return new u32( new u32( new u32( new u32(p.valueOf().arr.get(new int(new int(0).valueOf()))).valueOf() | (new u32( new u32(p.valueOf().arr.get(new int(new int(1).valueOf()))).valueOf() << new int(8).valueOf())).valueOf()).valueOf() | (new u32( new u32(p.valueOf().arr.get(new int(new int(2).valueOf()))).valueOf() << new int(16).valueOf())).valueOf()).valueOf() | (new u32( new u32(p.valueOf().arr.get(new int(new int(3).valueOf()))).valueOf() << new int(24).valueOf())).valueOf());
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u8} p
 * @returns {u64}
*/
function hash__wyr8(p) {
p = new $ref(p)
	try {
		{
			return new u64( BigInt(new u64( BigInt(new u64( BigInt(new u64( BigInt(new u64( BigInt(new u64( BigInt(new u64( BigInt(new u64(p.valueOf().arr.get(new int(new int(0).valueOf()))).valueOf()) | BigInt((new u64( BigInt(new u64(p.valueOf().arr.get(new int(new int(1).valueOf()))).valueOf()) << BigInt(new int(8).valueOf()))).valueOf())).valueOf()) | BigInt((new u64( BigInt(new u64(p.valueOf().arr.get(new int(new int(2).valueOf()))).valueOf()) << BigInt(new int(16).valueOf()))).valueOf())).valueOf()) | BigInt((new u64( BigInt(new u64(p.valueOf().arr.get(new int(new int(3).valueOf()))).valueOf()) << BigInt(new int(24).valueOf()))).valueOf())).valueOf()) | BigInt((new u64( BigInt(new u64(p.valueOf().arr.get(new int(new int(4).valueOf()))).valueOf()) << BigInt(new int(32).valueOf()))).valueOf())).valueOf()) | BigInt((new u64( BigInt(new u64(p.valueOf().arr.get(new int(new int(5).valueOf()))).valueOf()) << BigInt(new int(40).valueOf()))).valueOf())).valueOf()) | BigInt((new u64( BigInt(new u64(p.valueOf().arr.get(new int(new int(6).valueOf()))).valueOf()) << BigInt(new int(48).valueOf()))).valueOf())).valueOf()) | BigInt((new u64( BigInt(new u64(p.valueOf().arr.get(new int(new int(7).valueOf()))).valueOf()) << BigInt(new int(56).valueOf()))).valueOf()));
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace rand.buffer */
/**
 * @constructor
 * @param {{bytes_left?: int, buffer?: u64}} init
*/
function rand__buffer__PRNGBuffer({ bytes_left = new int(0), buffer = new u64(0) }) {
	this.bytes_left = bytes_left
	this.buffer = buffer
};
rand__buffer__PRNGBuffer.prototype = {
	toString() {
		return `rand__buffer__PRNGBuffer { bytes_left: ${this["bytes_left"].toString()} , buffer: ${this["buffer"].toString()} }`
	},
	/** @type {int} */
	bytes_left: new int(0),
	/** @type {u64} */
	buffer: new u64(0),
	$toJS() { return this; }
	};

/** @namespace gg */
/** @enum {number} */
const gg__MouseButton = {
	left: 0,
	right: 1,
	middle: 2,
	invalid: 256,
};

/** @enum {number} */
const gg__MouseButtons = {
	left: 0,
	right: 1,
	middle: 2,
};

/** @enum {number} */
const gg__Modifier = {
	shift: 0,
	ctrl: 1,
	alt: 2,
	super: 3,
};

/** @enum {number} */
const gg__PenLineType = {
	solid: 0,
	dashed: 1,
	dotted: 2,
};

/** @enum {number} */
const gg__KeyCode = {
	invalid: 0,
	space: 32,
	apostrophe: 39,
	comma: 44,
	minus: 45,
	period: 46,
	slash: 47,
	_0: 48,
	_1: 49,
	_2: 50,
	_3: 51,
	_4: 52,
	_5: 53,
	_6: 54,
	_7: 55,
	_8: 56,
	_9: 57,
	semicolon: 59,
	equal: 61,
	a: 65,
	b: 66,
	c: 67,
	d: 68,
	e: 69,
	f: 70,
	g: 71,
	h: 72,
	i: 73,
	j: 74,
	k: 75,
	l: 76,
	m: 77,
	n: 78,
	o: 79,
	p: 80,
	q: 81,
	r: 82,
	s: 83,
	t: 84,
	u: 85,
	v: 86,
	w: 87,
	x: 88,
	y: 89,
	z: 90,
	left_bracket: 91,
	backslash: 92,
	right_bracket: 93,
	grave_accent: 96,
	world_1: 161,
	world_2: 162,
	escape: 256,
	enter: 257,
	tab: 258,
	backspace: 259,
	insert: 260,
	delete: 261,
	right: 262,
	left: 263,
	down: 264,
	up: 265,
	page_up: 266,
	page_down: 267,
	home: 268,
	end: 269,
	caps_lock: 280,
	scroll_lock: 281,
	num_lock: 282,
	print_screen: 283,
	pause: 284,
	f1: 290,
	f2: 291,
	f3: 292,
	f4: 293,
	f5: 294,
	f6: 295,
	f7: 296,
	f8: 297,
	f9: 298,
	f10: 299,
	f11: 300,
	f12: 301,
	f13: 302,
	f14: 303,
	f15: 304,
	f16: 305,
	f17: 306,
	f18: 307,
	f19: 308,
	f20: 309,
	f21: 310,
	f22: 311,
	f23: 312,
	f24: 313,
	f25: 314,
	kp_0: 320,
	kp_1: 321,
	kp_2: 322,
	kp_3: 323,
	kp_4: 324,
	kp_5: 325,
	kp_6: 326,
	kp_7: 327,
	kp_8: 328,
	kp_9: 329,
	kp_decimal: 330,
	kp_divide: 331,
	kp_multiply: 332,
	kp_subtract: 333,
	kp_add: 334,
	kp_enter: 335,
	kp_equal: 336,
	left_shift: 340,
	left_control: 341,
	left_alt: 342,
	left_super: 343,
	right_shift: 344,
	right_control: 345,
	right_alt: 346,
	right_super: 347,
	menu: 348,
};

/** @constant {int} */
const gg__key_code_max = new int(512);

/** @namespace gg */
/** @enum {number} */
const gg__DOMEventType = {
	invalid: 0,
	key_down: 1,
	key_up: 2,
	char: 3,
	mouse_down: 4,
	mouse_up: 5,
	mouse_scroll: 6,
	mouse_move: 7,
	mouse_enter: 8,
	mouse_leave: 9,
	touches_began: 10,
	touches_moved: 11,
	touches_ended: 12,
	touches_cancelled: 13,
	resized: 14,
	iconified: 15,
	restored: 16,
	focused: 17,
	unfocused: 18,
	suspended: 19,
	resumed: 20,
	update_cursor: 21,
	quit_requested: 22,
	clipboard_pasted: 23,
	files_droped: 24,
	num: 25,
};

/**
 * @constructor
 * @param {{frame_count?: u64, typ?: gg__DOMEventType, key_code?: gg__KeyCode, char_code?: u32, key_repeat?: bool, modifiers?: u32, mouse_button?: gg__MouseButton, mouse_x?: f32, mouse_y?: f32, mouse_dx?: f32, mouse_dy?: f32, scroll_x?: f32, scroll_y?: f32, window_width?: int, window_height?: int, framebuffer_width?: int, framebuffer_height?: int}} init
*/
function gg__Event({ frame_count = new u64(0), typ = undefined, key_code = undefined, char_code = new u32(0), key_repeat = new bool(false), modifiers = new u32(0), mouse_button = undefined, mouse_x = new f32(0), mouse_y = new f32(0), mouse_dx = new f32(0), mouse_dy = new f32(0), scroll_x = new f32(0), scroll_y = new f32(0), window_width = new int(0), window_height = new int(0), framebuffer_width = new int(0), framebuffer_height = new int(0) }) {
	this.frame_count = frame_count
	this.typ = typ
	this.key_code = key_code
	this.char_code = char_code
	this.key_repeat = key_repeat
	this.modifiers = modifiers
	this.mouse_button = mouse_button
	this.mouse_x = mouse_x
	this.mouse_y = mouse_y
	this.mouse_dx = mouse_dx
	this.mouse_dy = mouse_dy
	this.scroll_x = scroll_x
	this.scroll_y = scroll_y
	this.window_width = window_width
	this.window_height = window_height
	this.framebuffer_width = framebuffer_width
	this.framebuffer_height = framebuffer_height
};
gg__Event.prototype = {
	toString() {
		return `gg__Event { frame_count: ${this["frame_count"].toString()} , typ: ${this["typ"].toString()} , key_code: ${this["key_code"].toString()} , char_code: ${this["char_code"].toString()} , key_repeat: ${this["key_repeat"].toString()} , modifiers: ${this["modifiers"].toString()} , mouse_button: ${this["mouse_button"].toString()} , mouse_x: ${this["mouse_x"].toString()} , mouse_y: ${this["mouse_y"].toString()} , mouse_dx: ${this["mouse_dx"].toString()} , mouse_dy: ${this["mouse_dy"].toString()} , scroll_x: ${this["scroll_x"].toString()} , scroll_y: ${this["scroll_y"].toString()} , window_width: ${this["window_width"].toString()} , window_height: ${this["window_height"].toString()} , framebuffer_width: ${this["framebuffer_width"].toString()} , framebuffer_height: ${this["framebuffer_height"].toString()} }`
	},
	/** @type {u64} */
	frame_count: new u64(0),
	/** @type {gg__DOMEventType} */
	typ: undefined,
	/** @type {gg__KeyCode} */
	key_code: undefined,
	/** @type {u32} */
	char_code: new u32(0),
	/** @type {bool} */
	key_repeat: new bool(false),
	/** @type {u32} */
	modifiers: new u32(0),
	/** @type {gg__MouseButton} */
	mouse_button: undefined,
	/** @type {f32} */
	mouse_x: new f32(0),
	/** @type {f32} */
	mouse_y: new f32(0),
	/** @type {f32} */
	mouse_dx: new f32(0),
	/** @type {f32} */
	mouse_dy: new f32(0),
	/** @type {f32} */
	scroll_x: new f32(0),
	/** @type {f32} */
	scroll_y: new f32(0),
	/** @type {int} */
	window_width: new int(0),
	/** @type {int} */
	window_height: new int(0),
	/** @type {int} */
	framebuffer_width: new int(0),
	/** @type {int} */
	framebuffer_height: new int(0),
	$toJS() { return this; }
	};

/** @enum {number} */
const gg__DOMMouseButton = {
	invalid: -1,
	left: 0,
	right: 1,
	middle: 2,
};

/** @enum {number} */
const gg__DOMModifier = {
	shift: 1,
	ctrl: 2,
	alt: 4,
	super: 8,
	lmb: 256,
	rmb: 512,
	mmb: 1024,
};

/** @enum {number} */
const gg__DOMKeyCode = {
	invalid: 0,
	space: 32,
	apostrophe: 39,
	comma: 44,
	minus: 45,
	period: 46,
	slash: 47,
	_0: 48,
	_1: 49,
	_2: 50,
	_3: 51,
	_4: 52,
	_5: 53,
	_6: 54,
	_7: 55,
	_8: 56,
	_9: 57,
	semicolon: 59,
	equal: 61,
	a: 65,
	b: 66,
	c: 67,
	d: 68,
	e: 69,
	f: 70,
	g: 71,
	h: 72,
	i: 73,
	j: 74,
	k: 75,
	l: 76,
	m: 77,
	n: 78,
	o: 79,
	p: 80,
	q: 81,
	r: 82,
	s: 83,
	t: 84,
	u: 85,
	v: 86,
	w: 87,
	x: 88,
	y: 89,
	z: 90,
	left_bracket: 91,
	backslash: 92,
	right_bracket: 93,
	grave_accent: 96,
	world_1: 161,
	world_2: 162,
	escape: 256,
	enter: 257,
	tab: 258,
	backspace: 259,
	insert: 260,
	delete: 261,
	right: 262,
	left: 263,
	down: 264,
	up: 265,
	page_up: 266,
	page_down: 267,
	home: 268,
	end: 269,
	caps_lock: 280,
	scroll_lock: 281,
	num_lock: 282,
	print_screen: 283,
	pause: 284,
	f1: 290,
	f2: 291,
	f3: 292,
	f4: 293,
	f5: 294,
	f6: 295,
	f7: 296,
	f8: 297,
	f9: 298,
	f10: 299,
	f11: 300,
	f12: 301,
	f13: 302,
	f14: 303,
	f15: 304,
	f16: 305,
	f17: 306,
	f18: 307,
	f19: 308,
	f20: 309,
	f21: 310,
	f22: 311,
	f23: 312,
	f24: 313,
	f25: 314,
	kp_0: 320,
	kp_1: 321,
	kp_2: 322,
	kp_3: 323,
	kp_4: 324,
	kp_5: 325,
	kp_6: 326,
	kp_7: 327,
	kp_8: 328,
	kp_9: 329,
	kp_decimal: 330,
	kp_divide: 331,
	kp_multiply: 332,
	kp_subtract: 333,
	kp_add: 334,
	kp_enter: 335,
	kp_equal: 336,
	left_shift: 340,
	left_control: 341,
	left_alt: 342,
	left_super: 343,
	right_shift: 344,
	right_control: 345,
	right_alt: 346,
	right_super: 347,
	menu: 348,
};

/**
 * @constructor
 * @param {{width?: int, height?: int, use_ortho?: bool, retina?: bool, resizable?: bool, user_data?: voidptr, font_size?: int, create_window?: bool, window_title?: string, borderless_window?: bool, always_on_top?: bool, bg_color?: gx__Color, init_fn?: gg__FNCb, frame_fn?: gg__FNCb, native_frame_fn?: gg__FNCb, cleanup_fn?: gg__FNCb, fail_fn?: gg__FNFail, event_fn?: gg__FNEvent, quit_fn?: gg__FNEvent, keydown_fn?: gg__FNKeyDown, keyup_fn?: gg__FNKeyUp, char_fn?: gg__FNChar, move_fn?: gg__FNMove, click_fn?: gg__FNClick, unclick_fn?: gg__FNUnClick, leave_fn?: gg__FNEvent, enter_fn?: gg__FNEvent, resized_fn?: gg__FNEvent, scroll_fn?: gg__FNEvent, fullscreen?: bool, scale?: f32, sample_count?: int, swap_interval?: int, font_path?: string, custom_bold_font_path?: string, ui_mode?: bool, font_bytes_normal?: Array_u8, font_bytes_bold?: Array_u8, font_bytes_mono?: Array_u8, font_bytes_italic?: Array_u8, native_rendering?: bool, enable_dragndrop?: bool, max_dropped_files?: int, max_dropped_file_path_length?: int, canvas?: string}} init
*/
function gg__Config({ width = new int(0), height = new int(0), use_ortho = new bool(false), retina = new bool(false), resizable = new bool(false), user_data = new voidptr(null), font_size = new int(0), create_window = new bool(false), window_title = new string(""), borderless_window = new bool(false), always_on_top = new bool(false), bg_color = new gx__Color({}), init_fn = null, frame_fn = null, native_frame_fn = null, cleanup_fn = null, fail_fn = null, event_fn = null, quit_fn = null, keydown_fn = null, keyup_fn = null, char_fn = null, move_fn = null, click_fn = null, unclick_fn = null, leave_fn = null, enter_fn = null, resized_fn = null, scroll_fn = null, fullscreen = new bool(false), scale = new f32(1.0), sample_count = new int(0), swap_interval = new int(1), font_path = new string(""), custom_bold_font_path = new string(""), ui_mode = new bool(false), font_bytes_normal = empty_array(), font_bytes_bold = empty_array(), font_bytes_mono = empty_array(), font_bytes_italic = empty_array(), native_rendering = new bool(false), enable_dragndrop = new bool(false), max_dropped_files = new int(1), max_dropped_file_path_length = new int(2048), canvas = new string("") }) {
	this.width = width
	this.height = height
	this.use_ortho = use_ortho
	this.retina = retina
	this.resizable = resizable
	this.user_data = user_data
	this.font_size = font_size
	this.create_window = create_window
	this.window_title = window_title
	this.borderless_window = borderless_window
	this.always_on_top = always_on_top
	this.bg_color = bg_color
	this.init_fn = init_fn
	this.frame_fn = frame_fn
	this.native_frame_fn = native_frame_fn
	this.cleanup_fn = cleanup_fn
	this.fail_fn = fail_fn
	this.event_fn = event_fn
	this.quit_fn = quit_fn
	this.keydown_fn = keydown_fn
	this.keyup_fn = keyup_fn
	this.char_fn = char_fn
	this.move_fn = move_fn
	this.click_fn = click_fn
	this.unclick_fn = unclick_fn
	this.leave_fn = leave_fn
	this.enter_fn = enter_fn
	this.resized_fn = resized_fn
	this.scroll_fn = scroll_fn
	this.fullscreen = fullscreen
	this.scale = scale
	this.sample_count = sample_count
	this.swap_interval = swap_interval
	this.font_path = font_path
	this.custom_bold_font_path = custom_bold_font_path
	this.ui_mode = ui_mode
	this.font_bytes_normal = font_bytes_normal
	this.font_bytes_bold = font_bytes_bold
	this.font_bytes_mono = font_bytes_mono
	this.font_bytes_italic = font_bytes_italic
	this.native_rendering = native_rendering
	this.enable_dragndrop = enable_dragndrop
	this.max_dropped_files = max_dropped_files
	this.max_dropped_file_path_length = max_dropped_file_path_length
	this.canvas = canvas
};
gg__Config.prototype = {
	toString() {
		return `gg__Config { width: ${this["width"].toString()} , height: ${this["height"].toString()} , use_ortho: ${this["use_ortho"].toString()} , retina: ${this["retina"].toString()} , resizable: ${this["resizable"].toString()} , user_data: ${this["user_data"].toString()} , font_size: ${this["font_size"].toString()} , create_window: ${this["create_window"].toString()} , window_title: "${this["window_title"].toString()}", borderless_window: ${this["borderless_window"].toString()} , always_on_top: ${this["always_on_top"].toString()} , bg_color: ${this["bg_color"].toString()} , init_fn: ${this["init_fn"].toString()} , frame_fn: ${this["frame_fn"].toString()} , native_frame_fn: ${this["native_frame_fn"].toString()} , cleanup_fn: ${this["cleanup_fn"].toString()} , fail_fn: ${this["fail_fn"].toString()} , event_fn: ${this["event_fn"].toString()} , quit_fn: ${this["quit_fn"].toString()} , keydown_fn: ${this["keydown_fn"].toString()} , keyup_fn: ${this["keyup_fn"].toString()} , char_fn: ${this["char_fn"].toString()} , move_fn: ${this["move_fn"].toString()} , click_fn: ${this["click_fn"].toString()} , unclick_fn: ${this["unclick_fn"].toString()} , leave_fn: ${this["leave_fn"].toString()} , enter_fn: ${this["enter_fn"].toString()} , resized_fn: ${this["resized_fn"].toString()} , scroll_fn: ${this["scroll_fn"].toString()} , fullscreen: ${this["fullscreen"].toString()} , scale: ${this["scale"].toString()} , sample_count: ${this["sample_count"].toString()} , swap_interval: ${this["swap_interval"].toString()} , font_path: "${this["font_path"].toString()}", custom_bold_font_path: "${this["custom_bold_font_path"].toString()}", ui_mode: ${this["ui_mode"].toString()} , font_bytes_normal: ${this["font_bytes_normal"].toString()} , font_bytes_bold: ${this["font_bytes_bold"].toString()} , font_bytes_mono: ${this["font_bytes_mono"].toString()} , font_bytes_italic: ${this["font_bytes_italic"].toString()} , native_rendering: ${this["native_rendering"].toString()} , enable_dragndrop: ${this["enable_dragndrop"].toString()} , max_dropped_files: ${this["max_dropped_files"].toString()} , max_dropped_file_path_length: ${this["max_dropped_file_path_length"].toString()} , canvas: "${this["canvas"].toString()}"}`
	},
	/** @type {int} */
	width: new int(0),
	/** @type {int} */
	height: new int(0),
	/** @type {bool} */
	use_ortho: new bool(false),
	/** @type {bool} */
	retina: new bool(false),
	/** @type {bool} */
	resizable: new bool(false),
	/** @type {voidptr} */
	user_data: new voidptr(null),
	/** @type {int} */
	font_size: new int(0),
	/** @type {bool} */
	create_window: new bool(false),
	/** @type {string} */
	window_title: new string(""),
	/** @type {bool} */
	borderless_window: new bool(false),
	/** @type {bool} */
	always_on_top: new bool(false),
	/** @type {gx__Color} */
	bg_color: new gx__Color({}),
	/** @type {gg__FNCb} */
	init_fn: undefined,
	/** @type {gg__FNCb} */
	frame_fn: undefined,
	/** @type {gg__FNCb} */
	native_frame_fn: undefined,
	/** @type {gg__FNCb} */
	cleanup_fn: undefined,
	/** @type {gg__FNFail} */
	fail_fn: undefined,
	/** @type {gg__FNEvent} */
	event_fn: undefined,
	/** @type {gg__FNEvent} */
	quit_fn: undefined,
	/** @type {gg__FNKeyDown} */
	keydown_fn: undefined,
	/** @type {gg__FNKeyUp} */
	keyup_fn: undefined,
	/** @type {gg__FNChar} */
	char_fn: undefined,
	/** @type {gg__FNMove} */
	move_fn: undefined,
	/** @type {gg__FNClick} */
	click_fn: undefined,
	/** @type {gg__FNUnClick} */
	unclick_fn: undefined,
	/** @type {gg__FNEvent} */
	leave_fn: undefined,
	/** @type {gg__FNEvent} */
	enter_fn: undefined,
	/** @type {gg__FNEvent} */
	resized_fn: undefined,
	/** @type {gg__FNEvent} */
	scroll_fn: undefined,
	/** @type {bool} */
	fullscreen: new bool(false),
	/** @type {f32} */
	scale: new f32(0),
	/** @type {int} */
	sample_count: new int(0),
	/** @type {int} */
	swap_interval: new int(0),
	/** @type {string} */
	font_path: new string(""),
	/** @type {string} */
	custom_bold_font_path: new string(""),
	/** @type {bool} */
	ui_mode: new bool(false),
	/** @type {Array_u8} */
	font_bytes_normal: empty_array(),
	/** @type {Array_u8} */
	font_bytes_bold: empty_array(),
	/** @type {Array_u8} */
	font_bytes_mono: empty_array(),
	/** @type {Array_u8} */
	font_bytes_italic: empty_array(),
	/** @type {bool} */
	native_rendering: new bool(false),
	/** @type {bool} */
	enable_dragndrop: new bool(false),
	/** @type {int} */
	max_dropped_files: new int(0),
	/** @type {int} */
	max_dropped_file_path_length: new int(0),
	/** @type {string} */
	canvas: new string(""),
	$toJS() { return this; }
	};

/** @constant {gg__Size} */
let gg__size = undefined;

/**
 * @function
 * @returns {gg__Size}
*/
function gg__window_size() {
	try {
		return gg__size;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @constructor
 * @param {{render_text?: bool, image_cache?: Array_gg__Image, needs_refresh?: bool, ticks?: int, scale?: f32, width?: int, height?: int, window?: Window, config?: gg__Config, user_data?: voidptr, ui_mode?: bool, frame?: u64, mbtn_mask?: u8, mouse_buttons?: gg__MouseButtons, mouse_pos_x?: int, mouse_pos_y?: int, mouse_dx?: int, mouse_dy?: int, scroll_x?: int, scroll_y?: int, key_modifiers?: gg__Modifier, key_repeat?: bool, pressed_keys?: Array_fixed_bool_512, pressed_keys_edge?: Array_fixed_bool_512, context?: CanvasRenderingContext2D, canvas?: HTMLCanvasElement}} init
*/
function gg__Context({ render_text = new bool(true), image_cache = empty_array(), needs_refresh = new bool(true), ticks = new int(0), scale = new f32(1.0), width = new int(0), height = new int(0), window, config = new gg__Config({}), user_data = new voidptr(null), ui_mode = new bool(false), frame = new u64(0), mbtn_mask = new u8(0), mouse_buttons = undefined, mouse_pos_x = new int(0), mouse_pos_y = new int(0), mouse_dx = new int(0), mouse_dy = new int(0), scroll_x = new int(0), scroll_y = new int(0), key_modifiers = undefined, key_repeat = new bool(false), pressed_keys = undefined, pressed_keys_edge = undefined, context, canvas }) {
	this.render_text = render_text
	this.image_cache = image_cache
	this.needs_refresh = needs_refresh
	this.ticks = ticks
	this.scale = scale
	this.width = width
	this.height = height
	this.window = window
	this.config = config
	this.user_data = user_data
	this.ui_mode = ui_mode
	this.frame = frame
	this.mbtn_mask = mbtn_mask
	this.mouse_buttons = mouse_buttons
	this.mouse_pos_x = mouse_pos_x
	this.mouse_pos_y = mouse_pos_y
	this.mouse_dx = mouse_dx
	this.mouse_dy = mouse_dy
	this.scroll_x = scroll_x
	this.scroll_y = scroll_y
	this.key_modifiers = key_modifiers
	this.key_repeat = key_repeat
	this.pressed_keys = pressed_keys
	this.pressed_keys_edge = pressed_keys_edge
	this.context = context
	this.canvas = canvas
};
gg__Context.prototype = {
	toString() {
		return `gg__Context { render_text: ${this["render_text"].toString()} , image_cache: ${this["image_cache"].toString()} , needs_refresh: ${this["needs_refresh"].toString()} , ticks: ${this["ticks"].toString()} , scale: ${this["scale"].toString()} , width: ${this["width"].toString()} , height: ${this["height"].toString()} , window: ${this["window"].toString()} , config: ${this["config"].toString()} , user_data: ${this["user_data"].toString()} , ui_mode: ${this["ui_mode"].toString()} , frame: ${this["frame"].toString()} , mbtn_mask: ${this["mbtn_mask"].toString()} , mouse_buttons: ${this["mouse_buttons"].toString()} , mouse_pos_x: ${this["mouse_pos_x"].toString()} , mouse_pos_y: ${this["mouse_pos_y"].toString()} , mouse_dx: ${this["mouse_dx"].toString()} , mouse_dy: ${this["mouse_dy"].toString()} , scroll_x: ${this["scroll_x"].toString()} , scroll_y: ${this["scroll_y"].toString()} , key_modifiers: ${this["key_modifiers"].toString()} , key_repeat: ${this["key_repeat"].toString()} , pressed_keys: ${this["pressed_keys"].toString()} , pressed_keys_edge: ${this["pressed_keys_edge"].toString()} , context: ${this["context"].toString()} , canvas: ${this["canvas"].toString()} }`
	},
	/** @type {bool} */
	render_text: new bool(false),
	/** @type {Array_gg__Image} */
	image_cache: empty_array(),
	/** @type {bool} */
	needs_refresh: new bool(false),
	/** @type {int} */
	ticks: new int(0),
	/** @type {f32} */
	scale: new f32(0),
	/** @type {int} */
	width: new int(0),
	/** @type {int} */
	height: new int(0),
	/** @type {Window} */
	/** @type {gg__Config} */
	config: new gg__Config({}),
	/** @type {voidptr} */
	user_data: new voidptr(null),
	/** @type {bool} */
	ui_mode: new bool(false),
	/** @type {u64} */
	frame: new u64(0),
	/** @type {u8} */
	mbtn_mask: new u8(0),
	/** @type {gg__MouseButtons} */
	mouse_buttons: undefined,
	/** @type {int} */
	mouse_pos_x: new int(0),
	/** @type {int} */
	mouse_pos_y: new int(0),
	/** @type {int} */
	mouse_dx: new int(0),
	/** @type {int} */
	mouse_dy: new int(0),
	/** @type {int} */
	scroll_x: new int(0),
	/** @type {int} */
	scroll_y: new int(0),
	/** @type {gg__Modifier} */
	key_modifiers: undefined,
	/** @type {bool} */
	key_repeat: new bool(false),
	/** @type {Array_fixed_bool_512} */
	pressed_keys: undefined,
	/** @type {Array_fixed_bool_512} */
	pressed_keys_edge: undefined,
	/** @type {CanvasRenderingContext2D} */
	/** @type {HTMLCanvasElement} */
	$toJS() { return this; }
	};

/**
 * @function
 * @param {HTMLElement} elem
 * @returns {HTMLCanvasElement}
*/
function gg__get_canvas(elem) {
	try {
		if (elem instanceof HTMLCanvasElement) {
			return elem;
		}
		
		else {
			builtin__panic (new string("gg: element is not an HTMLCanvasElement"));
		}
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {HTMLCanvasElement} canvas
 * @returns {CanvasRenderingContext2D}
*/
function gg__get_context(canvas) {
	try {
		/** @type {js__dom__CanvasContext} */
		const ctx = (function () {
		try {
		let tmp = 
		canvas.getContext(new string("2d").str, js_undefined());
if (tmp === null) throw "none";
		return tmp;
		} catch(err) {
			builtin__panic (new string("cannot get context"));
		}
		})()
		;
		if (ctx instanceof CanvasRenderingContext2D) {
			return ctx;
		}
		
		else {
			builtin__panic (new string("failed to get 2D context"));
		}
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gg__Config} cfg
 * @returns {gg__Context}
*/
function gg__new_context(cfg) {
	try {
		/** @type {gg__Context} */
		let g = new $ref(new gg__Context({}));
		/** @type {voidptr} */
		g.val.user_data = cfg.user_data;
		/** @type {int} */
		g.val.width = new int(cfg.width);
		/** @type {int} */
		g.val.height = new int(cfg.height);
		/** @type {bool} */
		g.val.ui_mode = new bool(cfg.ui_mode);
		/** @type {gg__Size} */
		let sz = gg__size;
		/** @type {int} */
		sz.height = new int(g.val.height);
		/** @type {int} */
		sz.width = new int(g.val.width);
		/** @type {gg__Config} */
		g.val.config = cfg;
		if ((builtin__isnil(cfg.user_data)).valueOf()) {
			/** @type {voidptr} */
			g.val.user_data = g;
		}
		/** @type {Window} */
		g.val.window = js__dom__window();
		/** @type {Document} */
		const _v_document = js__dom__document;
		/** @type {HTMLElement} */
		const canvas_elem = (function () {
		try {
		let tmp = 
		_v_document.getElementById(cfg.canvas.str);
if (tmp === null) throw "none";
		return tmp;
		} catch(err) {
			builtin__panic (new string("gg: cannot get canvas element"));
		}
		})()
		;
		/** @type {HTMLCanvasElement} */
		const canvas = gg__get_canvas(canvas_elem);
		/** @type {HTMLCanvasElement} */
		g.val.canvas = canvas;
		/** @type {CanvasRenderingContext2D} */
		g.val.context = gg__get_context(g.val.canvas);
		/** @type {anon_fn_77fe259d4f6db02a_js__event_6726} */
		const mouse_down_event_handler = (function () { 
		return function (event) {
			if (event instanceof MouseEvent) {
				/** @type {gg__Event} */
				const e = gg__Context_handle_mouse_event(g.valueOf(),event, gg__DOMEventType.mouse_down);
				if ((!builtin__isnil(g.val.config.event_fn).val ).valueOf()) {
					/** @type {gg__FNEvent} */
					const f = g.val.config.event_fn;
					f(e, g.val.config.user_data);
				}
				if ((!builtin__isnil(g.val.config.click_fn).val ).valueOf()) {
					/** @type {gg__FNClick} */
					const f = g.val.config.click_fn;
					f(e.mouse_x, e.mouse_y, e.mouse_button, g.val.config.user_data);
				}
			}
			
			else {
			}
			;
		}})()
		;
		/** @type {anon_fn_77fe259d4f6db02a_js__event_7125} */
		const mouse_up_event_handler = (function () { 
		return function (event) {
			if (event instanceof MouseEvent) {
				/** @type {gg__Event} */
				const e = gg__Context_handle_mouse_event(g.valueOf(),event, gg__DOMEventType.mouse_up);
				if ((!builtin__isnil(g.val.config.event_fn).val ).valueOf()) {
					/** @type {gg__FNEvent} */
					const f = g.val.config.event_fn;
					f(e, g.val.config.user_data);
				}
				if ((!builtin__isnil(g.val.config.unclick_fn).val ).valueOf()) {
					/** @type {gg__FNUnClick} */
					const f = g.val.config.unclick_fn;
					f(e.mouse_x, e.mouse_y, e.mouse_button, g.val.config.user_data);
				}
			}
			
			else {
			}
			;
		}})()
		;
		/** @type {anon_fn_77fe259d4f6db02a_js__event_7527} */
		const mouse_move_event_handler = (function () { 
		return function (event) {
			if (event instanceof MouseEvent) {
				/** @type {gg__Event} */
				const e = gg__Context_handle_mouse_event(g.valueOf(),event, gg__DOMEventType.mouse_move);
				if ((!builtin__isnil(g.val.config.event_fn).val ).valueOf()) {
					/** @type {gg__FNEvent} */
					const f = g.val.config.event_fn;
					f(e, g.val.config.user_data);
				}
				if ((!builtin__isnil(g.val.config.move_fn).val ).valueOf()) {
					/** @type {gg__FNMove} */
					const f = g.val.config.move_fn;
					f(e.mouse_x, e.mouse_y, g.val.config.user_data);
				}
			}
			
			else {
			}
			;
		}})()
		;
		/** @type {anon_fn_77fe259d4f6db02a_js__event_7911} */
		const mouse_leave_event_handler = (function () { 
		return function (event) {
			if (event instanceof MouseEvent) {
				/** @type {gg__Event} */
				const e = gg__Context_handle_mouse_event(g.valueOf(),event, gg__DOMEventType.mouse_leave);
				if ((!builtin__isnil(g.val.config.event_fn).val ).valueOf()) {
					/** @type {gg__FNEvent} */
					const f = g.val.config.event_fn;
					f(e, g.val.config.user_data);
				}
				if ((!builtin__isnil(g.val.config.leave_fn).val ).valueOf()) {
					/** @type {gg__FNEvent} */
					const f = g.val.config.leave_fn;
					f(e, g.val.config.user_data);
				}
			}
			
			else {
			}
			;
		}})()
		;
		/** @type {anon_fn_77fe259d4f6db02a_js__event_8279} */
		const mouse_enter_event_handler = (function () { 
		return function (event) {
			if (event instanceof MouseEvent) {
				/** @type {gg__Event} */
				const e = gg__Context_handle_mouse_event(g.valueOf(),event, gg__DOMEventType.mouse_enter);
				if ((!builtin__isnil(g.val.config.event_fn).val ).valueOf()) {
					/** @type {gg__FNEvent} */
					const f = g.val.config.event_fn;
					f(e, g.val.config.user_data);
				}
				if ((!builtin__isnil(g.val.config.enter_fn).val ).valueOf()) {
					/** @type {gg__FNEvent} */
					const f = g.val.config.enter_fn;
					f(e, g.val.config.user_data);
				}
			}
			
			else {
			}
			;
		}})()
		;
		/** @type {anon_fn_77fe259d4f6db02a_js__event_8643} */
		const keydown_event_handler = (function () { 
		return function (event) {
			builtin__println (new string("keyboard"));
			if (event instanceof KeyboardEvent) {
				/** @type {gg__Event} */
				const e = gg__Context_handle_keyboard_event(g.valueOf(),event, gg__DOMEventType.key_down);
				if ((!builtin__isnil(g.val.config.event_fn).val ).valueOf()) {
					/** @type {gg__FNEvent} */
					const f = g.val.config.event_fn;
					f(e, g.val.config.user_data);
				}
				if ((!builtin__isnil(g.val.config.keydown_fn).val ).valueOf()) {
					/** @type {gg__FNKeyDown} */
					const f = g.val.config.keydown_fn;
					f(e.key_code, gg__Modifier.super, g.val.config.user_data);
				}
			}
			
			else {
			}
			;
		}})()
		;
		g.val.canvas.addEventListener(new string("mousedown").str, mouse_down_event_handler, {});
		js__dom__window().addEventListener(new string("mouseup").str, mouse_up_event_handler, {});
		g.val.canvas.addEventListener(new string("mousemove").str, mouse_move_event_handler, {});
		g.val.canvas.addEventListener(new string("mouseleave").str, mouse_leave_event_handler, {});
		g.val.canvas.addEventListener(new string("mouseenter").str, mouse_enter_event_handler, {});
		js__dom__document.addEventListener(new string("keydown").str, keydown_event_handler, {});
		return g;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function gg__Context_run(ctx) {
ctx = new $ref(ctx)
	try {
		gg__gg_animation_frame_fn(ctx);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function gg__Context_begin(ctx) {
ctx = new $ref(ctx)
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function gg__Context_end(ctx) {
ctx = new $ref(ctx)
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f32} x1
 * @param {f32} y1
 * @param {f32} x2
 * @param {f32} y2
 * @param {gx__Color} c
 * @returns {void}
*/
function gg__Context_draw_line(ctx, x1, y1, x2, y2, c) {
ctx = new $ref(ctx)
	try {
		ctx.val.context.beginPath();
		/** @type {js__dom__FillStyle} */
		ctx.val.context.strokeStyle = gx__Color_to_css_string(c,).str;
		ctx.val.context.moveTo(x1, y1);
		ctx.val.context.lineTo(x2, y2);
		ctx.val.context.stroke();
		ctx.val.context.closePath();
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function gg__Context_quit(ctx) {
ctx = new $ref(ctx)
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f32} x
 * @param {f32} y
 * @param {f32} w
 * @param {f32} h
 * @param {gx__Color} c
 * @returns {void}
*/
function gg__Context_draw_rect(ctx, x, y, w, h, c) {
ctx = new $ref(ctx)
	try {
		ctx.val.context.beginPath();
		/** @type {js__dom__FillStyle} */
		ctx.val.context.fillStyle = gx__Color_to_css_string(c,).str;
		ctx.val.context.fillRect(x, y, w, h);
		ctx.val.context.closePath();
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gg__Context} g
 * @returns {void}
*/
function gg__gg_animation_frame_fn(g) {
g = new $ref(g)
	try {
		g.val.frame.val ++;
		g.val.context.clearRect(new int(0), new int(0), g.val.config.width, g.val.config.height);
		if ((!builtin__isnil(g.val.config.frame_fn).val ).valueOf()) {
			/** @type {gg__FNCb} */
			const f = g.val.config.frame_fn;
			f(g.val.user_data);
			/** @type {bool} */
			g.val.needs_refresh = new bool(new bool(false));
		}
		g.val.window.requestAnimationFrame((function () { 
		return function (time) {
			gg__gg_animation_frame_fn(g);
		}})()
		);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {MouseEvent} event
 * @param {gg__DOMEventType} typ
 * @returns {gg__Event}
*/
function gg__Context_handle_mouse_event(g, event, typ) {
g = new $ref(g)
	try {
		/** @type {gg__Event} */
		let e = new gg__Event({});
		/** @type {gg__DOMEventType} */
		e.typ = typ;
		/** @type {u64} */
		e.frame_count = new u64(g.val.frame);
		let _tmp51 = new int(event.button);
		
		if (vEq(_tmp51,new int(0))) {
			/** @type {gg__MouseButton} */
			e.mouse_button = gg__MouseButton.left;
		}
		else if (vEq(_tmp51,new int(1))) {
			/** @type {gg__MouseButton} */
			e.mouse_button = gg__MouseButton.middle;
		}
		else if (vEq(_tmp51,new int(2))) {
			/** @type {gg__MouseButton} */
			e.mouse_button = gg__MouseButton.right;
		}
		else {
			/** @type {gg__MouseButton} */
			e.mouse_button = gg__MouseButton.invalid;
		};
		/** @type {f32} */
		e.mouse_x = new f32(new int(event.offsetX));
		/** @type {f32} */
		e.mouse_y = new f32(new int(event.offsetY));
		/** @type {f32} */
		e.mouse_dx = new f32(new int(event.movementX));
		/** @type {f32} */
		e.mouse_dy = new f32(new int(event.movementY));
		/** @type {int} */
		const bitplace = new int(new int(event.button));
		/** @type {u8} */
		g.val.mbtn_mask.val = Math.floor(g.val.mbtn_mask | new u8(new u8(new int( new int(1).valueOf() << bitplace.valueOf()))));
		/** @type {int} */
		g.val.mouse_pos_x = new int(new int(event.offsetX));
		/** @type {int} */
		g.val.mouse_pos_y = new int(new int(event.offsetY));
		/** @type {int} */
		g.val.mouse_dx = new int(new int(event.movementX));
		/** @type {int} */
		g.val.mouse_dy = new int(new int(event.movementY));
		return e;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {KeyboardEvent} event
 * @param {gg__DOMEventType} typ
 * @returns {gg__Event}
*/
function gg__Context_handle_keyboard_event(g, event, typ) {
g = new $ref(g)
	try {
		/** @type {gg__Event} */
		let e = new gg__Event({});
		/** @type {gg__DOMEventType} */
		e.typ = typ;
		/** @type {u64} */
		e.frame_count = new u64(g.val.frame);
		let _tmp52 = new string(event.code);
		
		if (_tmp52.str === new string("Space").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.space;
		}
		else if (_tmp52.str === new string("Minus").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.minus;
		}
		else if (_tmp52.str === new string("Quote").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.apostrophe;
		}
		else if (_tmp52.str === new string("Comma").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.comma;
		}
		else if (_tmp52.str === new string("Period").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.period;
		}
		else if (_tmp52.str === new string("Digit0").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode._0;
		}
		else if (_tmp52.str === new string("Digit1").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode._1;
		}
		else if (_tmp52.str === new string("Digit2").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode._2;
		}
		else if (_tmp52.str === new string("Digit3").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode._3;
		}
		else if (_tmp52.str === new string("Digit4").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode._4;
		}
		else if (_tmp52.str === new string("Digit5").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode._5;
		}
		else if (_tmp52.str === new string("Digit6").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode._6;
		}
		else if (_tmp52.str === new string("Digit7").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode._7;
		}
		else if (_tmp52.str === new string("Digit8").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode._8;
		}
		else if (_tmp52.str === new string("Digit9").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode._9;
		}
		else if (_tmp52.str === new string("Semicolon").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.semicolon;
		}
		else if (_tmp52.str === new string("Equal").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.equal;
		}
		else if (_tmp52.str === new string("KeyA").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.a;
		}
		else if (_tmp52.str === new string("KeyB").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.b;
		}
		else if (_tmp52.str === new string("KeyC").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.c;
		}
		else if (_tmp52.str === new string("KeyD").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.d;
		}
		else if (_tmp52.str === new string("KeyE").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.e;
		}
		else if (_tmp52.str === new string("KeyF").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.f;
		}
		else if (_tmp52.str === new string("KeyG").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.g;
		}
		else if (_tmp52.str === new string("KeyH").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.h;
		}
		else if (_tmp52.str === new string("KeyI").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.i;
		}
		else if (_tmp52.str === new string("KeyJ").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.j;
		}
		else if (_tmp52.str === new string("KeyK").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.k;
		}
		else if (_tmp52.str === new string("KeyL").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.l;
		}
		else if (_tmp52.str === new string("KeyM").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.m;
		}
		else if (_tmp52.str === new string("KeyN").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.n;
		}
		else if (_tmp52.str === new string("KeyO").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.o;
		}
		else if (_tmp52.str === new string("KeyP").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.p;
		}
		else if (_tmp52.str === new string("KeyQ").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.q;
		}
		else if (_tmp52.str === new string("KeyR").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.r;
		}
		else if (_tmp52.str === new string("KeyS").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.s;
		}
		else if (_tmp52.str === new string("KeyT").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.t;
		}
		else if (_tmp52.str === new string("KeyU").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.u;
		}
		else if (_tmp52.str === new string("KeyV").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.v;
		}
		else if (_tmp52.str === new string("KeyW").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.w;
		}
		else if (_tmp52.str === new string("KeyX").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.x;
		}
		else if (_tmp52.str === new string("KeyY").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.y;
		}
		else if (_tmp52.str === new string("KeyZ").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.z;
		}
		else if (_tmp52.str === new string("BracketLeft").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.left_bracket;
		}
		else if (_tmp52.str === new string("BracketRight").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.right_bracket;
		}
		else if (_tmp52.str === new string("Backslash").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.backslash;
		}
		else if (_tmp52.str === new string("Backquote").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.grave_accent;
		}
		else if (_tmp52.str === new string("Escape").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.escape;
		}
		else if (_tmp52.str === new string("Enter").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.enter;
		}
		else if (_tmp52.str === new string("Tab").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.tab;
		}
		else if (_tmp52.str === new string("Backspace").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.backspace;
		}
		else if (_tmp52.str === new string("Insert").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.insert;
		}
		else if (_tmp52.str === new string("Delete").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.delete;
		}
		else if (_tmp52.str === new string("ArrowRight").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.right;
		}
		else if (_tmp52.str === new string("ArrowLeft").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.left;
		}
		else if (_tmp52.str === new string("ArrowUp").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.up;
		}
		else if (_tmp52.str === new string("ArrowDown").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.down;
		}
		else if (_tmp52.str === new string("PageUp").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.page_up;
		}
		else if (_tmp52.str === new string("PageDown").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.page_down;
		}
		else if (_tmp52.str === new string("Home").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.home;
		}
		else if (_tmp52.str === new string("End").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.end;
		}
		else if (_tmp52.str === new string("CapsLock").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.caps_lock;
		}
		else if (_tmp52.str === new string("ScrollLock").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.scroll_lock;
		}
		else if (_tmp52.str === new string("NumLock").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.num_lock;
		}
		else if (_tmp52.str === new string("PrintScreen").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.print_screen;
		}
		else if (_tmp52.str === new string("Pause").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.pause;
		}
		else if (_tmp52.str === new string("ShiftLeft").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.left_shift;
		}
		else if (_tmp52.str === new string("ShiftRight").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.right_shift;
		}
		else if (_tmp52.str === new string("AltLeft").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.left_alt;
		}
		else if (_tmp52.str === new string("AltRight").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.right_alt;
		}
		else if (_tmp52.str === new string("ControlLeft").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.left_control;
		}
		else if (_tmp52.str === new string("ControlRight").str) {
			/** @type {gg__KeyCode} */
			e.key_code = gg__KeyCode.right_control;
		}
		else {
			builtin__panic (new string(`todo: more keycodes (${new string(event.code)})`));
		};
		return e;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace gg */
/**
 * @constructor
 * @param {{color?: gx__Color, line_type?: gg__PenLineType, thickness?: int}} init
*/
function gg__PenConfig({ color = new gx__Color({}), line_type = gg__PenLineType.solid, thickness = new int(1) }) {
	this.color = color
	this.line_type = line_type
	this.thickness = thickness
};
gg__PenConfig.prototype = {
	toString() {
		return `gg__PenConfig { color: ${this["color"].toString()} , line_type: ${this["line_type"].toString()} , thickness: ${this["thickness"].toString()} }`
	},
	/** @type {gx__Color} */
	color: new gx__Color({}),
	/** @type {gg__PenLineType} */
	line_type: undefined,
	/** @type {int} */
	thickness: new int(0),
	$toJS() { return this; }
	};

/**
 * @constructor
 * @param {{width?: int, height?: int}} init
*/
function gg__Size({ width = new int(0), height = new int(0) }) {
	this.width = width
	this.height = height
};
gg__Size.prototype = {
	toString() {
		return `gg__Size { width: ${this["width"].toString()} , height: ${this["height"].toString()} }`
	},
	/** @type {int} */
	width: new int(0),
	/** @type {int} */
	height: new int(0),
	$toJS() { return this; }
	};

/** @namespace gg */
/* [heap] */
/**
 * @constructor
 * @param {{id?: int, width?: int, height?: int, nr_channels?: int, ok?: bool, data?: voidptr, ext?: string, path?: string}} init
*/
function gg__Image({ id = new int(0), width = new int(0), height = new int(0), nr_channels = new int(0), ok = new bool(false), data = new voidptr(null), ext = new string(""), path = new string("") }) {
	this.id = id
	this.width = width
	this.height = height
	this.nr_channels = nr_channels
	this.ok = ok
	this.data = data
	this.ext = ext
	this.path = path
};
gg__Image.prototype = {
	toString() {
		return `gg__Image { id: ${this["id"].toString()} , width: ${this["width"].toString()} , height: ${this["height"].toString()} , nr_channels: ${this["nr_channels"].toString()} , ok: ${this["ok"].toString()} , data: ${this["data"].toString()} , ext: "${this["ext"].toString()}", path: "${this["path"].toString()}"}`
	},
	/** @type {int} */
	id: new int(0),
	/** @type {int} */
	width: new int(0),
	/** @type {int} */
	height: new int(0),
	/** @type {int} */
	nr_channels: new int(0),
	/** @type {bool} */
	ok: new bool(false),
	/** @type {voidptr} */
	data: new voidptr(null),
	/** @type {string} */
	ext: new string(""),
	/** @type {string} */
	path: new string(""),
	$toJS() { return this; }
	};

/**
 * @function
 * @param {gg__DrawImageConfig} config
 * @returns {void}
*/
function gg__Context_draw_image_with_config(ctx, config) {
ctx = new $ref(ctx)
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace gg */
/**
 * @constructor
 * @param {{flip_x?: bool, flip_y?: bool, img?: gg__Image, img_id?: int, img_rect?: gg__Rect, part_rect?: gg__Rect, rotate?: int, z?: f32, color?: gx__Color}} init
*/
function gg__DrawImageConfig({ flip_x = new bool(false), flip_y = new bool(false), img = null, img_id = new int(0), img_rect = new gg__Rect({}), part_rect = new gg__Rect({}), rotate = new int(0), z = new f32(0), color = gx__white }) {
	this.flip_x = flip_x
	this.flip_y = flip_y
	this.img = img
	this.img_id = img_id
	this.img_rect = img_rect
	this.part_rect = part_rect
	this.rotate = rotate
	this.z = z
	this.color = color
};
gg__DrawImageConfig.prototype = {
	toString() {
		return `gg__DrawImageConfig { flip_x: ${this["flip_x"].toString()} , flip_y: ${this["flip_y"].toString()} , img: ${this["img"].toString()} , img_id: ${this["img_id"].toString()} , img_rect: ${this["img_rect"].toString()} , part_rect: ${this["part_rect"].toString()} , rotate: ${this["rotate"].toString()} , z: ${this["z"].toString()} , color: ${this["color"].toString()} }`
	},
	/** @type {bool} */
	flip_x: new bool(false),
	/** @type {bool} */
	flip_y: new bool(false),
	/** @type {gg__Image} */
	img: new gg__Image({}),
	/** @type {int} */
	img_id: new int(0),
	/** @type {gg__Rect} */
	img_rect: new gg__Rect({}),
	/** @type {gg__Rect} */
	part_rect: new gg__Rect({}),
	/** @type {int} */
	rotate: new int(0),
	/** @type {f32} */
	z: new f32(0),
	/** @type {gx__Color} */
	color: new gx__Color({}),
	$toJS() { return this; }
	};

/**
 * @constructor
 * @param {{x?: f32, y?: f32, width?: f32, height?: f32}} init
*/
function gg__Rect({ x = new f32(0), y = new f32(0), width = new f32(0), height = new f32(0) }) {
	this.x = x
	this.y = y
	this.width = width
	this.height = height
};
gg__Rect.prototype = {
	toString() {
		return `gg__Rect { x: ${this["x"].toString()} , y: ${this["y"].toString()} , width: ${this["width"].toString()} , height: ${this["height"].toString()} }`
	},
	/** @type {f32} */
	x: new f32(0),
	/** @type {f32} */
	y: new f32(0),
	/** @type {f32} */
	width: new f32(0),
	/** @type {f32} */
	height: new f32(0),
	$toJS() { return this; }
	};

/**
 * @function
 * @param {gg__Image} img
 * @returns {int}
*/
function gg__Context_cache_image(ctx, img) {
ctx = new $ref(ctx)
	try {
		array_push(ctx.val.image_cache,img,false);
		/** @type {int} */
		const image_idx = new int(new int( ctx.val.image_cache.len.valueOf() - new int(1).valueOf()));
		/** @type {int} */
		ctx.val.image_cache.arr.get(new int(image_idx.valueOf())).id = new int(image_idx);
		return image_idx;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} image_idx
 * @returns {gg__Image}
*/
function gg__Context_get_cached_image_by_idx(ctx, image_idx) {
ctx = new $ref(ctx)
	try {
		return new $ref(ctx.val.image_cache.arr.get(new int(image_idx.valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} image_idx
 * @returns {void}
*/
function gg__Context_remove_cached_image_by_idx(ctx, image_idx) {
ctx = new $ref(ctx)
	try {
		array_delete(ctx.val.image_cache,image_idx);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gg__Rect} img_rect
 * @param {gg__Rect} part_rect
 * @param {gg__Image} img_
 * @returns {void}
*/
function gg__Context_draw_image_part(ctx, img_rect, part_rect, img_) {
ctx = new $ref(ctx)
img_ = new $ref(img_)
	try {
		gg__Context_draw_image_with_config(ctx.valueOf(),(function() {
			let _tmp53 = new gg__DrawImageConfig({});
			_tmp53.img = img_;
			_tmp53.img_rect = img_rect;
			_tmp53.part_rect = part_rect;
			return _tmp53;
		})()
		);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f32} x
 * @param {f32} y
 * @param {f32} width
 * @param {f32} height
 * @param {gg__Image} img_
 * @returns {void}
*/
function gg__Context_draw_image_flipped(ctx, x, y, width, height, img_) {
ctx = new $ref(ctx)
img_ = new $ref(img_)
	try {
		gg__Context_draw_image_with_config(ctx.valueOf(),(function() {
			let _tmp54 = new gg__DrawImageConfig({});
			_tmp54.flip_x = new bool(true);
			_tmp54.img = img_;
			_tmp54.img_rect = (function() {
				let _tmp55 = new gg__Rect({});
				_tmp55.x = x;
				_tmp55.y = y;
				_tmp55.width = width;
				_tmp55.height = height;
				return _tmp55;
			})()
			;
			return _tmp54;
		})()
		);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f32} x
 * @param {f32} y
 * @param {f32} width
 * @param {f32} height
 * @param {int} id
 * @returns {void}
*/
function gg__Context_draw_image_by_id(ctx, x, y, width, height, id) {
ctx = new $ref(ctx)
	try {
		gg__Context_draw_image_with_config(ctx.valueOf(),(function() {
			let _tmp56 = new gg__DrawImageConfig({});
			_tmp56.img_id = id;
			_tmp56.img_rect = (function() {
				let _tmp57 = new gg__Rect({});
				_tmp57.x = x;
				_tmp57.y = y;
				_tmp57.width = width;
				_tmp57.height = height;
				return _tmp57;
			})()
			;
			return _tmp56;
		})()
		);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f32} x
 * @param {f32} y
 * @param {f32} z
 * @param {f32} width
 * @param {f32} height
 * @param {gg__Image} img_
 * @returns {void}
*/
function gg__Context_draw_image_3d(ctx, x, y, z, width, height, img_) {
ctx = new $ref(ctx)
img_ = new $ref(img_)
	try {
		gg__Context_draw_image_with_config(ctx.valueOf(),(function() {
			let _tmp58 = new gg__DrawImageConfig({});
			_tmp58.img = img_;
			_tmp58.img_rect = (function() {
				let _tmp59 = new gg__Rect({});
				_tmp59.x = x;
				_tmp59.y = y;
				_tmp59.width = width;
				_tmp59.height = height;
				return _tmp59;
			})()
			;
			_tmp58.z = z;
			return _tmp58;
		})()
		);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace gg */
function gg__Color(val) { return val;  }
/** @namespace gg */
/** @namespace gg */
/* [heap] */
/**
 * @constructor
 * @param {{stop_at_frame?: i64, screenshot_frames?: Array_u64, screenshot_folder?: string, screenshot_prefix?: string}} init
*/
function gg__SSRecorderSettings({ stop_at_frame = new int(-1), screenshot_frames = empty_array(), screenshot_folder = new string(""), screenshot_prefix = new string("") }) {
	this.stop_at_frame = stop_at_frame
	this.screenshot_frames = screenshot_frames
	this.screenshot_folder = screenshot_folder
	this.screenshot_prefix = screenshot_prefix
};
gg__SSRecorderSettings.prototype = {
	toString() {
		return `gg__SSRecorderSettings { stop_at_frame: ${this["stop_at_frame"].toString()} , screenshot_frames: ${this["screenshot_frames"].toString()} , screenshot_folder: "${this["screenshot_folder"].toString()}", screenshot_prefix: "${this["screenshot_prefix"].toString()}"}`
	},
	/** @type {i64} */
	stop_at_frame: new i64(0),
	/** @type {Array_u64} */
	screenshot_frames: empty_array(),
	/** @type {string} */
	screenshot_folder: new string(""),
	/** @type {string} */
	screenshot_prefix: new string(""),
	$toJS() { return this; }
	};

/** @namespace gg */
/**
 * @function
 * @param {int} x
 * @param {int} y
 * @param {string} text_
 * @param {gx__TextCfg} cfg
 * @returns {void}
*/
function gg__Context_draw_text(ctx, x, y, text_, cfg) {
ctx = new $ref(ctx)
	try {
		/** @type {js__dom__FillStyle} */
		ctx.val.context.fillStyle = gx__Color_to_css_string(cfg.color,).str;
		/** @type {String} */
		ctx.val.context.font = gx__TextCfg_to_css_string(cfg,).str;
		ctx.val.context.fillText(text_.str, x, y);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace gg */
/**
 * @constructor
 * @param {{font_path?: string, custom_bold_font_path?: string, scale?: f32, font_size?: int, bytes_normal?: Array_u8, bytes_bold?: Array_u8, bytes_mono?: Array_u8, bytes_italic?: Array_u8}} init
*/
function gg__FTConfig({ font_path = new string(""), custom_bold_font_path = new string(""), scale = new f32(1.0), font_size = new int(0), bytes_normal = empty_array(), bytes_bold = empty_array(), bytes_mono = empty_array(), bytes_italic = empty_array() }) {
	this.font_path = font_path
	this.custom_bold_font_path = custom_bold_font_path
	this.scale = scale
	this.font_size = font_size
	this.bytes_normal = bytes_normal
	this.bytes_bold = bytes_bold
	this.bytes_mono = bytes_mono
	this.bytes_italic = bytes_italic
};
gg__FTConfig.prototype = {
	toString() {
		return `gg__FTConfig { font_path: "${this["font_path"].toString()}", custom_bold_font_path: "${this["custom_bold_font_path"].toString()}", scale: ${this["scale"].toString()} , font_size: ${this["font_size"].toString()} , bytes_normal: ${this["bytes_normal"].toString()} , bytes_bold: ${this["bytes_bold"].toString()} , bytes_mono: ${this["bytes_mono"].toString()} , bytes_italic: ${this["bytes_italic"].toString()} }`
	},
	/** @type {string} */
	font_path: new string(""),
	/** @type {string} */
	custom_bold_font_path: new string(""),
	/** @type {f32} */
	scale: new f32(0),
	/** @type {int} */
	font_size: new int(0),
	/** @type {Array_u8} */
	bytes_normal: empty_array(),
	/** @type {Array_u8} */
	bytes_bold: empty_array(),
	/** @type {Array_u8} */
	bytes_mono: empty_array(),
	/** @type {Array_u8} */
	bytes_italic: empty_array(),
	$toJS() { return this; }
	};

/**
 * @constructor
 * @param {{x?: int, y?: int, text?: string, cfg?: gx__TextCfg}} init
*/
function gg__StringToRender({ x = new int(0), y = new int(0), text = new string(""), cfg = new gx__TextCfg({}) }) {
	this.x = x
	this.y = y
	this.text = text
	this.cfg = cfg
};
gg__StringToRender.prototype = {
	toString() {
		return `gg__StringToRender { x: ${this["x"].toString()} , y: ${this["y"].toString()} , text: "${this["text"].toString()}", cfg: ${this["cfg"].toString()} }`
	},
	/** @type {int} */
	x: new int(0),
	/** @type {int} */
	y: new int(0),
	/** @type {string} */
	text: new string(""),
	/** @type {gx__TextCfg} */
	cfg: new gx__TextCfg({}),
	$toJS() { return this; }
	};

/** @namespace gg */
/* [inline] */
/**
 * @function
 * @returns {bool}
*/
function gg__MouseButtons_is_empty(e) {
e = new $ref(e)
	try {
		return new bool(new int((e).valueOf()).valueOf() == new int(0).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {gg__MouseButtons} flag
 * @returns {bool}
*/
function gg__MouseButtons_has(e, flag) {
e = new $ref(e)
	try {
		return new bool((new int( new int((e).valueOf()).valueOf() & (new int(flag)).valueOf())).valueOf() != new int(0).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {gg__MouseButtons} flag
 * @returns {bool}
*/
function gg__MouseButtons_all(e, flag) {
e = new $ref(e)
	try {
		return new bool((new int( new int((e).valueOf()).valueOf() & (new int(flag)).valueOf())).valueOf() == new int(flag).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {gg__MouseButtons} flag
 * @returns {void}
*/
function gg__MouseButtons_set(e, flag) {
e = new $ref(e)
	try {
		{
			/** @type {gg__MouseButtons} */
			(e).valueOf() = new gg__MouseButtons(new int( new int((e).valueOf()).valueOf() | (new int(flag)).valueOf()));
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {gg__MouseButtons} flag
 * @returns {void}
*/
function gg__MouseButtons_clear(e, flag) {
e = new $ref(e)
	try {
		{
			/** @type {gg__MouseButtons} */
			(e).valueOf() = new gg__MouseButtons(new int( new int((e).valueOf()).valueOf() & ~(new int(flag)).val .valueOf()));
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {gg__MouseButtons} flag
 * @returns {void}
*/
function gg__MouseButtons_toggle(e, flag) {
e = new $ref(e)
	try {
		{
			/** @type {gg__MouseButtons} */
			(e).valueOf() = new gg__MouseButtons(new int( new int((e).valueOf()).valueOf() ^ (new int(flag)).valueOf()));
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {bool}
*/
function gg__Modifier_is_empty(e) {
e = new $ref(e)
	try {
		return new bool(new int((e).valueOf()).valueOf() == new int(0).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {gg__Modifier} flag
 * @returns {bool}
*/
function gg__Modifier_has(e, flag) {
e = new $ref(e)
	try {
		return new bool((new int( new int((e).valueOf()).valueOf() & (new int(flag)).valueOf())).valueOf() != new int(0).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {gg__Modifier} flag
 * @returns {bool}
*/
function gg__Modifier_all(e, flag) {
e = new $ref(e)
	try {
		return new bool((new int( new int((e).valueOf()).valueOf() & (new int(flag)).valueOf())).valueOf() == new int(flag).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {gg__Modifier} flag
 * @returns {void}
*/
function gg__Modifier_set(e, flag) {
e = new $ref(e)
	try {
		{
			/** @type {gg__Modifier} */
			(e).valueOf() = new gg__Modifier(new int( new int((e).valueOf()).valueOf() | (new int(flag)).valueOf()));
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {gg__Modifier} flag
 * @returns {void}
*/
function gg__Modifier_clear(e, flag) {
e = new $ref(e)
	try {
		{
			/** @type {gg__Modifier} */
			(e).valueOf() = new gg__Modifier(new int( new int((e).valueOf()).valueOf() & ~(new int(flag)).val .valueOf()));
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {gg__Modifier} flag
 * @returns {void}
*/
function gg__Modifier_toggle(e, flag) {
e = new $ref(e)
	try {
		{
			/** @type {gg__Modifier} */
			(e).valueOf() = new gg__Modifier(new int( new int((e).valueOf()).valueOf() ^ (new int(flag)).valueOf()));
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace rand.seed */
/* [inline] */
/**
 * @function
 * @param {u32} prev
 * @returns {u32}
*/
function rand__seed__nr_next(prev) {
	try {
		return new u32( new u32( prev.valueOf() * new int(1664525).valueOf()).valueOf() + new int(1013904223).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} count
 * @returns {Array_u32}
*/
function rand__seed__time_seed_array(count) {
	try {
		/** @type {u64} */
		const ctime = new u64(time__sys_mono_now());
		/** @type {u32} */
		let seed = new u32(new u32(new u64( BigInt(new u64( BigInt(ctime.valueOf()) >> BigInt(new int(32).valueOf())).valueOf()) ^ BigInt((new u64( BigInt(ctime.valueOf()) & BigInt(new int(0x00000000FFFFFFFF).valueOf()))).valueOf()))));
		/** @type {Array_u32} */
		let seed_data = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		for (let _tmp60 = new int(0); _tmp60 < count; _tmp60 = new int(_tmp60 + 1)) {
			try { 
				/** @type {u32} */
				seed = new u32(rand__seed__nr_next(seed));
				array_push(seed_data,rand__seed__nr_next(seed),false);
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return seed_data;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [manualfree] */
/**
 * @function
 * @returns {u32}
*/
function rand__seed__time_seed_32() {
	try {
		/** @type {Array_u32} */
		const sa = rand__seed__time_seed_array(new int(1));
		/** @type {u32} */
		const res = new u32(sa.arr.get(new int(new int(0).valueOf())));
		array_free(sa,);
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [manualfree] */
/**
 * @function
 * @returns {u64}
*/
function rand__seed__time_seed_64() {
	try {
		/** @type {Array_u32} */
		const seed_data = rand__seed__time_seed_array(new int(2));
		/** @type {u64} */
		const lower = new u64(new u64(seed_data.arr.get(new int(new int(0).valueOf()))));
		/** @type {u64} */
		const upper = new u64(new u64(seed_data.arr.get(new int(new int(1).valueOf()))));
		array_free(seed_data,);
		/** @type {u64} */
		const res = new u64(new u64( BigInt(lower.valueOf()) | BigInt((new u64( BigInt(upper.valueOf()) << BigInt(new int(32).valueOf()))).valueOf())));
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace rand.config */
/* [params] */
/**
 * @constructor
 * @param {{seed_?: Array_u32}} init
*/
function rand__config__PRNGConfigStruct({ seed_ = rand__seed__time_seed_array(new int(2)) }) {
	this.seed_ = seed_
};
rand__config__PRNGConfigStruct.prototype = {
	toString() {
		return `rand__config__PRNGConfigStruct { seed_: ${this["seed_"].toString()} }`
	},
	/** @type {Array_u32} */
	seed_: empty_array(),
	$toJS() { return this; }
	};

/* [params] */
/**
 * @constructor
 * @param {{mu?: f64, sigma?: f64}} init
*/
function rand__config__NormalConfigStruct({ mu = new f32(0.0), sigma = new f32(1.0) }) {
	this.mu = mu
	this.sigma = sigma
};
rand__config__NormalConfigStruct.prototype = {
	toString() {
		return `rand__config__NormalConfigStruct { mu: ${this["mu"].toString()} , sigma: ${this["sigma"].toString()} }`
	},
	/** @type {f64} */
	mu: new f64(0),
	/** @type {f64} */
	sigma: new f64(0),
	$toJS() { return this; }
	};

/* [params] */
/**
 * @constructor
 * @param {{start?: int, end?: int}} init
*/
function rand__config__ShuffleConfigStruct({ start = new int(0), end = new int(0) }) {
	this.start = start
	this.end = end
};
rand__config__ShuffleConfigStruct.prototype = {
	toString() {
		return `rand__config__ShuffleConfigStruct { start: ${this["start"].toString()} , end: ${this["end"].toString()} }`
	},
	/** @type {int} */
	start: new int(0),
	/** @type {int} */
	end: new int(0),
	$toJS() { return this; }
	};

/** @namespace rand.wyrand */
/**
 * @function
 * @returns {void}
*/
function rand__wyrand__WyRandRNG_free(r) {
r = new $ref(r)
	try {
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace rand.wyrand */
/** @constant {u64} */
let rand__wyrand__wyp0 = undefined;
/** @constant {u64} */
let rand__wyrand__wyp1 = undefined;

/** @constant {int} */
const rand__wyrand__seed_len = new int(2);

/**
 * @constructor
 * @param {{state?: u64, bytes_left?: int, buffer?: u64}} init
*/
function rand__wyrand__WyRandRNG({ state = rand__seed__time_seed_64(), bytes_left = new int(0), buffer = new u64(0) }) {
	this.state = state
	this.bytes_left = bytes_left
	this.buffer = buffer
};
rand__wyrand__WyRandRNG.prototype = {
	...rand__buffer__PRNGBuffer.prototype,
	toString() {
		return `rand__wyrand__WyRandRNG { state: ${this["state"].toString()} , bytes_left: ${this["bytes_left"].toString()} , buffer: ${this["buffer"].toString()} }`
	},
	/** @type {u64} */
	state: new u64(0),
	/** @type {int} */
	bytes_left: new int(0),
	/** @type {u64} */
	buffer: new u64(0),
	$toJS() { return this; }
	};

/**
 * @function
 * @param {Array_u32} seed_data
 * @returns {void}
*/
function rand__wyrand__WyRandRNG_seed(rng, seed_data) {
rng = new $ref(rng)
	try {
		if ((new bool(seed_data.len.valueOf() != new int(2).valueOf())).valueOf()) {
			builtin__eprintln (new string("WyRandRNG needs 2 32-bit unsigned integers as the seed."));
			builtin__exit(new int(1));
		}
		/** @type {u64} */
		rng.val.state = new u64(new u64( BigInt(seed_data.arr.get(new int(new int(0).valueOf())).valueOf()) | BigInt((new u64( BigInt(new u64(seed_data.arr.get(new int(new int(1).valueOf()))).valueOf()) << BigInt(new int(32).valueOf()))).valueOf())));
		/** @type {int} */
		rng.val.bytes_left = new int(new int(0));
		/** @type {u64} */
		rng.val.buffer = new u64(new int(0));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {u8}
*/
function rand__wyrand__WyRandRNG_u8(rng) {
rng = new $ref(rng)
	try {
		if ((new bool(rng.val.bytes_left.valueOf() >= new int(1).valueOf())).valueOf()) {
			/** @type {int} */
			rng.val.bytes_left.val = Math.floor(rng.val.bytes_left - new int(new int(1)));
			/** @type {u8} */
			const value = new u8(new u8(rng.val.buffer));
			/** @type {u64} */
			rng.val.buffer.val = rng.val.buffer >> new u64(new int(8));
			return value;
		}
		/** @type {u64} */
		rng.val.buffer = new u64(rand__wyrand__WyRandRNG_u64(rng.valueOf(),));
		/** @type {int} */
		rng.val.bytes_left = new int(new int(7));
		/** @type {u8} */
		const value = new u8(new u8(rng.val.buffer));
		/** @type {u64} */
		rng.val.buffer.val = rng.val.buffer >> new u64(new int(8));
		return value;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {u16}
*/
function rand__wyrand__WyRandRNG_u16(rng) {
rng = new $ref(rng)
	try {
		if ((new bool(rng.val.bytes_left.valueOf() >= new int(2).valueOf())).valueOf()) {
			/** @type {int} */
			rng.val.bytes_left.val = Math.floor(rng.val.bytes_left - new int(new int(2)));
			/** @type {u16} */
			const value = new u16(new u16(rng.val.buffer));
			/** @type {u64} */
			rng.val.buffer.val = rng.val.buffer >> new u64(new int(16));
			return value;
		}
		/** @type {u64} */
		const ans = new u64(rand__wyrand__WyRandRNG_u64(rng.valueOf(),));
		/** @type {u64} */
		rng.val.buffer = new u64(new u64( BigInt(ans.valueOf()) >> BigInt(new int(16).valueOf())));
		/** @type {int} */
		rng.val.bytes_left = new int(new int(6));
		return new u16(ans);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {u32}
*/
function rand__wyrand__WyRandRNG_u32(rng) {
rng = new $ref(rng)
	try {
		if ((new bool(rng.val.bytes_left.valueOf() >= new int(4).valueOf())).valueOf()) {
			/** @type {int} */
			rng.val.bytes_left.val = Math.floor(rng.val.bytes_left - new int(new int(4)));
			/** @type {u32} */
			const value = new u32(new u32(rng.val.buffer));
			/** @type {u64} */
			rng.val.buffer.val = rng.val.buffer >> new u64(new int(32));
			return value;
		}
		/** @type {u64} */
		const ans = new u64(rand__wyrand__WyRandRNG_u64(rng.valueOf(),));
		/** @type {u64} */
		rng.val.buffer = new u64(new u64( BigInt(ans.valueOf()) >> BigInt(new int(32).valueOf())));
		/** @type {int} */
		rng.val.bytes_left = new int(new int(4));
		return new u32(ans);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {u64}
*/
function rand__wyrand__WyRandRNG_u64(rng) {
rng = new $ref(rng)
	try {
		{
			/** @type {u64} */
			let seed1 = new u64(rng.val.state);
			/** @type {u64} */
			seed1.val = seed1 + new u64(rand__wyrand__wyp0);
			/** @type {u64} */
			rng.val.state = new u64(seed1);
			return hash__wymum(new u64( BigInt(seed1.valueOf()) ^ BigInt(rand__wyrand__wyp1.valueOf())), seed1);
		}
		
		return new int(0);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {int}
*/
function rand__wyrand__WyRandRNG_block_size(rng) {
rng = new $ref(rng)
	try {
		return new int(64);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace rand */
/** @constant {f64} */
const rand__sqrt2 = new f32(1.41421356237309504880168872420969807856967187537694807317667974);

/* [inline] */
/**
 * @function
 * @param {f64} a
 * @returns {f64}
*/
function rand__msqrt(a) {
	try {
		if ((new bool(a.valueOf() == new int(0).valueOf())).valueOf()) {
			return a;
		}
		/** @type {f64} */
		let x = new f64(a);
		let [z, ex] = rand__frexp(x);
		/** @type {f64} */
		const w = new f64(x);
		/** @type {f64} */
		x = new f64(new f64( new f32(4.173075996388649989089e-1).valueOf() + new f64( new f32(5.9016206709064458299663e-1).valueOf() * z.valueOf()).valueOf()));
		if ((new bool((new int( ex.valueOf() & new int(1).valueOf())).valueOf() != new int(0).valueOf())).valueOf()) {
			/** @type {f64} */
			x.val = Math.floor(x * new f64(rand__sqrt2));
		}
		/** @type {f64} */
		x = new f64(rand__scalbn(x, new int( ex.valueOf() >> new int(1).valueOf())));
		/** @type {f64} */
		x = new f64(new f64( new f32(0.5).valueOf() * (new f64( x.valueOf() + new f64( w.valueOf() / x.valueOf()).valueOf())).valueOf()));
		/** @type {f64} */
		x = new f64(new f64( new f32(0.5).valueOf() * (new f64( x.valueOf() + new f64( w.valueOf() / x.valueOf()).valueOf())).valueOf()));
		/** @type {f64} */
		x = new f64(new f64( new f32(0.5).valueOf() * (new f64( x.valueOf() + new f64( w.valueOf() / x.valueOf()).valueOf())).valueOf()));
		return x;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} a
 * @returns {f64}
*/
function rand__mlog(a) {
	try {
		/** @type {f64} */
		const ln2_lo = new f64(new f32(1.90821492927058770002e-10));
		/** @type {f64} */
		const ln2_hi = new f64(new f32(0.693147180369123816490));
		/** @type {f64} */
		const l1 = new f64(new f32(0.6666666666666735130));
		/** @type {f64} */
		const l2 = new f64(new f32(0.3999999999940941908));
		/** @type {f64} */
		const l3 = new f64(new f32(0.2857142874366239149));
		/** @type {f64} */
		const l4 = new f64(new f32(0.2222219843214978396));
		/** @type {f64} */
		const l5 = new f64(new f32(0.1818357216161805012));
		/** @type {f64} */
		const l6 = new f64(new f32(0.1531383769920937332));
		/** @type {f64} */
		const l7 = new f64(new f32(0.1479819860511658591));
		/** @type {f64} */
		const x = new f64(a);
		let [f1, ki] = rand__frexp(x);
		if ((new bool(f1.valueOf() < new float_literal( rand__sqrt2.valueOf() / new int(2).valueOf()).valueOf())).valueOf()) {
			/** @type {f64} */
			f1.val = Math.floor(f1 * new f64(new int(2)));
			ki.val --;
		}
		/** @type {f64} */
		const f = new f64(new f64( f1.valueOf() - new int(1).valueOf()));
		/** @type {f64} */
		const k = new f64(new f64(ki));
		/** @type {f64} */
		const s = new f64(new f64( f.valueOf() / (new f64( new int(2).valueOf() + f.valueOf())).valueOf()));
		/** @type {f64} */
		const s2 = new f64(new f64( s.valueOf() * s.valueOf()));
		/** @type {f64} */
		const s4 = new f64(new f64( s2.valueOf() * s2.valueOf()));
		/** @type {f64} */
		const t1 = new f64(new f64( s2.valueOf() * (new f64( l1.valueOf() + new f64( s4.valueOf() * (new f64( l3.valueOf() + new f64( s4.valueOf() * (new f64( l5.valueOf() + new f64( s4.valueOf() * l7.valueOf()).valueOf())).valueOf()).valueOf())).valueOf()).valueOf())).valueOf()));
		/** @type {f64} */
		const t2 = new f64(new f64( s4.valueOf() * (new f64( l2.valueOf() + new f64( s4.valueOf() * (new f64( l4.valueOf() + new f64( s4.valueOf() * l6.valueOf()).valueOf())).valueOf()).valueOf())).valueOf()));
		/** @type {f64} */
		const r = new f64(new f64( t1.valueOf() + t2.valueOf()));
		/** @type {f64} */
		const hfsq = new f64(new f64( new f64( new f32(0.5).valueOf() * f.valueOf()).valueOf() * f.valueOf()));
		return new f64( new f64( k.valueOf() * ln2_hi.valueOf()).valueOf() - (new f64( (new f64( hfsq.valueOf() - (new f64( new f64( s.valueOf() * (new f64( hfsq.valueOf() + r.valueOf())).valueOf()).valueOf() + new f64( k.valueOf() * ln2_lo.valueOf()).valueOf())).valueOf())).valueOf() - f.valueOf())).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} x
 * @returns {multi_return_f64_int}
*/
function rand__frexp(x) {
	try {
		/** @type {u64} */
		let y = new u64(rand__f64_bits(x));
		/** @type {int} */
		const ee = new int(new int(new u64( BigInt((new u64( BigInt(y.valueOf()) >> BigInt(new int(52).valueOf()))).valueOf()) & BigInt(new int(0x7ff).valueOf()))));
		if ((new bool(ee.valueOf() == new int(0).valueOf())).valueOf()) {
			if ((new bool(x.valueOf() != new f32(0.0).valueOf())).valueOf()) {
				/** @type {f64} */
				const x1p64 = new f64(rand__f64_from_bits(new u64(BigInt(0x43f0000000000000n))));
				let [z, e_] = rand__frexp(new f64( x.valueOf() * x1p64.valueOf()));
				return [z, new int( e_.valueOf() - new int(64).valueOf())];
			}
			return [x, new int(0)];
		} else if ((new bool(ee.valueOf() == new int(0x7ff).valueOf())).valueOf()) {
			return [x, new int(0)];
		}
		/** @type {int} */
		const e_ = new int(new int( ee.valueOf() - new int(0x3fe).valueOf()));
		/** @type {u64} */
		y.val = y & new u64(new u64(BigInt(0x800fffffffffffffn)));
		/** @type {u64} */
		y.val = y | new u64(new u64(BigInt(0x3fe0000000000000n)));
		return [rand__f64_from_bits(y), e_];
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} x
 * @param {int} n_
 * @returns {f64}
*/
function rand__scalbn(x, n_) {
	try {
		/** @type {int} */
		let n = new int(n_);
		/** @type {f64} */
		const x1p1023 = new f64(rand__f64_from_bits(new u64(BigInt(0x7fe0000000000000n))));
		/** @type {f64} */
		const x1p53 = new f64(rand__f64_from_bits(new u64(BigInt(0x4340000000000000n))));
		/** @type {f64} */
		const x1p_1022 = new f64(rand__f64_from_bits(new u64(BigInt(0x0010000000000000n))));
		/** @type {f64} */
		let y = new f64(x);
		if ((new bool(n.valueOf() > new int(1023).valueOf())).valueOf()) {
			/** @type {f64} */
			y.val = Math.floor(y * new f64(x1p1023));
			/** @type {int} */
			n.val = Math.floor(n - new int(new int(1023)));
			if ((new bool(n.valueOf() > new int(1023).valueOf())).valueOf()) {
				/** @type {f64} */
				y.val = Math.floor(y * new f64(x1p1023));
				/** @type {int} */
				n.val = Math.floor(n - new int(new int(1023)));
				if ((new bool(n.valueOf() > new int(1023).valueOf())).valueOf()) {
					/** @type {int} */
					n = new int(new int(1023));
				}
			}
		} else if ((new bool(n.valueOf() < new int(-1022).valueOf())).valueOf()) {
			/** @type {f64} */
			y.val = Math.floor(y * new f64(new f64( x1p_1022.valueOf() * x1p53.valueOf())));
			/** @type {int} */
			n.val = Math.floor(n + new int(new int(969)));
			if ((new bool(n.valueOf() < new int(-1022).valueOf())).valueOf()) {
				/** @type {f64} */
				y.val = Math.floor(y * new f64(new f64( x1p_1022.valueOf() * x1p53.valueOf())));
				/** @type {int} */
				n.val = Math.floor(n + new int(new int(969)));
				if ((new bool(n.valueOf() < new int(-1022).valueOf())).valueOf()) {
					/** @type {int} */
					n = new int(new int(-1022));
				}
			}
		}
		return new f64( y.valueOf() * rand__f64_from_bits(new u64( BigInt(new u64((new int( new int(0x3ff).valueOf() + n.valueOf()))).valueOf()) << BigInt(new int(52).valueOf()))).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u64} b
 * @returns {f64}
*/
function rand__f64_from_bits(b) {
	try {
		return (new $ref(new f64(new $ref(b)))).valueOf();
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {f64} f
 * @returns {u64}
*/
function rand__f64_bits(f) {
	try {
		return (new $ref(new u64(new $ref(f)))).valueOf();
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace rand */
/**
 * @function
 * @returns {void}
*/
function rand__init() {
	try {
		/** @type {rand__PRNG} */
		default_rng.val = rand__new_default(new rand__config__PRNGConfigStruct({})).val;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {rand__PRNG} rng
 * @param {string} charset
 * @param {int} len
 * @returns {string}
*/
function rand__internal_string_from_set(rng, charset, len) {
	try {
		/** @type {string} */
		const result = new string(new string(""));
		
		const characters = charset.str;
		const charactersLength = characters.length;
		for (let i = 0;i < len.val;i++)
		result.str += characters.charAt(Math.random() * charactersLength);
		return result;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @constant {string} */
const rand__ulid_encoding = new string("0123456789ABCDEFGHJKMNPQRSTVWXYZ");

/**
 * @function
 * @param {rand__PRNG} rng
 * @param {u64} unix_time_milli
 * @returns {string}
*/
function rand__internal_ulid_at_millisecond(rng, unix_time_milli) {
	try {
		/** @type {Array_u8} */
		let buf = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		/** @type {u64} */
		let t = new u64(unix_time_milli);
		/** @type {int} */
		let i = new int(new int(9));
		while (+new bool(i.valueOf() >= new int(0).valueOf())) {
			try { 
				/** @type {u8} */
				buf.arr.set(new int(i.valueOf()),new u8(new u8(rand__ulid_encoding.str.charCodeAt(new int(new u64( BigInt(t.valueOf()) & BigInt(new int(0x1f).valueOf())))))));
				/** @type {u64} */
				t = new u64(new u64( BigInt(t.valueOf()) >> BigInt(new int(5).valueOf())));
				i.val --;
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {u64} */
		let x = new u64(rng.valueOf().u64());
		/** @type {int} */
		i = new int(new int(10));
		while (+new bool(i.valueOf() < new int(19).valueOf())) {
			try { 
				/** @type {u8} */
				buf.arr.set(new int(i.valueOf()),new u8(new u8(rand__ulid_encoding.str.charCodeAt(new int(new u64( BigInt(x.valueOf()) & BigInt(new int(0x1f).valueOf())))))));
				/** @type {u64} */
				x = new u64(new u64( BigInt(x.valueOf()) >> BigInt(new int(5).valueOf())));
				i.val ++;
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {u64} */
		x = new u64(rng.valueOf().u64());
		while (+new bool(i.valueOf() < new int(26).valueOf())) {
			try { 
				/** @type {u8} */
				buf.arr.set(new int(i.valueOf()),new u8(new u8(rand__ulid_encoding.str.charCodeAt(new int(new u64( BigInt(x.valueOf()) & BigInt(new int(0x1f).valueOf())))))));
				/** @type {u64} */
				x = new u64(new u64( BigInt(x.valueOf()) >> BigInt(new int(5).valueOf())));
				i.val ++;
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {string} */
		const res = new string(new string(""));
		builtin__println (Array_u8_str(buf));
		res.str = buf.arr.arr.map(String.fromCharCode).join('')
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {rand__PRNG} rng
 * @param {Array_u8} buf
 * @returns {void}
*/
function rand__read_internal(rng, buf) {
buf = new $ref(buf)
	try {
		for (let i = new int(0); i < buf.val.len; i = new int(i + 1)) {
			try { 
				/** @type {u8} */
				buf.valueOf().arr.set(new int(i.valueOf()),new u8(rng.valueOf().u8()));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace rand */
/**
 * @interface rand__PRNG
 * @typedef rand__PRNG
 * @property {(seed_data: Array_u32) => void} seed
 * @property {() => u8} u8
 * @property {() => u16} u16
 * @property {() => u32} u32
 * @property {() => u64} u64
 * @property {() => int} block_size
 * @property {() => void} free
 */

function rand__PRNG (arg) { return new $ref(arg); }
/* [inline] */
/**
 * @function
 * @param {int} bytes_needed
 * @returns {Array_u8}
*/
function rand__PRNG_bytes(rng, bytes_needed) {
	try {
		if ((new bool(bytes_needed.valueOf() < new int(0).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("can not read < 0 random bytes"))});
		}
		/** @type {Array_u8} */
		let buffer = new array(new array_buffer({arr: (function(length) {
				const _tmp61 = [];
				for (let it = 0; it < length; it++) {
					_tmp61.push(new u8(0));
				};
				return _tmp61;
			})(bytes_needed),len: new int(bytes_needed), cap: new int(bytes_needed)}));
		rand__read_internal(rng, buffer);
		const _tmp62 = new _option({});
		_tmp62.state = new u8(0);_tmp62.data = buffer
		return _tmp62;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_u8} buf
 * @returns {void}
*/
function rand__PRNG_read(rng, buf) {
buf = new $ref(buf)
	try {
		rand__read_internal(rng, buf);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u32} max
 * @returns {u32}
*/
function rand__PRNG_u32n(rng, max) {
	try {
		if ((new bool(max.valueOf() == new int(0).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max must be positive integer"))});
		}
		/** @type {int} */
		const bit_len = new int(math__bits__len_32(max));
		if ((new bool(bit_len.valueOf() == new int(32).valueOf())).valueOf()) {
			while (true) {
				try { 
					/** @type {u32} */
					const value = new u32(rng.valueOf().u32());
					if ((new bool(value.valueOf() < max.valueOf())).valueOf()) {
						const _tmp63 = new _option({});
						_tmp63.state = new u8(0);_tmp63.data = value
						return _tmp63;}
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
		} else {
			/** @type {u32} */
			const mask = new u32(new u32( (new u32( new int(1).valueOf() << (new int( bit_len.valueOf() + new int(1).valueOf())).valueOf())).valueOf() - new int(1).valueOf()));
			while (true) {
				try { 
					/** @type {u32} */
					const value = new u32(new u32( rng.valueOf().u32().valueOf() & mask.valueOf()));
					if ((new bool(value.valueOf() < max.valueOf())).valueOf()) {
						const _tmp64 = new _option({});
						_tmp64.state = new u8(0);_tmp64.data = value
						return _tmp64;}
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
		}
		const _tmp65 = new _option({});
		_tmp65.state = new u8(0);_tmp65.data = new int(0)
		return _tmp65;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u64} max
 * @returns {u64}
*/
function rand__PRNG_u64n(rng, max) {
	try {
		if ((new bool(max.valueOf() == new int(0).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max must be positive integer"))});
		}
		/** @type {int} */
		const bit_len = new int(math__bits__len_64(max));
		if ((new bool(bit_len.valueOf() == new int(64).valueOf())).valueOf()) {
			while (true) {
				try { 
					/** @type {u64} */
					const value = new u64(rng.valueOf().u64());
					if ((new bool(value.valueOf() < max.valueOf())).valueOf()) {
						const _tmp66 = new _option({});
						_tmp66.state = new u8(0);_tmp66.data = value
						return _tmp66;}
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
		} else {
			/** @type {u64} */
			const mask = new u64(new u64( BigInt((new u64( BigInt(new u64(BigInt(1n)).valueOf()) << BigInt((new int( bit_len.valueOf() + new int(1).valueOf())).valueOf()))).valueOf()) - BigInt(new int(1).valueOf())));
			while (true) {
				try { 
					/** @type {u64} */
					const value = new u64(new u64( BigInt(rng.valueOf().u64().valueOf()) & BigInt(mask.valueOf())));
					if ((new bool(value.valueOf() < max.valueOf())).valueOf()) {
						const _tmp67 = new _option({});
						_tmp67.state = new u8(0);_tmp67.data = value
						return _tmp67;}
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
		}
		const _tmp68 = new _option({});
		_tmp68.state = new u8(0);_tmp68.data = new u64(BigInt(0n))
		return _tmp68;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u32} min
 * @param {u32} max
 * @returns {u32}
*/
function rand__PRNG_u32_in_range(rng, min, max) {
	try {
		if ((new bool(max.valueOf() <= min.valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max must be greater than min"))});
		}
		const _tmp69 = new _option({});
		_tmp69.state = new u8(0);_tmp69.data = new u32( min.valueOf() + (function(){
			try {
				return unwrap(rand__PRNG_u32n(rng.valueOf(),new u32( max.valueOf() - min.valueOf())))
			} catch(err) {
				js_throw(err)
			}
		})().valueOf())
		return _tmp69;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {u64} min
 * @param {u64} max
 * @returns {u64}
*/
function rand__PRNG_u64_in_range(rng, min, max) {
	try {
		if ((new bool(max.valueOf() <= min.valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max must be greater than min"))});
		}
		const _tmp70 = new _option({});
		_tmp70.state = new u8(0);_tmp70.data = new u64( BigInt(min.valueOf()) + BigInt((function(){
			try {
				return unwrap(rand__PRNG_u64n(rng.valueOf(),new u64( BigInt(max.valueOf()) - BigInt(min.valueOf()))))
			} catch(err) {
				js_throw(err)
			}
		})().valueOf()))
		return _tmp70;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {i8}
*/
function rand__PRNG_i8(rng) {
	try {
		return new i8(rng.valueOf().u8());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {i16}
*/
function rand__PRNG_i16(rng) {
	try {
		return new i16(rng.valueOf().u16());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {int}
*/
function rand__PRNG_int(rng) {
	try {
		return new int(rng.valueOf().u32());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {i64}
*/
function rand__PRNG_i64(rng) {
	try {
		return new i64(rng.valueOf().u64());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {int}
*/
function rand__PRNG_int31(rng) {
	try {
		return new int(new u32( rng.valueOf().u32().valueOf() & rand__constants__u31_mask.valueOf()));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {i64}
*/
function rand__PRNG_int63(rng) {
	try {
		return new i64(new u64( BigInt(rng.valueOf().u64().valueOf()) & BigInt(rand__constants__u63_mask.valueOf())));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {int} max
 * @returns {int}
*/
function rand__PRNG_intn(rng, max) {
	try {
		if ((new bool(max.valueOf() <= new int(0).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max has to be positive."))});
		}
		const _tmp71 = new _option({});
		_tmp71.state = new u8(0);_tmp71.data = new int((function(){
			try {
				return unwrap(rand__PRNG_u32n(rng.valueOf(),new u32(max)))
			} catch(err) {
				js_throw(err)
			}
		})())
		return _tmp71;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {i64} max
 * @returns {i64}
*/
function rand__PRNG_i64n(rng, max) {
	try {
		if ((new bool(max.valueOf() <= new int(0).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max has to be positive."))});
		}
		const _tmp72 = new _option({});
		_tmp72.state = new u8(0);_tmp72.data = new i64((function(){
			try {
				return unwrap(rand__PRNG_u64n(rng.valueOf(),new u64(max)))
			} catch(err) {
				js_throw(err)
			}
		})())
		return _tmp72;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {int} min
 * @param {int} max
 * @returns {int}
*/
function rand__PRNG_int_in_range(rng, min, max) {
	try {
		if ((new bool(max.valueOf() <= min.valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max must be greater than min"))});
		}
		const _tmp73 = new _option({});
		_tmp73.state = new u8(0);_tmp73.data = new int( min.valueOf() + (function(){
			try {
				return unwrap(rand__PRNG_intn(rng.valueOf(),new int( max.valueOf() - min.valueOf())))
			} catch(err) {
				js_throw(err)
			}
		})().valueOf())
		return _tmp73;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {i64} min
 * @param {i64} max
 * @returns {i64}
*/
function rand__PRNG_i64_in_range(rng, min, max) {
	try {
		if ((new bool(max.valueOf() <= min.valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max must be greater than min"))});
		}
		const _tmp74 = new _option({});
		_tmp74.state = new u8(0);_tmp74.data = new i64( BigInt(min.valueOf()) + BigInt((function(){
			try {
				return unwrap(rand__PRNG_i64n(rng.valueOf(),new i64( BigInt(max.valueOf()) - BigInt(min.valueOf()))))
			} catch(err) {
				js_throw(err)
			}
		})().valueOf()))
		return _tmp74;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {f32}
*/
function rand__PRNG_f32(rng) {
	try {
		return new f32( new f32(rng.valueOf().u32()).valueOf() / rand__constants__max_u32_as_f32.valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @returns {f64}
*/
function rand__PRNG_f64(rng) {
	try {
		return new f64( new f64(rng.valueOf().u64()).valueOf() / rand__constants__max_u64_as_f64.valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {f32} max
 * @returns {f32}
*/
function rand__PRNG_f32n(rng, max) {
	try {
		if ((new bool(max.valueOf() < new int(0).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max has to be non-negative."))});
		}
		const _tmp75 = new _option({});
		_tmp75.state = new u8(0);_tmp75.data = new f32( rand__PRNG_f32(rng.valueOf(),).valueOf() * max.valueOf())
		return _tmp75;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {f64} max
 * @returns {f64}
*/
function rand__PRNG_f64n(rng, max) {
	try {
		if ((new bool(max.valueOf() < new int(0).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max has to be non-negative."))});
		}
		const _tmp76 = new _option({});
		_tmp76.state = new u8(0);_tmp76.data = new f64( rand__PRNG_f64(rng.valueOf(),).valueOf() * max.valueOf())
		return _tmp76;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {f32} min
 * @param {f32} max
 * @returns {f32}
*/
function rand__PRNG_f32_in_range(rng, min, max) {
	try {
		if ((new bool(max.valueOf() < min.valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max must be greater than or equal to min"))});
		}
		const _tmp77 = new _option({});
		_tmp77.state = new u8(0);_tmp77.data = new f32( min.valueOf() + (function(){
			try {
				return unwrap(rand__PRNG_f32n(rng.valueOf(),new f32( max.valueOf() - min.valueOf())))
			} catch(err) {
				js_throw(err)
			}
		})().valueOf())
		return _tmp77;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* [inline] */
/**
 * @function
 * @param {f64} min
 * @param {f64} max
 * @returns {f64}
*/
function rand__PRNG_f64_in_range(rng, min, max) {
	try {
		if ((new bool(max.valueOf() < min.valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("max must be greater than or equal to min"))});
		}
		const _tmp78 = new _option({});
		_tmp78.state = new u8(0);_tmp78.data = new f64( min.valueOf() + (function(){
			try {
				return unwrap(rand__PRNG_f64n(rng.valueOf(),new f64( max.valueOf() - min.valueOf())))
			} catch(err) {
				js_throw(err)
			}
		})().valueOf())
		return _tmp78;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {string}
*/
function rand__PRNG_ulid(rng) {
	try {
		return rand__internal_ulid_at_millisecond(rng, new u64(time__Time_unix_time_milli(time__utc(),)));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} unix_time_milli
 * @returns {string}
*/
function rand__PRNG_ulid_at_millisecond(rng, unix_time_milli) {
	try {
		return rand__internal_ulid_at_millisecond(rng, unix_time_milli);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} charset
 * @param {int} len
 * @returns {string}
*/
function rand__PRNG_string_from_set(rng, charset, len) {
	try {
		return rand__internal_string_from_set(rng, charset, len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} len
 * @returns {string}
*/
function rand__PRNG_string(rng, len) {
	try {
		return rand__internal_string_from_set(rng, rand__english_letters, len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} len
 * @returns {string}
*/
function rand__PRNG_hex(rng, len) {
	try {
		return rand__internal_string_from_set(rng, rand__hex_chars, len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} len
 * @returns {string}
*/
function rand__PRNG_ascii(rng, len) {
	try {
		return rand__internal_string_from_set(rng, rand__ascii_chars, len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} p
 * @returns {bool}
*/
function rand__PRNG_bernoulli(rng, p) {
	try {
		if ((new bool( new bool(p.valueOf() < new int(0).valueOf()).valueOf() || new bool(p.valueOf() > new int(1).valueOf()).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string(`${f64_str(p)} is not a valid probability value.`))});
		}
		const _tmp79 = new _option({});
		_tmp79.state = new u8(0);_tmp79.data = new bool(rand__PRNG_f64(rng.valueOf(),).valueOf() <= p.valueOf())
		return _tmp79;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {rand__config__NormalConfigStruct} conf
 * @returns {f64}
*/
function rand__PRNG_normal(rng, conf) {
	try {
		let [x, ] = (function(){
			try {
				return unwrap(rand__PRNG_normal_pair(rng.valueOf(),conf))
			} catch(err) {
				js_throw(err)
			}
		})();
		const _tmp80 = new _option({});
		_tmp80.state = new u8(0);_tmp80.data = x
		return _tmp80;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {rand__config__NormalConfigStruct} conf
 * @returns {multi_return_f64_f64}
*/
function rand__PRNG_normal_pair(rng, conf) {
	try {
		if ((new bool(conf.sigma.valueOf() <= new int(0).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string("Standard deviation must be positive"))});
		}
		while (true) {
			try { 
				/** @type {f64} */
				const u = new f64((function(){
					try {
						return unwrap(rand__PRNG_f64_in_range(rng.valueOf(),new int(-1), new int(1)))
					} catch(err) {
						new f32(0.0);
					}
				})());
				/** @type {f64} */
				const v = new f64((function(){
					try {
						return unwrap(rand__PRNG_f64_in_range(rng.valueOf(),new int(-1), new int(1)))
					} catch(err) {
						new f32(0.0);
					}
				})());
				/** @type {f64} */
				const s = new f64(new f64( new f64( u.valueOf() * u.valueOf()).valueOf() + new f64( v.valueOf() * v.valueOf()).valueOf()));
				if ((new bool( new bool(s.valueOf() >= new int(1).valueOf()).valueOf() || new bool(s.valueOf() == new int(0).valueOf()).valueOf())).valueOf()) {
					continue;
				}
				/** @type {f64} */
				const t = new f64(rand__msqrt(new f64( new f64( new int(-2).valueOf() * rand__mlog(s).valueOf()).valueOf() / s.valueOf())));
				/** @type {f64} */
				const x = new f64(new f64( conf.mu.valueOf() + new f64( new f64( conf.sigma.valueOf() * t.valueOf()).valueOf() * u.valueOf()).valueOf()));
				/** @type {f64} */
				const y = new f64(new f64( conf.mu.valueOf() + new f64( new f64( conf.sigma.valueOf() * t.valueOf()).valueOf() * v.valueOf()).valueOf()));
				const _tmp81 = new _option({});
				_tmp81.state = new u8(0);_tmp81.data = [x, y]
				return _tmp81;} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new Option({ state:  new u8(2),err: error(new string("Implementation error. Please file an issue."))});
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} n
 * @param {f64} p
 * @returns {int}
*/
function rand__PRNG_binomial(rng, n, p) {
	try {
		if ((new bool( new bool(p.valueOf() < new int(0).valueOf()).valueOf() || new bool(p.valueOf() > new int(1).valueOf()).valueOf())).valueOf()) {
			return new Option({ state:  new u8(2),err: error(new string(`${f64_str(p)} is not a valid probability value.`))});
		}
		/** @type {int} */
		let count = new int(new int(0));
		for (let _tmp82 = new int(0); _tmp82 < n; _tmp82 = new int(_tmp82 + 1)) {
			try { 
				if (((function(){
					try {
						return unwrap(rand__PRNG_bernoulli(rng.valueOf(),p))
					} catch(err) {
					}
				})()).valueOf()) {
					count.val ++;
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		const _tmp83 = new _option({});
		_tmp83.state = new u8(0);_tmp83.data = count
		return _tmp83;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} lambda
 * @returns {f64}
*/
function rand__PRNG_exponential(rng, lambda) {
	try {
		if ((new bool(lambda.valueOf() <= new int(0).valueOf())).valueOf()) {
			builtin__panic (new string("The rate (lambda) must be positive."));
		}
		return new f64( -rand__mlog(rand__PRNG_f64(rng.valueOf(),)).val .valueOf() / lambda.valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

Object.defineProperty($global,"default_rng", {
					configurable: false,
					enumerable: true ,
					writable: true,
					value: new $ref({})
					}
				); // global

/* [manualfree] */
/**
 * @function
 * @param {rand__config__PRNGConfigStruct} config
 * @returns {rand__PRNG}
*/
function rand__new_default(config) {
	try {
		/** @type {rand__wyrand__WyRandRNG} */
		let rng = new $ref(new rand__wyrand__WyRandRNG({}));
		rand__wyrand__WyRandRNG_seed(rng.valueOf(),config.seed_);
		array_free(config.seed_,);
		return new $ref(new rand__PRNG(rng));
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {rand__PRNG}
*/
function rand__get_current_rng() {
	try {
		return default_rng;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {rand__PRNG} rng
 * @returns {void}
*/
function rand__set_rng(rng) {
	try {
		/** @type {rand__PRNG} */
		default_rng.val = rng.val;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_u32} seed
 * @returns {void}
*/
function rand__seed(seed) {
	try {
		default_rng.valueOf().seed(seed);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {u32}
*/
function rand__u32() {
	try {
		return default_rng.valueOf().u32();
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {u64}
*/
function rand__u64() {
	try {
		return default_rng.valueOf().u64();
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u32} max
 * @returns {u32}
*/
function rand__u32n(max) {
	try {
		const _tmp84 = new _option({});
		_tmp84.state = new u8(0);_tmp84.data = (function(){
			try {
				return unwrap(rand__PRNG_u32n(default_rng.valueOf(),max))
			} catch(err) {
			}
		})()
		return _tmp84;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} max
 * @returns {u64}
*/
function rand__u64n(max) {
	try {
		const _tmp85 = new _option({});
		_tmp85.state = new u8(0);_tmp85.data = (function(){
			try {
				return unwrap(rand__PRNG_u64n(default_rng.valueOf(),max))
			} catch(err) {
			}
		})()
		return _tmp85;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u32} min
 * @param {u32} max
 * @returns {u32}
*/
function rand__u32_in_range(min, max) {
	try {
		const _tmp86 = new _option({});
		_tmp86.state = new u8(0);_tmp86.data = (function(){
			try {
				return unwrap(rand__PRNG_u32_in_range(default_rng.valueOf(),min, max))
			} catch(err) {
			}
		})()
		return _tmp86;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} min
 * @param {u64} max
 * @returns {u64}
*/
function rand__u64_in_range(min, max) {
	try {
		const _tmp87 = new _option({});
		_tmp87.state = new u8(0);_tmp87.data = (function(){
			try {
				return unwrap(rand__PRNG_u64_in_range(default_rng.valueOf(),min, max))
			} catch(err) {
			}
		})()
		return _tmp87;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {i16}
*/
function rand__i16() {
	try {
		return rand__PRNG_i16(default_rng.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {int}
*/
function rand__int() {
	try {
		return rand__PRNG_int(default_rng.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} max
 * @returns {int}
*/
function rand__intn(max) {
	try {
		const _tmp88 = new _option({});
		_tmp88.state = new u8(0);_tmp88.data = (function(){
			try {
				return unwrap(rand__PRNG_intn(default_rng.valueOf(),max))
			} catch(err) {
			}
		})()
		return _tmp88;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {u8}
*/
function rand__u8() {
	try {
		return default_rng.valueOf().u8();
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} min
 * @param {int} max
 * @returns {int}
*/
function rand__int_in_range(min, max) {
	try {
		const _tmp89 = new _option({});
		_tmp89.state = new u8(0);_tmp89.data = (function(){
			try {
				return unwrap(rand__PRNG_int_in_range(default_rng.valueOf(),min, max))
			} catch(err) {
			}
		})()
		return _tmp89;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {int}
*/
function rand__int31() {
	try {
		return rand__PRNG_int31(default_rng.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {i64}
*/
function rand__i64() {
	try {
		return rand__PRNG_i64(default_rng.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {i64} max
 * @returns {i64}
*/
function rand__i64n(max) {
	try {
		const _tmp90 = new _option({});
		_tmp90.state = new u8(0);_tmp90.data = (function(){
			try {
				return unwrap(rand__PRNG_i64n(default_rng.valueOf(),max))
			} catch(err) {
			}
		})()
		return _tmp90;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {i64} min
 * @param {i64} max
 * @returns {i64}
*/
function rand__i64_in_range(min, max) {
	try {
		const _tmp91 = new _option({});
		_tmp91.state = new u8(0);_tmp91.data = (function(){
			try {
				return unwrap(rand__PRNG_i64_in_range(default_rng.valueOf(),min, max))
			} catch(err) {
			}
		})()
		return _tmp91;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {i64}
*/
function rand__int63() {
	try {
		return rand__PRNG_int63(default_rng.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {f32}
*/
function rand__f32() {
	try {
		return rand__PRNG_f32(default_rng.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {f64}
*/
function rand__f64() {
	try {
		return rand__PRNG_f64(default_rng.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f32} max
 * @returns {f32}
*/
function rand__f32n(max) {
	try {
		const _tmp92 = new _option({});
		_tmp92.state = new u8(0);_tmp92.data = (function(){
			try {
				return unwrap(rand__PRNG_f32n(default_rng.valueOf(),max))
			} catch(err) {
			}
		})()
		return _tmp92;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} max
 * @returns {f64}
*/
function rand__f64n(max) {
	try {
		const _tmp93 = new _option({});
		_tmp93.state = new u8(0);_tmp93.data = (function(){
			try {
				return unwrap(rand__PRNG_f64n(default_rng.valueOf(),max))
			} catch(err) {
			}
		})()
		return _tmp93;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f32} min
 * @param {f32} max
 * @returns {f32}
*/
function rand__f32_in_range(min, max) {
	try {
		const _tmp94 = new _option({});
		_tmp94.state = new u8(0);_tmp94.data = (function(){
			try {
				return unwrap(rand__PRNG_f32_in_range(default_rng.valueOf(),min, max))
			} catch(err) {
			}
		})()
		return _tmp94;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} min
 * @param {f64} max
 * @returns {f64}
*/
function rand__f64_in_range(min, max) {
	try {
		const _tmp95 = new _option({});
		_tmp95.state = new u8(0);_tmp95.data = (function(){
			try {
				return unwrap(rand__PRNG_f64_in_range(default_rng.valueOf(),min, max))
			} catch(err) {
			}
		})()
		return _tmp95;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} bytes_needed
 * @returns {Array_u8}
*/
function rand__bytes(bytes_needed) {
	try {
		const _tmp96 = new _option({});
		_tmp96.state = new u8(0);_tmp96.data = (function(){
			try {
				return unwrap(rand__PRNG_bytes(default_rng.valueOf(),bytes_needed))
			} catch(err) {
			}
		})()
		return _tmp96;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {Array_u8} buf
 * @returns {void}
*/
function rand__read(buf) {
buf = new $ref(buf)
	try {
		rand__read_internal(default_rng, buf);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @constant {string} */
const rand__english_letters = new string("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
/** @constant {string} */
const rand__hex_chars = new string("abcdef0123456789");
/** @constant {string} */
const rand__ascii_chars = new string("!\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ\\^_`abcdefghijklmnopqrstuvwxyz{|}~");

/**
 * @function
 * @returns {string}
*/
function rand__ulid() {
	try {
		return rand__PRNG_ulid(default_rng.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {u64} unix_time_milli
 * @returns {string}
*/
function rand__ulid_at_millisecond(unix_time_milli) {
	try {
		return rand__PRNG_ulid_at_millisecond(default_rng.valueOf(),unix_time_milli);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {string} charset
 * @param {int} len
 * @returns {string}
*/
function rand__string_from_set(charset, len) {
	try {
		return rand__PRNG_string_from_set(default_rng.valueOf(),charset, len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} len
 * @returns {string}
*/
function rand__string(len) {
	try {
		return rand__string_from_set(rand__english_letters, len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} len
 * @returns {string}
*/
function rand__hex(len) {
	try {
		return rand__string_from_set(rand__hex_chars, len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} len
 * @returns {string}
*/
function rand__ascii(len) {
	try {
		return rand__string_from_set(rand__ascii_chars, len);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} p
 * @returns {bool}
*/
function rand__bernoulli(p) {
	try {
		const _tmp97 = new _option({});
		_tmp97.state = new u8(0);_tmp97.data = (function(){
			try {
				return unwrap(rand__PRNG_bernoulli(default_rng.valueOf(),p))
			} catch(err) {
			}
		})()
		return _tmp97;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {rand__config__NormalConfigStruct} conf
 * @returns {f64}
*/
function rand__normal(conf) {
	try {
		const _tmp98 = new _option({});
		_tmp98.state = new u8(0);_tmp98.data = (function(){
			try {
				return unwrap(rand__PRNG_normal(default_rng.valueOf(),conf))
			} catch(err) {
			}
		})()
		return _tmp98;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {rand__config__NormalConfigStruct} conf
 * @returns {multi_return_f64_f64}
*/
function rand__normal_pair(conf) {
	try {
		const _tmp99 = new _option({});
		_tmp99.state = new u8(0);_tmp99.data = (function(){
			try {
				return unwrap(rand__PRNG_normal_pair(default_rng.valueOf(),conf))
			} catch(err) {
			}
		})()
		return _tmp99;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} n
 * @param {f64} p
 * @returns {int}
*/
function rand__binomial(n, p) {
	try {
		const _tmp100 = new _option({});
		_tmp100.state = new u8(0);_tmp100.data = (function(){
			try {
				return unwrap(rand__PRNG_binomial(default_rng.valueOf(),n, p))
			} catch(err) {
			}
		})()
		return _tmp100;} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {f64} lambda
 * @returns {f64}
*/
function rand__exponential(lambda) {
	try {
		return rand__PRNG_exponential(default_rng.valueOf(),lambda);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/** @namespace main */
/** @constant {int} */
const main__block_size = new int(20);
/** @constant {int} */
const main__field_height = new int(20);
/** @constant {int} */
const main__field_width = new int(10);
/** @constant {int} */
const main__tetro_size = new int(4);
/** @constant {int} */
let main__win_width = undefined;
/** @constant {int} */
let main__win_height = undefined;
/** @constant {int} */
const main__timer_period = new int(250);
/** @constant {int} */
const main__text_size = new int(24);
/** @constant {int} */
const main__limit_tickness = new int(3);

/** @constant {gx__TextCfg} */
let main__text_cfg = undefined;
/** @constant {gx__TextCfg} */
let main__over_cfg = undefined;

/** @constant {Array_Array_int} */
let main__b_tetros = undefined;
/** @constant {Array_gx__Color} */
let main__colors = undefined;
/** @constant {gx__Color} */
let main__background_color = undefined;
/** @constant {gx__Color} */
let main__ui_color = undefined;

/**
 * @constructor
 * @param {{x?: int, y?: int}} init
*/
function main__Block({ x = new int(0), y = new int(0) }) {
	this.x = x
	this.y = y
};
main__Block.prototype = {
	toString() {
		return `main__Block { x: ${this["x"].toString()} , y: ${this["y"].toString()} }`
	},
	/** @type {int} */
	x: new int(0),
	/** @type {int} */
	y: new int(0),
	$toJS() { return this; }
	};

/** @enum {number} */
const main__GameState = {
	paused: 0,
	running: 1,
	gameover: 2,
};

/**
 * @constructor
 * @param {{score?: int, lines?: int, state?: main__GameState, block_size?: int, margin?: int, pos_x?: int, pos_y?: int, field?: Array_Array_int, tetro?: Array_main__Block, tetros_cache?: Array_main__Block, tetro_idx?: int, next_tetro_idx?: int, rotation_idx?: int, gg?: gg__Context, font_loaded?: bool, show_ghost?: bool, frame?: int, frame_old?: int, frame_sw?: time__StopWatch, second_sw?: time__StopWatch}} init
*/
function main__Game({ score = new int(0), lines = new int(0), state = undefined, block_size = main__block_size, margin = new int(0), pos_x = new int(0), pos_y = new int(0), field = empty_array(), tetro = empty_array(), tetros_cache = empty_array(), tetro_idx = new int(0), next_tetro_idx = new int(0), rotation_idx = new int(0), gg = null, font_loaded = new bool(false), show_ghost = new bool(true), frame = new int(0), frame_old = new int(0), frame_sw = time__new_stopwatch(new time__StopWatchOptions({})), second_sw = time__new_stopwatch(new time__StopWatchOptions({})) }) {
	this.score = score
	this.lines = lines
	this.state = state
	this.block_size = block_size
	this.margin = margin
	this.pos_x = pos_x
	this.pos_y = pos_y
	this.field = field
	this.tetro = tetro
	this.tetros_cache = tetros_cache
	this.tetro_idx = tetro_idx
	this.next_tetro_idx = next_tetro_idx
	this.rotation_idx = rotation_idx
	this.gg = gg
	this.font_loaded = font_loaded
	this.show_ghost = show_ghost
	this.frame = frame
	this.frame_old = frame_old
	this.frame_sw = frame_sw
	this.second_sw = second_sw
};
main__Game.prototype = {
	toString() {
		return `main__Game { score: ${this["score"].toString()} , lines: ${this["lines"].toString()} , state: ${this["state"].toString()} , block_size: ${this["block_size"].toString()} , margin: ${this["margin"].toString()} , pos_x: ${this["pos_x"].toString()} , pos_y: ${this["pos_y"].toString()} , field: ${this["field"].toString()} , tetro: ${this["tetro"].toString()} , tetros_cache: ${this["tetros_cache"].toString()} , tetro_idx: ${this["tetro_idx"].toString()} , next_tetro_idx: ${this["next_tetro_idx"].toString()} , rotation_idx: ${this["rotation_idx"].toString()} , gg: ${this["gg"].toString()} , font_loaded: ${this["font_loaded"].toString()} , show_ghost: ${this["show_ghost"].toString()} , frame: ${this["frame"].toString()} , frame_old: ${this["frame_old"].toString()} , frame_sw: ${this["frame_sw"].toString()} , second_sw: ${this["second_sw"].toString()} }`
	},
	/** @type {int} */
	score: new int(0),
	/** @type {int} */
	lines: new int(0),
	/** @type {main__GameState} */
	state: undefined,
	/** @type {int} */
	block_size: new int(0),
	/** @type {int} */
	margin: new int(0),
	/** @type {int} */
	pos_x: new int(0),
	/** @type {int} */
	pos_y: new int(0),
	/** @type {Array_Array_int} */
	field: empty_array(),
	/** @type {Array_main__Block} */
	tetro: empty_array(),
	/** @type {Array_main__Block} */
	tetros_cache: empty_array(),
	/** @type {int} */
	tetro_idx: new int(0),
	/** @type {int} */
	next_tetro_idx: new int(0),
	/** @type {int} */
	rotation_idx: new int(0),
	/** @type {gg__Context} */
	gg: new gg__Context({}),
	/** @type {bool} */
	font_loaded: new bool(false),
	/** @type {bool} */
	show_ghost: new bool(false),
	/** @type {int} */
	frame: new int(0),
	/** @type {int} */
	frame_old: new int(0),
	/** @type {time__StopWatch} */
	frame_sw: new time__StopWatch({}),
	/** @type {time__StopWatch} */
	second_sw: new time__StopWatch({}),
	$toJS() { return this; }
	};

/**
 * @function
 * @param {f32} v
 * @param {f32} min
 * @param {f32} max
 * @param {f32} new_min
 * @param {f32} new_max
 * @returns {f32}
*/
function main__remap(v, min, max, new_min, new_max) {
	try {
		return new f32( (new f32( (new f32( (new f32( v.valueOf() - min.valueOf())).valueOf() * (new f32( new_max.valueOf() - new_min.valueOf())).valueOf())).valueOf() / (new f32( max.valueOf() - min.valueOf())).valueOf())).valueOf() + new_min.valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {main__Game} game
 * @returns {void}
*/
function main__frame(game) {
game = new $ref(game)
	try {
		if ((new bool(new u64( BigInt(game.val.gg.val.frame.valueOf()) & BigInt(new int(15).valueOf())).valueOf() == new int(0).valueOf())).valueOf()) {
			main__Game_update_game_state(game.valueOf(),);
		}
		/** @type {gg__Size} */
		const ws = gg__window_size();
		/** @type {f32} */
		const bs = new f32(main__remap(main__block_size, new int(0), main__win_height, new int(0), ws.height));
		/** @type {f32} */
		const m = new f32(new f32( (new f32( new f32(ws.width).valueOf() - new f32( bs.valueOf() * main__field_width.valueOf()).valueOf())).valueOf() * new f32(0.5).valueOf()));
		/** @type {int} */
		game.val.block_size = new int(new int(bs));
		/** @type {int} */
		game.val.margin = new int(new int(m));
		time__StopWatch_restart(game.val.frame_sw,);
		gg__Context_begin(game.val.gg.valueOf(),);
		main__Game_draw_scene(game.valueOf(),);
		;
		gg__Context_end(game.val.gg.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/* program entry point */
async function js_main() {
	try {
		/** @type {main__Game} */
		let game = new $ref((function() {
			let _tmp101 = new main__Game({});
			_tmp101.gg = new $ref(new gg__Context({}));
			return _tmp101;
		})()
		);
		/** @type {gg__Context} */
		game.val.gg.val = gg__new_context((function() {
			let _tmp102 = new gg__Config({});
			_tmp102.bg_color = gx__white;
			_tmp102.width = main__win_width;
			_tmp102.height = main__win_height;
			_tmp102.create_window = new bool(true);
			_tmp102.window_title = new string("V Tetris");
			_tmp102.user_data = game;
			_tmp102.frame_fn = main__frame;
			_tmp102.event_fn = main__on_event;
			_tmp102.canvas = new string("canvas");
			return _tmp102;
		})()
		).val;
		main__Game_init_game(game.valueOf(),);
		gg__Context_run(game.val.gg.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_init_game(game) {
game = new $ref(game)
	try {
		main__Game_parse_tetros(game.valueOf(),);
		/** @type {int} */
		game.val.next_tetro_idx = new int((function(){
			try {
				return unwrap(rand__intn(main__b_tetros.len))
			} catch(err) {
				new int(0);
			}
		})());
		main__Game_generate_tetro(game.valueOf(),);
		/** @type {Array_Array_int} */
		game.val.field = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		for (let _tmp103 = new int(0); _tmp103 < new int_literal( main__field_height.valueOf() + new int(2).valueOf()); _tmp103 = new int(_tmp103 + 1)) {
			try { 
				/** @type {Array_int} */
				let row = array_repeat(new array(new array_buffer({arr: [new int(new int(0))], len: new int(1), cap: new int(1)})),new int_literal( main__field_width.valueOf() + new int(2).valueOf()));
				/** @type {int} */
				row.arr.set(new int(new int(0).valueOf()),new int(new int(-1)));
				/** @type {int} */
				row.arr.set(new int(new int_literal( main__field_width.valueOf() + new int(1).valueOf()).valueOf()),new int(new int(-1)));
				array_push(game.val.field,row,false);
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		for (let j = new int(0); j < new int_literal( main__field_width.valueOf() + new int(2).valueOf()); j = new int(j + 1)) {
			try { 
				/** @type {int} */
				game.val.field.arr.get(new int(new int(0).valueOf())).arr.set(new int(j.valueOf()),new int(new int(-1)));
				/** @type {int} */
				game.val.field.arr.get(new int(new int_literal( main__field_height.valueOf() + new int(1).valueOf()).valueOf())).arr.set(new int(j.valueOf()),new int(new int(-1)));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {int} */
		game.val.score = new int(new int(0));
		/** @type {int} */
		game.val.lines = new int(new int(0));
		/** @type {main__GameState} */
		game.val.state = main__GameState.running;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_parse_tetros(game) {
game = new $ref(game)
	try {
		for (const b_tetros0 of main__b_tetros) {
			try { 
				for (const b_tetro of b_tetros0) {
					try { 
						for (const t of main__parse_binary_tetro(b_tetro)) {
							try { 
								array_push(game.val.tetros_cache,t,false);
							} catch (e) {
							 if (e instanceof BreakException) { break; }
							 else if (e instanceof ContinueException) { continue; }
							 else { throw e; } }
						}
						
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_update_game_state(game) {
game = new $ref(game)
	try {
		if ((new bool(game.val.state.valueOf() == main__GameState.running.valueOf())).valueOf()) {
			main__Game_move_tetro(game.valueOf(),);
			main__Game_delete_completed_lines(game.valueOf(),);
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_draw_ghost(game) {
game = new $ref(game)
	try {
		if ((new bool( new bool(game.val.state.valueOf() != main__GameState.gameover.valueOf()).valueOf() && game.val.show_ghost.valueOf())).valueOf()) {
			/** @type {int} */
			const pos_y = new int(main__Game_move_ghost(game.valueOf(),));
			for (let i = new int(0); i < main__tetro_size; i = new int(i + 1)) {
				try { 
					/** @type {main__Block} */
					const tetro = game.val.tetro.arr.get(new int(i.valueOf()));
					main__Game_draw_block_color(game.valueOf(),new int( pos_y.valueOf() * tetro.y.valueOf()), new int( game.val.pos_x.valueOf() + tetro.x.valueOf()), gx__rgba(new int(125), new int(125), new int(125), new int(40)));
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {int}
*/
function main__Game_move_ghost(game) {
game = new $ref(game)
	try {
		/** @type {int} */
		let pos_y = new int(game.val.pos_y);
		/** @type {bool} */
		let end = new bool(new bool(false));
		while (+!end.val ) {
			try { 
				for (const block of game.val.tetro) {
					try { 
						/** @type {int} */
						const y = new int(new int( new int( block.y.valueOf() + pos_y.valueOf()).valueOf() + new int(1).valueOf()));
						/** @type {int} */
						const x = new int(new int( block.x.valueOf() + game.val.pos_x.valueOf()));
						if ((new bool(game.val.field.arr.get(new int(y.valueOf())).arr.get(new int(x.valueOf())).valueOf() != new int(0).valueOf())).valueOf()) {
							/** @type {bool} */
							end = new bool(new bool(true));
							break;
						}
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
				pos_y.val ++;
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return new int( pos_y.valueOf() - new int(1).valueOf());
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {bool}
*/
function main__Game_move_tetro(game) {
game = new $ref(game)
	try {
		for (const block of game.val.tetro) {
			try { 
				/** @type {int} */
				const y = new int(new int( new int( block.y.valueOf() + game.val.pos_y.valueOf()).valueOf() + new int(1).valueOf()));
				/** @type {int} */
				const x = new int(new int( block.x.valueOf() + game.val.pos_x.valueOf()));
				if ((new bool(game.val.field.arr.get(new int(y.valueOf())).arr.get(new int(x.valueOf())).valueOf() != new int(0).valueOf())).valueOf()) {
					if ((new bool(game.val.pos_y.valueOf() < new int(2).valueOf())).valueOf()) {
						/** @type {main__GameState} */
						game.val.state = main__GameState.gameover;
						return new bool(false);
					}
					main__Game_drop_tetro(game.valueOf(),);
					main__Game_generate_tetro(game.valueOf(),);
					return new bool(false);
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		game.val.pos_y.val ++;
		return new bool(true);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} dx
 * @returns {bool}
*/
function main__Game_move_right(game, dx) {
game = new $ref(game)
	try {
		for (let i = new int(0); i < main__tetro_size; i = new int(i + 1)) {
			try { 
				/** @type {main__Block} */
				const tetro = game.val.tetro.arr.get(new int(i.valueOf()));
				/** @type {int} */
				const y = new int(new int( tetro.y.valueOf() + game.val.pos_y.valueOf()));
				/** @type {int} */
				const x = new int(new int( new int( tetro.x.valueOf() + game.val.pos_x.valueOf()).valueOf() + dx.valueOf()));
				if ((new bool(game.val.field.arr.get(new int(y.valueOf())).arr.get(new int(x.valueOf())).valueOf() != new int(0).valueOf())).valueOf()) {
					return new bool(false);
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {int} */
		game.val.pos_x.val = Math.floor(game.val.pos_x + new int(dx));
		return new bool(true);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_delete_completed_lines(game) {
game = new $ref(game)
	try {
		for (let y = new int(main__field_height); +new bool(y.valueOf() >= new int(1).valueOf()); y.val --) {
			try { 
				main__Game_delete_completed_line(game.valueOf(),y);
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} y
 * @returns {void}
*/
function main__Game_delete_completed_line(game, y) {
game = new $ref(game)
	try {
		for (let x = new int(new int(1)); +new bool(x.valueOf() <= main__field_width.valueOf()); x.val ++) {
			try { 
				if ((new bool(game.val.field.arr.get(new int(y.valueOf())).arr.get(new int(x.valueOf())).valueOf() == new int(0).valueOf())).valueOf()) {
					return;
				}
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {int} */
		game.val.score.val = Math.floor(game.val.score + new int(new int(10)));
		game.val.lines.val ++;
		for (let yy = new int(new int( y.valueOf() - new int(1).valueOf())); +new bool(yy.valueOf() >= new int(1).valueOf()); yy.val --) {
			try { 
				for (let x = new int(new int(1)); +new bool(x.valueOf() <= main__field_width.valueOf()); x.val ++) {
					try { 
						game.val.field.arr.get(new int(new int( yy.valueOf() + new int(1).valueOf()).valueOf())).arr.set(new int(x.valueOf()),new int(game.val.field.arr.get(new int(yy.valueOf())).arr.get(new int(x.valueOf())))); } catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_generate_tetro(game) {
game = new $ref(game)
	try {
		/** @type {int} */
		game.val.pos_y = new int(new int(0));
		/** @type {int} */
		game.val.pos_x = new int(new int_literal( new int_literal( main__field_width.valueOf() / new int(2).valueOf()).valueOf() - new int_literal( main__tetro_size.valueOf() / new int(2).valueOf()).valueOf()));
		/** @type {int} */
		game.val.tetro_idx = new int(game.val.next_tetro_idx);
		/** @type {int} */
		game.val.next_tetro_idx = new int((function(){
			try {
				return unwrap(rand__intn(main__b_tetros.len))
			} catch(err) {
				new int(0);
			}
		})());
		/** @type {int} */
		game.val.rotation_idx = new int(new int(0));
		main__Game_get_tetro(game.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_get_tetro(game) {
game = new $ref(game)
	try {
		/** @type {int} */
		const idx = new int(new int( new int( new int( game.val.tetro_idx.valueOf() * main__tetro_size.valueOf()).valueOf() * main__tetro_size.valueOf()).valueOf() + new int( game.val.rotation_idx.valueOf() * main__tetro_size.valueOf()).valueOf()));
		/** @type {Array_main__Block} */
		let tetros = new array(new array_buffer({arr: [], len: new int(0), cap: new int(0)}));
		for (const tetro of array_slice(game.val.tetros_cache,idx, new int( idx.valueOf() + main__tetro_size.valueOf()))) {
			try { 
				array_push(tetros,(function() {
					let _tmp104 = new main__Block({});
					_tmp104.x = tetro.x;
					_tmp104.y = tetro.y;
					return _tmp104;
				})()
				,false);
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		/** @type {Array_main__Block} */
		game.val.tetro = tetros;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_drop_tetro(game) {
game = new $ref(game)
	try {
		for (let i = new int(0); i < main__tetro_size; i = new int(i + 1)) {
			try { 
				/** @type {main__Block} */
				const tetro = game.val.tetro.arr.get(new int(i.valueOf()));
				/** @type {int} */
				const x = new int(new int( tetro.x.valueOf() + game.val.pos_x.valueOf()));
				/** @type {int} */
				const y = new int(new int( tetro.y.valueOf() + game.val.pos_y.valueOf()));
				/** @type {int} */
				game.val.field.arr.get(new int(y.valueOf())).arr.set(new int(x.valueOf()),new int(new int( game.val.tetro_idx.valueOf() + new int(1).valueOf())));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_draw_tetro(game) {
game = new $ref(game)
	try {
		for (let i = new int(0); i < main__tetro_size; i = new int(i + 1)) {
			try { 
				/** @type {main__Block} */
				const tetro = game.val.tetro.arr.get(new int(i.valueOf()));
				main__Game_draw_block(game.valueOf(),new int( game.val.pos_y.valueOf() + tetro.y.valueOf()), new int( game.val.pos_x.valueOf() + tetro.x.valueOf()), new int( game.val.tetro_idx.valueOf() + new int(1).valueOf()));
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_draw_next_tetro(game) {
game = new $ref(game)
	try {
		if ((new bool(game.val.state.valueOf() != main__GameState.gameover.valueOf())).valueOf()) {
			/** @type {int} */
			const idx = new int(new int( new int( game.val.next_tetro_idx.valueOf() * main__tetro_size.valueOf()).valueOf() * main__tetro_size.valueOf()));
			/** @type {Array_main__Block} */
			const next_tetro = array_slice(game.val.tetros_cache,idx, new int( idx.valueOf() + main__tetro_size.valueOf()));
			/** @type {int} */
			const pos_y = new int(new int(0));
			/** @type {int} */
			const pos_x = new int(new int_literal( new int_literal( main__field_width.valueOf() / new int(2).valueOf()).valueOf() - new int_literal( main__tetro_size.valueOf() / new int(2).valueOf()).valueOf()));
			for (let i = new int(0); i < main__tetro_size; i = new int(i + 1)) {
				try { 
					/** @type {main__Block} */
					const block = next_tetro.arr.get(new int(i.valueOf()));
					main__Game_draw_block_color(game.valueOf(),new int( pos_y.valueOf() + block.y.valueOf()), new int( pos_x.valueOf() + block.x.valueOf()), gx__rgb(new int(220), new int(220), new int(220)));
				} catch (e) {
				 if (e instanceof BreakException) { break; }
				 else if (e instanceof ContinueException) { continue; }
				 else { throw e; } }
			}
			
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} i
 * @param {int} j
 * @param {gx__Color} color
 * @returns {void}
*/
function main__Game_draw_block_color(game, i, j, color) {
game = new $ref(game)
	try {
		gg__Context_draw_rect(game.val.gg.valueOf(),new f32( new f32(new int( (new int( j.valueOf() - new int(1).valueOf())).valueOf() * game.val.block_size.valueOf())).valueOf() + game.val.margin.valueOf()), new f32(new int( (new int( i.valueOf() - new int(1).valueOf())).valueOf() * game.val.block_size.valueOf())), new f32(new int( game.val.block_size.valueOf() - new int(1).valueOf())), new f32(new int( game.val.block_size.valueOf() - new int(1).valueOf())), color);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} i
 * @param {int} j
 * @param {int} color_idx
 * @returns {void}
*/
function main__Game_draw_block(game, i, j, color_idx) {
game = new $ref(game)
	try {
		/** @type {gx__Color} */
		const color = ((new bool(game.val.state.valueOf() == main__GameState.gameover.valueOf())).valueOf() ? gx__gray : main__colors.arr.get(new int(color_idx.valueOf())));
		main__Game_draw_block_color(game.valueOf(),i, j, color);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_draw_field(game) {
game = new $ref(game)
	try {
		for (let i = new int(new int(1)); +new bool(i.valueOf() <= new int_literal( main__field_height.valueOf() + new int(1).valueOf()).valueOf()); i.val ++) {
			try { 
				for (let j = new int(new int(1)); +new bool(j.valueOf() <= new int_literal( main__field_width.valueOf() + new int(1).valueOf()).valueOf()); j.val ++) {
					try { 
						if ((new bool(game.val.field.arr.get(new int(i.valueOf())).arr.get(new int(j.valueOf())).valueOf() > new int(0).valueOf())).valueOf()) {
							main__Game_draw_block(game.valueOf(),i, j, game.val.field.arr.get(new int(i.valueOf())).arr.get(new int(j.valueOf())));
						}
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_draw_ui(game) {
game = new $ref(game)
	try {
		/** @type {gg__Size} */
		const ws = gg__window_size();
		/** @type {int} */
		const textsize = new int(new int(main__remap(main__text_size, new int(0), main__win_width, new int(0), ws.width)));
		gg__Context_draw_text(game.val.gg.valueOf(),new int(1), new int(10), int_str(game.val.score), main__text_cfg);
		/** @type {string} */
		const lines = new string(int_str(game.val.lines));
		gg__Context_draw_text(game.val.gg.valueOf(),new int( ws.width.valueOf() - new int( lines.len.valueOf() * textsize.valueOf()).valueOf()), new int(10), lines, main__text_cfg);
		if ((new bool(game.val.state.valueOf() == main__GameState.gameover.valueOf())).valueOf()) {
			gg__Context_draw_rect(game.val.gg.valueOf(),new int(0), new int( new int( ws.height.valueOf() / new int(2).valueOf()).valueOf() - textsize.valueOf()), ws.width, new int( new int(5).valueOf() * textsize.valueOf()), main__ui_color);
			gg__Context_draw_text(game.val.gg.valueOf(),new int(1), new int( new int( ws.height.valueOf() / new int(2).valueOf()).valueOf() + new int( new int(0).valueOf() * textsize.valueOf()).valueOf()), new string("Game Over"), main__over_cfg);
			gg__Context_draw_text(game.val.gg.valueOf(),new int(1), new int( new int( ws.height.valueOf() / new int(2).valueOf()).valueOf() + new int( new int(2).valueOf() * textsize.valueOf()).valueOf()), new string("SPACE to restart"), main__text_cfg);
		} else if ((new bool(game.val.state.valueOf() == main__GameState.paused.valueOf())).valueOf()) {
			gg__Context_draw_rect(game.val.gg.valueOf(),new int(0), new int( new int( ws.height.valueOf() / new int(2).valueOf()).valueOf() - textsize.valueOf()), ws.width, new int( new int(5).valueOf() * textsize.valueOf()), main__ui_color);
			gg__Context_draw_text(game.val.gg.valueOf(),new int(1), new int( new int( ws.height.valueOf() / new int(2).valueOf()).valueOf() + new int( new int(0).valueOf() * textsize.valueOf()).valueOf()), new string("Game Paused"), main__over_cfg);
			gg__Context_draw_text(game.val.gg.valueOf(),new int(1), new int( new int( ws.height.valueOf() / new int(2).valueOf()).valueOf() + new int( new int(2).valueOf() * textsize.valueOf()).valueOf()), new string("SPACE to resume"), main__text_cfg);
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_draw_scene(game) {
game = new $ref(game)
	try {
		main__Game_draw_ghost(game.valueOf(),);
		main__Game_draw_next_tetro(game.valueOf(),);
		main__Game_draw_tetro(game.valueOf(),);
		main__Game_draw_field(game.valueOf(),);
		main__Game_draw_ui(game.valueOf(),);
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {int} t_
 * @returns {Array_main__Block}
*/
function main__parse_binary_tetro(t_) {
	try {
		/** @type {int} */
		let t = new int(t_);
		/** @type {Array_main__Block} */
		let res = new array(new array_buffer({arr: [new main__Block({}), new main__Block({}), new main__Block({}), new main__Block({})], len: new int(4), cap: new int(4)}));
		/** @type {int} */
		let cnt = new int(new int(0));
		/** @type {bool} */
		const horizontal = new bool(new bool(t.valueOf() == new int(9).valueOf()));
		/** @type {Array_int} */
		const ten_power = new array(new array_buffer({arr: [new int(new int(1000)), new int(new int(100)), new int(new int(10)), new int(new int(1))], len: new int(4), cap: new int(4)}));
		for (let i = new int(new int(0)); +new bool(i.valueOf() <= new int(3).valueOf()); i.val ++) {
			try { 
				let p = new int(ten_power.arr.get(new int(i.valueOf()))); let digit = new int(new int( t.valueOf() / p.valueOf())); t.val = Math.floor(t % new int(p)); for (let j = new int(new int(3)); +new bool(j.valueOf() >= new int(0).valueOf()); j.val --) {
					try { 
						let bin = new int(new int( digit.valueOf() % new int(2).valueOf())); digit.val = Math.floor(digit / new int(new int(2))); if ((new bool( new bool(bin.valueOf() == new int(1).valueOf()).valueOf() || (new bool( horizontal.valueOf() && new bool(i.valueOf() == new int_literal( main__tetro_size.valueOf() - new int(1).valueOf()).valueOf()).valueOf())).valueOf())).valueOf()) {
							res.arr.get(new int(cnt.valueOf())).x = new int(j); res.arr.get(new int(cnt.valueOf())).y = new int(i); cnt.val ++;
						}
					} catch (e) {
					 if (e instanceof BreakException) { break; }
					 else if (e instanceof ContinueException) { continue; }
					 else { throw e; } }
				}
				
			} catch (e) {
			 if (e instanceof BreakException) { break; }
			 else if (e instanceof ContinueException) { continue; }
			 else { throw e; } }
		}
		
		return res;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gg__Event} e
 * @param {main__Game} game
 * @returns {void}
*/
function main__on_event(e, game) {
e = new $ref(e)
game = new $ref(game)
	try {
		if ((new bool(e.val.typ.valueOf() == gg__DOMEventType.key_down.valueOf())).valueOf()) {
			main__Game_key_down(game.valueOf(),e.val.key_code);
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @returns {void}
*/
function main__Game_rotate_tetro(game) {
game = new $ref(game)
	try {
		/** @type {int} */
		const old_rotation_idx = new int(game.val.rotation_idx);
		game.val.rotation_idx.val ++;
		if ((new bool(game.val.rotation_idx.valueOf() == main__tetro_size.valueOf())).valueOf()) {
			/** @type {int} */
			game.val.rotation_idx = new int(new int(0));
		}
		main__Game_get_tetro(game.valueOf(),);
		if ((!main__Game_move_right(game.valueOf(),new int(0)).val ).valueOf()) {
			/** @type {int} */
			game.val.rotation_idx = new int(old_rotation_idx);
			main__Game_get_tetro(game.valueOf(),);
		}
		if ((new bool(game.val.pos_x.valueOf() < new int(0).valueOf())).valueOf()) {
		}
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

/**
 * @function
 * @param {gg__KeyCode} key
 * @returns {void}
*/
function main__Game_key_down(game, key) {
game = new $ref(game)
	try {
		
		if (vEq(key,gg__KeyCode.escape)) {
			gg__Context_quit(game.val.gg.valueOf(),);
		}
		else if (vEq(key,gg__KeyCode.space)) {
			if ((new bool(game.val.state.valueOf() == main__GameState.running.valueOf())).valueOf()) {
				/** @type {main__GameState} */
				game.val.state = main__GameState.paused;
			} else if ((new bool(game.val.state.valueOf() == main__GameState.paused.valueOf())).valueOf()) {
				/** @type {main__GameState} */
				game.val.state = main__GameState.running;
			} else if ((new bool(game.val.state.valueOf() == main__GameState.gameover.valueOf())).valueOf()) {
				main__Game_init_game(game.valueOf(),);
				new bool(game.val.state.valueOf() == main__GameState.running.valueOf());
			}
		}
		else {
		};
		if ((new bool(game.val.state.valueOf() != main__GameState.running.valueOf())).valueOf()) {
			return;
		}
		switch (key) {
			case gg__KeyCode.up: 
				{
					main__Game_rotate_tetro(game.valueOf(),);
				} break;
			case gg__KeyCode.left: 
				{
					main__Game_move_right(game.valueOf(),new int(-1));
				} break;
			case gg__KeyCode.right: 
				{
					main__Game_move_right(game.valueOf(),new int(1));
				} break;
			case gg__KeyCode.down: 
				{
					main__Game_move_tetro(game.valueOf(),);
				} break;
			case gg__KeyCode.d: 
				{
					while (+main__Game_move_tetro(game.valueOf(),)) {
						try { 
						} catch (e) {
						 if (e instanceof BreakException) { break; }
						 else if (e instanceof ContinueException) { continue; }
						 else { throw e; } }
					}
					
				} break;
			case gg__KeyCode.g: 
				{
					/** @type {bool} */
					game.val.show_ghost = new bool(!game.val.show_ghost.val );
				} break;
			default:
				{
				} break;
		}
		;
	} catch (e) { 
		if (e instanceof ReturnException) { return e.val; } 
		throw e;
	}
}

None__.prototype.msg = function() {
	return IError_msg(this)
}
None__.prototype.code = function() {
	return IError_code(this)
}
None__.prototype.str = function() {
	return None___str(this)
}
Error.prototype.msg = function() {
	return Error_msg(this)
}
Error.prototype.code = function() {
	return Error_code(this)
}
Error.prototype.str = function() {
	return IError_str(this)
}
MessageError.prototype.msg = function() {
	return MessageError_msg(this)
}
MessageError.prototype.code = function() {
	return MessageError_code(this)
}
MessageError.prototype.str = function() {
	return IError_str(this)
}
time__TimeParseError.prototype.msg = function() {
	return time__TimeParseError_msg(this)
}
time__TimeParseError.prototype.code = function() {
	return IError_code(this)
}
time__TimeParseError.prototype.str = function() {
	return IError_str(this)
}
rand__wyrand__WyRandRNG.prototype.seed = function(seed_data) {
	return rand__wyrand__WyRandRNG_seed(this,seed_data)
}
rand__wyrand__WyRandRNG.prototype.u8 = function() {
	return rand__wyrand__WyRandRNG_u8(this)
}
rand__wyrand__WyRandRNG.prototype.u16 = function() {
	return rand__wyrand__WyRandRNG_u16(this)
}
rand__wyrand__WyRandRNG.prototype.u32 = function() {
	return rand__wyrand__WyRandRNG_u32(this)
}
rand__wyrand__WyRandRNG.prototype.u64 = function() {
	return rand__wyrand__WyRandRNG_u64(this)
}
rand__wyrand__WyRandRNG.prototype.block_size = function() {
	return rand__wyrand__WyRandRNG_block_size(this)
}
rand__wyrand__WyRandRNG.prototype.free = function() {
	return rand__wyrand__WyRandRNG_free(this)
}
rand__wyrand__WyRandRNG.prototype.bytes = function(bytes_needed) {
	return rand__PRNG_bytes(this,bytes_needed)
}
rand__wyrand__WyRandRNG.prototype.read = function(buf) {
	return rand__PRNG_read(this,buf)
}
rand__wyrand__WyRandRNG.prototype.u32n = function(max) {
	return rand__PRNG_u32n(this,max)
}
rand__wyrand__WyRandRNG.prototype.u64n = function(max) {
	return rand__PRNG_u64n(this,max)
}
rand__wyrand__WyRandRNG.prototype.u32_in_range = function(min,max) {
	return rand__PRNG_u32_in_range(this,min,max)
}
rand__wyrand__WyRandRNG.prototype.u64_in_range = function(min,max) {
	return rand__PRNG_u64_in_range(this,min,max)
}
rand__wyrand__WyRandRNG.prototype.i8 = function() {
	return rand__PRNG_i8(this)
}
rand__wyrand__WyRandRNG.prototype.i16 = function() {
	return rand__PRNG_i16(this)
}
rand__wyrand__WyRandRNG.prototype.int = function() {
	return rand__PRNG_int(this)
}
rand__wyrand__WyRandRNG.prototype.i64 = function() {
	return rand__PRNG_i64(this)
}
rand__wyrand__WyRandRNG.prototype.int31 = function() {
	return rand__PRNG_int31(this)
}
rand__wyrand__WyRandRNG.prototype.int63 = function() {
	return rand__PRNG_int63(this)
}
rand__wyrand__WyRandRNG.prototype.intn = function(max) {
	return rand__PRNG_intn(this,max)
}
rand__wyrand__WyRandRNG.prototype.i64n = function(max) {
	return rand__PRNG_i64n(this,max)
}
rand__wyrand__WyRandRNG.prototype.int_in_range = function(min,max) {
	return rand__PRNG_int_in_range(this,min,max)
}
rand__wyrand__WyRandRNG.prototype.i64_in_range = function(min,max) {
	return rand__PRNG_i64_in_range(this,min,max)
}
rand__wyrand__WyRandRNG.prototype.f32 = function() {
	return rand__PRNG_f32(this)
}
rand__wyrand__WyRandRNG.prototype.f64 = function() {
	return rand__PRNG_f64(this)
}
rand__wyrand__WyRandRNG.prototype.f32n = function(max) {
	return rand__PRNG_f32n(this,max)
}
rand__wyrand__WyRandRNG.prototype.f64n = function(max) {
	return rand__PRNG_f64n(this,max)
}
rand__wyrand__WyRandRNG.prototype.f32_in_range = function(min,max) {
	return rand__PRNG_f32_in_range(this,min,max)
}
rand__wyrand__WyRandRNG.prototype.f64_in_range = function(min,max) {
	return rand__PRNG_f64_in_range(this,min,max)
}
rand__wyrand__WyRandRNG.prototype.ulid = function() {
	return rand__PRNG_ulid(this)
}
rand__wyrand__WyRandRNG.prototype.ulid_at_millisecond = function(unix_time_milli) {
	return rand__PRNG_ulid_at_millisecond(this,unix_time_milli)
}
rand__wyrand__WyRandRNG.prototype.string_from_set = function(charset,len) {
	return rand__PRNG_string_from_set(this,charset,len)
}
rand__wyrand__WyRandRNG.prototype.string = function(len) {
	return rand__PRNG_string(this,len)
}
rand__wyrand__WyRandRNG.prototype.hex = function(len) {
	return rand__PRNG_hex(this,len)
}
rand__wyrand__WyRandRNG.prototype.ascii = function(len) {
	return rand__PRNG_ascii(this,len)
}
rand__wyrand__WyRandRNG.prototype.bernoulli = function(p) {
	return rand__PRNG_bernoulli(this,p)
}
rand__wyrand__WyRandRNG.prototype.normal = function(conf) {
	return rand__PRNG_normal(this,conf)
}
rand__wyrand__WyRandRNG.prototype.normal_pair = function(conf) {
	return rand__PRNG_normal_pair(this,conf)
}
rand__wyrand__WyRandRNG.prototype.binomial = function(n,p) {
	return rand__PRNG_binomial(this,n,p)
}
rand__wyrand__WyRandRNG.prototype.exponential = function(lambda) {
	return rand__PRNG_exponential(this,lambda)
}
rand__wyrand__WyRandRNG.prototype.shuffle = function(a,config) {
	return rand__PRNG_shuffle(this,a,config)
}
rand__wyrand__WyRandRNG.prototype.shuffle_clone = function(a,config) {
	return rand__PRNG_shuffle_clone(this,a,config)
}
rand__wyrand__WyRandRNG.prototype.choose = function(array,k) {
	return rand__PRNG_choose(this,array,k)
}
rand__wyrand__WyRandRNG.prototype.sample = function(array,k) {
	return rand__PRNG_sample(this,array,k)
}
// Initializations for module strings
// Initializations for module math.bits
math__bits__de_bruijn32 = new int(0x077CB531);
math__bits__de_bruijn32tab = new array(new array_buffer({arr: [new u8(new int(0)), new u8(new int(1)), new u8(new int(28)), new u8(new int(2)), new u8(new int(29)), new u8(new int(14)), new u8(new int(24)), new u8(new int(3)), new u8(new int(30)), new u8(new int(22)), new u8(new int(20)), new u8(new int(15)), new u8(new int(25)), new u8(new int(17)), new u8(new int(4)), new u8(new int(8)), new u8(new int(31)), new u8(new int(27)), new u8(new int(13)), new u8(new int(23)), new u8(new int(21)), new u8(new int(19)), new u8(new int(16)), new u8(new int(7)), new u8(new int(26)), new u8(new int(12)), new u8(new int(18)), new u8(new int(6)), new u8(new int(11)), new u8(new int(5)), new u8(new int(10)), new u8(new int(9))], len: new int(32), cap: new int(32)}));
math__bits__de_bruijn64 = new u64(BigInt(0x03f79d71b4ca8b09n));
math__bits__de_bruijn64tab = new array(new array_buffer({arr: [new u8(new int(0)), new u8(new int(1)), new u8(new int(56)), new u8(new int(2)), new u8(new int(57)), new u8(new int(49)), new u8(new int(28)), new u8(new int(3)), new u8(new int(61)), new u8(new int(58)), new u8(new int(42)), new u8(new int(50)), new u8(new int(38)), new u8(new int(29)), new u8(new int(17)), new u8(new int(4)), new u8(new int(62)), new u8(new int(47)), new u8(new int(59)), new u8(new int(36)), new u8(new int(45)), new u8(new int(43)), new u8(new int(51)), new u8(new int(22)), new u8(new int(53)), new u8(new int(39)), new u8(new int(33)), new u8(new int(30)), new u8(new int(24)), new u8(new int(18)), new u8(new int(12)), new u8(new int(5)), new u8(new int(63)), new u8(new int(55)), new u8(new int(48)), new u8(new int(27)), new u8(new int(60)), new u8(new int(41)), new u8(new int(37)), new u8(new int(16)), new u8(new int(46)), new u8(new int(35)), new u8(new int(44)), new u8(new int(21)), new u8(new int(52)), new u8(new int(32)), new u8(new int(23)), new u8(new int(11)), new u8(new int(54)), new u8(new int(26)), new u8(new int(40)), new u8(new int(15)), new u8(new int(34)), new u8(new int(20)), new u8(new int(31)), new u8(new int(10)), new u8(new int(25)), new u8(new int(14)), new u8(new int(19)), new u8(new int(9)), new u8(new int(13)), new u8(new int(8)), new u8(new int(7)), new u8(new int(6))], len: new int(64), cap: new int(64)}));
math__bits__m0 = new u64(BigInt(0x5555555555555555n));
math__bits__m1 = new u64(BigInt(0x3333333333333333n));
math__bits__m2 = new u64(BigInt(0x0f0f0f0f0f0f0f0fn));
math__bits__m3 = new u64(BigInt(0x00ff00ff00ff00ffn));
math__bits__m4 = new u64(BigInt(0x0000ffff0000ffffn));
math__bits__max_u32 = new int(4294967295);
math__bits__max_u64 = new u64(BigInt(18446744073709551615n));
math__bits__n8 = new int(8);
math__bits__n16 = new int(16);
math__bits__n32 = new int(32);
math__bits__n64 = new u64(BigInt(64n));
math__bits__two32 = new u64(BigInt(0x100000000n));
math__bits__mask32 = new u64( BigInt(math__bits__two32.valueOf()) - BigInt(new int(1).valueOf()));
math__bits__ntz_8_tab = new array(new array_buffer({arr: [new u8(new int(0x08)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x04)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x05)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x04)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x06)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x04)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x05)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x04)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x07)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x04)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x05)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x04)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x06)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x04)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x05)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x04)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x03)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00)), new u8(new int(0x02)), new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x00))], len: new int(256), cap: new int(256)}));
math__bits__pop_8_tab = new array(new array_buffer({arr: [new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x01)), new u8(new int(0x02)), new u8(new int(0x01)), new u8(new int(0x02)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x01)), new u8(new int(0x02)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x01)), new u8(new int(0x02)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x01)), new u8(new int(0x02)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x01)), new u8(new int(0x02)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x07)), new u8(new int(0x01)), new u8(new int(0x02)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x07)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x07)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x07)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x07)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x07)), new u8(new int(0x06)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x08))], len: new int(256), cap: new int(256)}));
math__bits__rev_8_tab = new array(new array_buffer({arr: [new u8(new int(0x00)), new u8(new int(0x80)), new u8(new int(0x40)), new u8(new int(0xc0)), new u8(new int(0x20)), new u8(new int(0xa0)), new u8(new int(0x60)), new u8(new int(0xe0)), new u8(new int(0x10)), new u8(new int(0x90)), new u8(new int(0x50)), new u8(new int(0xd0)), new u8(new int(0x30)), new u8(new int(0xb0)), new u8(new int(0x70)), new u8(new int(0xf0)), new u8(new int(0x08)), new u8(new int(0x88)), new u8(new int(0x48)), new u8(new int(0xc8)), new u8(new int(0x28)), new u8(new int(0xa8)), new u8(new int(0x68)), new u8(new int(0xe8)), new u8(new int(0x18)), new u8(new int(0x98)), new u8(new int(0x58)), new u8(new int(0xd8)), new u8(new int(0x38)), new u8(new int(0xb8)), new u8(new int(0x78)), new u8(new int(0xf8)), new u8(new int(0x04)), new u8(new int(0x84)), new u8(new int(0x44)), new u8(new int(0xc4)), new u8(new int(0x24)), new u8(new int(0xa4)), new u8(new int(0x64)), new u8(new int(0xe4)), new u8(new int(0x14)), new u8(new int(0x94)), new u8(new int(0x54)), new u8(new int(0xd4)), new u8(new int(0x34)), new u8(new int(0xb4)), new u8(new int(0x74)), new u8(new int(0xf4)), new u8(new int(0x0c)), new u8(new int(0x8c)), new u8(new int(0x4c)), new u8(new int(0xcc)), new u8(new int(0x2c)), new u8(new int(0xac)), new u8(new int(0x6c)), new u8(new int(0xec)), new u8(new int(0x1c)), new u8(new int(0x9c)), new u8(new int(0x5c)), new u8(new int(0xdc)), new u8(new int(0x3c)), new u8(new int(0xbc)), new u8(new int(0x7c)), new u8(new int(0xfc)), new u8(new int(0x02)), new u8(new int(0x82)), new u8(new int(0x42)), new u8(new int(0xc2)), new u8(new int(0x22)), new u8(new int(0xa2)), new u8(new int(0x62)), new u8(new int(0xe2)), new u8(new int(0x12)), new u8(new int(0x92)), new u8(new int(0x52)), new u8(new int(0xd2)), new u8(new int(0x32)), new u8(new int(0xb2)), new u8(new int(0x72)), new u8(new int(0xf2)), new u8(new int(0x0a)), new u8(new int(0x8a)), new u8(new int(0x4a)), new u8(new int(0xca)), new u8(new int(0x2a)), new u8(new int(0xaa)), new u8(new int(0x6a)), new u8(new int(0xea)), new u8(new int(0x1a)), new u8(new int(0x9a)), new u8(new int(0x5a)), new u8(new int(0xda)), new u8(new int(0x3a)), new u8(new int(0xba)), new u8(new int(0x7a)), new u8(new int(0xfa)), new u8(new int(0x06)), new u8(new int(0x86)), new u8(new int(0x46)), new u8(new int(0xc6)), new u8(new int(0x26)), new u8(new int(0xa6)), new u8(new int(0x66)), new u8(new int(0xe6)), new u8(new int(0x16)), new u8(new int(0x96)), new u8(new int(0x56)), new u8(new int(0xd6)), new u8(new int(0x36)), new u8(new int(0xb6)), new u8(new int(0x76)), new u8(new int(0xf6)), new u8(new int(0x0e)), new u8(new int(0x8e)), new u8(new int(0x4e)), new u8(new int(0xce)), new u8(new int(0x2e)), new u8(new int(0xae)), new u8(new int(0x6e)), new u8(new int(0xee)), new u8(new int(0x1e)), new u8(new int(0x9e)), new u8(new int(0x5e)), new u8(new int(0xde)), new u8(new int(0x3e)), new u8(new int(0xbe)), new u8(new int(0x7e)), new u8(new int(0xfe)), new u8(new int(0x01)), new u8(new int(0x81)), new u8(new int(0x41)), new u8(new int(0xc1)), new u8(new int(0x21)), new u8(new int(0xa1)), new u8(new int(0x61)), new u8(new int(0xe1)), new u8(new int(0x11)), new u8(new int(0x91)), new u8(new int(0x51)), new u8(new int(0xd1)), new u8(new int(0x31)), new u8(new int(0xb1)), new u8(new int(0x71)), new u8(new int(0xf1)), new u8(new int(0x09)), new u8(new int(0x89)), new u8(new int(0x49)), new u8(new int(0xc9)), new u8(new int(0x29)), new u8(new int(0xa9)), new u8(new int(0x69)), new u8(new int(0xe9)), new u8(new int(0x19)), new u8(new int(0x99)), new u8(new int(0x59)), new u8(new int(0xd9)), new u8(new int(0x39)), new u8(new int(0xb9)), new u8(new int(0x79)), new u8(new int(0xf9)), new u8(new int(0x05)), new u8(new int(0x85)), new u8(new int(0x45)), new u8(new int(0xc5)), new u8(new int(0x25)), new u8(new int(0xa5)), new u8(new int(0x65)), new u8(new int(0xe5)), new u8(new int(0x15)), new u8(new int(0x95)), new u8(new int(0x55)), new u8(new int(0xd5)), new u8(new int(0x35)), new u8(new int(0xb5)), new u8(new int(0x75)), new u8(new int(0xf5)), new u8(new int(0x0d)), new u8(new int(0x8d)), new u8(new int(0x4d)), new u8(new int(0xcd)), new u8(new int(0x2d)), new u8(new int(0xad)), new u8(new int(0x6d)), new u8(new int(0xed)), new u8(new int(0x1d)), new u8(new int(0x9d)), new u8(new int(0x5d)), new u8(new int(0xdd)), new u8(new int(0x3d)), new u8(new int(0xbd)), new u8(new int(0x7d)), new u8(new int(0xfd)), new u8(new int(0x03)), new u8(new int(0x83)), new u8(new int(0x43)), new u8(new int(0xc3)), new u8(new int(0x23)), new u8(new int(0xa3)), new u8(new int(0x63)), new u8(new int(0xe3)), new u8(new int(0x13)), new u8(new int(0x93)), new u8(new int(0x53)), new u8(new int(0xd3)), new u8(new int(0x33)), new u8(new int(0xb3)), new u8(new int(0x73)), new u8(new int(0xf3)), new u8(new int(0x0b)), new u8(new int(0x8b)), new u8(new int(0x4b)), new u8(new int(0xcb)), new u8(new int(0x2b)), new u8(new int(0xab)), new u8(new int(0x6b)), new u8(new int(0xeb)), new u8(new int(0x1b)), new u8(new int(0x9b)), new u8(new int(0x5b)), new u8(new int(0xdb)), new u8(new int(0x3b)), new u8(new int(0xbb)), new u8(new int(0x7b)), new u8(new int(0xfb)), new u8(new int(0x07)), new u8(new int(0x87)), new u8(new int(0x47)), new u8(new int(0xc7)), new u8(new int(0x27)), new u8(new int(0xa7)), new u8(new int(0x67)), new u8(new int(0xe7)), new u8(new int(0x17)), new u8(new int(0x97)), new u8(new int(0x57)), new u8(new int(0xd7)), new u8(new int(0x37)), new u8(new int(0xb7)), new u8(new int(0x77)), new u8(new int(0xf7)), new u8(new int(0x0f)), new u8(new int(0x8f)), new u8(new int(0x4f)), new u8(new int(0xcf)), new u8(new int(0x2f)), new u8(new int(0xaf)), new u8(new int(0x6f)), new u8(new int(0xef)), new u8(new int(0x1f)), new u8(new int(0x9f)), new u8(new int(0x5f)), new u8(new int(0xdf)), new u8(new int(0x3f)), new u8(new int(0xbf)), new u8(new int(0x7f)), new u8(new int(0xff))], len: new int(256), cap: new int(256)}));
math__bits__len_8_tab = new array(new array_buffer({arr: [new u8(new int(0x00)), new u8(new int(0x01)), new u8(new int(0x02)), new u8(new int(0x02)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x03)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x04)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x05)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x06)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x07)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08)), new u8(new int(0x08))], len: new int(256), cap: new int(256)}));
// Initializations for module builtin
none__ = new IError(new $ref(new None__({})));
// Initializations for module time
time__tokens_2 = new array(new array_buffer({arr: [new string(new string("MM")), new string(new string("DD")), new string(new string("Do")), new string(new string("YY")), new string(new string("ss")), new string(new string("kk")), new string(new string("NN")), new string(new string("mm")), new string(new string("hh")), new string(new string("HH")), new string(new string("ZZ")), new string(new string("dd")), new string(new string("Qo")), new string(new string("QQ")), new string(new string("wo")), new string(new string("ww"))], len: new int(16), cap: new int(16)}));
time__tokens_3 = new array(new array_buffer({arr: [new string(new string("MMM")), new string(new string("DDD")), new string(new string("ZZZ")), new string(new string("ddd"))], len: new int(4), cap: new int(4)}));
time__tokens_4 = new array(new array_buffer({arr: [new string(new string("MMMM")), new string(new string("DDDD")), new string(new string("DDDo")), new string(new string("dddd")), new string(new string("YYYY"))], len: new int(5), cap: new int(5)}));
time__long_days = new array(new array_buffer({arr: [new string(new string("Monday")), new string(new string("Tuesday")), new string(new string("Wednesday")), new string(new string("Thursday")), new string(new string("Friday")), new string(new string("Saturday")), new string(new string("Sunday"))], len: new int(7), cap: new int(7)}));
time__month_days = new array(new array_buffer({arr: [new int(new int(31)), new int(new int(28)), new int(new int(31)), new int(new int(30)), new int(new int(31)), new int(new int(30)), new int(new int(31)), new int(new int(31)), new int(new int(30)), new int(new int(31)), new int(new int(30)), new int(new int(31))], len: new int(12), cap: new int(12)}));
time__long_months = new array(new array_buffer({arr: [new string(new string("January")), new string(new string("February")), new string(new string("March")), new string(new string("April")), new string(new string("May")), new string(new string("June")), new string(new string("July")), new string(new string("August")), new string(new string("September")), new string(new string("October")), new string(new string("November")), new string(new string("December"))], len: new int(12), cap: new int(12)}));
time__absolute_zero_year = new i64(BigInt(-292277022399n));
time__seconds_per_hour = new int_literal( new int(60).valueOf() * time__seconds_per_minute.valueOf());
time__seconds_per_day = new int_literal( new int(24).valueOf() * time__seconds_per_hour.valueOf());
time__seconds_per_week = new int_literal( new int(7).valueOf() * time__seconds_per_day.valueOf());
time__days_per_400_years = new int_literal( new int_literal( time__days_in_year.valueOf() * new int(400).valueOf()).valueOf() + new int(97).valueOf());
time__days_per_100_years = new int_literal( new int_literal( time__days_in_year.valueOf() * new int(100).valueOf()).valueOf() + new int(24).valueOf());
time__days_per_4_years = new int_literal( new int_literal( time__days_in_year.valueOf() * new int(4).valueOf()).valueOf() + new int(1).valueOf());
time__days_before = new array(new array_buffer({arr: [new int(new int(0)), new int(new int(31)), new int(new int(59)), new int(new int(90)), new int(new int(120)), new int(new int(151)), new int(new int(181)), new int(new int(212)), new int(new int(243)), new int(new int(273)), new int(new int(304)), new int(new int(334)), new int(new int(365))], len: new int(13), cap: new int(13)}));
time__nanosecond = new time__Duration(new int(1));
time__microsecond = new time__Duration(new int_literal( BigInt(new int(1000).valueOf()) * BigInt(time__nanosecond.valueOf())));
time__millisecond = new time__Duration(new int_literal( BigInt(new int(1000).valueOf()) * BigInt(time__microsecond.valueOf())));
time__second = new time__Duration(new int_literal( BigInt(new int(1000).valueOf()) * BigInt(time__millisecond.valueOf())));
time__minute = new time__Duration(new int_literal( BigInt(new int(60).valueOf()) * BigInt(time__second.valueOf())));
time__hour = new time__Duration(new int_literal( BigInt(new int(60).valueOf()) * BigInt(time__minute.valueOf())));
time__infinite = new time__Duration(new i64(BigInt(9223372036854775807n)));
// Initializations for module gx
gx__black = (function() {
	let _tmp105 = new gx__Color({});
	_tmp105.r = new int(0);
	_tmp105.g = new int(0);
	_tmp105.b = new int(0);
	return _tmp105;
})()
;
gx__gray = (function() {
	let _tmp106 = new gx__Color({});
	_tmp106.r = new int(128);
	_tmp106.g = new int(128);
	_tmp106.b = new int(128);
	return _tmp106;
})()
;
gx__white = (function() {
	let _tmp107 = new gx__Color({});
	_tmp107.r = new int(255);
	_tmp107.g = new int(255);
	_tmp107.b = new int(255);
	return _tmp107;
})()
;
gx__red = (function() {
	let _tmp108 = new gx__Color({});
	_tmp108.r = new int(255);
	_tmp108.g = new int(0);
	_tmp108.b = new int(0);
	return _tmp108;
})()
;
gx__green = (function() {
	let _tmp109 = new gx__Color({});
	_tmp109.r = new int(0);
	_tmp109.g = new int(255);
	_tmp109.b = new int(0);
	return _tmp109;
})()
;
gx__blue = (function() {
	let _tmp110 = new gx__Color({});
	_tmp110.r = new int(0);
	_tmp110.g = new int(0);
	_tmp110.b = new int(255);
	return _tmp110;
})()
;
gx__yellow = (function() {
	let _tmp111 = new gx__Color({});
	_tmp111.r = new int(255);
	_tmp111.g = new int(255);
	_tmp111.b = new int(0);
	return _tmp111;
})()
;
gx__magenta = (function() {
	let _tmp112 = new gx__Color({});
	_tmp112.r = new int(255);
	_tmp112.g = new int(0);
	_tmp112.b = new int(255);
	return _tmp112;
})()
;
gx__cyan = (function() {
	let _tmp113 = new gx__Color({});
	_tmp113.r = new int(0);
	_tmp113.g = new int(255);
	_tmp113.b = new int(255);
	return _tmp113;
})()
;
gx__orange = (function() {
	let _tmp114 = new gx__Color({});
	_tmp114.r = new int(255);
	_tmp114.g = new int(165);
	_tmp114.b = new int(0);
	return _tmp114;
})()
;
gx__purple = (function() {
	let _tmp115 = new gx__Color({});
	_tmp115.r = new int(128);
	_tmp115.g = new int(0);
	_tmp115.b = new int(128);
	return _tmp115;
})()
;
gx__indigo = (function() {
	let _tmp116 = new gx__Color({});
	_tmp116.r = new int(75);
	_tmp116.g = new int(0);
	_tmp116.b = new int(130);
	return _tmp116;
})()
;
gx__pink = (function() {
	let _tmp117 = new gx__Color({});
	_tmp117.r = new int(255);
	_tmp117.g = new int(192);
	_tmp117.b = new int(203);
	return _tmp117;
})()
;
gx__violet = (function() {
	let _tmp118 = new gx__Color({});
	_tmp118.r = new int(238);
	_tmp118.g = new int(130);
	_tmp118.b = new int(238);
	return _tmp118;
})()
;
gx__dark_blue = (function() {
	let _tmp119 = new gx__Color({});
	_tmp119.r = new int(0);
	_tmp119.g = new int(0);
	_tmp119.b = new int(139);
	return _tmp119;
})()
;
gx__dark_gray = (function() {
	let _tmp120 = new gx__Color({});
	_tmp120.r = new int(169);
	_tmp120.g = new int(169);
	_tmp120.b = new int(169);
	return _tmp120;
})()
;
gx__dark_green = (function() {
	let _tmp121 = new gx__Color({});
	_tmp121.r = new int(0);
	_tmp121.g = new int(100);
	_tmp121.b = new int(0);
	return _tmp121;
})()
;
gx__dark_red = (function() {
	let _tmp122 = new gx__Color({});
	_tmp122.r = new int(139);
	_tmp122.g = new int(0);
	_tmp122.b = new int(0);
	return _tmp122;
})()
;
gx__light_blue = (function() {
	let _tmp123 = new gx__Color({});
	_tmp123.r = new int(173);
	_tmp123.g = new int(216);
	_tmp123.b = new int(230);
	return _tmp123;
})()
;
gx__light_gray = (function() {
	let _tmp124 = new gx__Color({});
	_tmp124.r = new int(211);
	_tmp124.g = new int(211);
	_tmp124.b = new int(211);
	return _tmp124;
})()
;
gx__light_green = (function() {
	let _tmp125 = new gx__Color({});
	_tmp125.r = new int(144);
	_tmp125.g = new int(238);
	_tmp125.b = new int(144);
	return _tmp125;
})()
;
gx__light_red = (function() {
	let _tmp126 = new gx__Color({});
	_tmp126.r = new int(255);
	_tmp126.g = new int(204);
	_tmp126.b = new int(203);
	return _tmp126;
})()
;
gx__string_colors = new map(
	{
		[new string("blue").$toJS()]: gx__blue,
		[new string("red").$toJS()]: gx__red,
		[new string("green").$toJS()]: gx__green,
		[new string("yellow").$toJS()]: gx__yellow,
		[new string("orange").$toJS()]: gx__orange,
		[new string("purple").$toJS()]: gx__purple,
		[new string("black").$toJS()]: gx__black,
		[new string("gray").$toJS()]: gx__gray,
		[new string("indigo").$toJS()]: gx__indigo,
		[new string("pink").$toJS()]: gx__pink,
		[new string("violet").$toJS()]: gx__violet,
		[new string("white").$toJS()]: gx__white,
		[new string("dark_blue").$toJS()]: gx__dark_blue,
		[new string("dark_gray").$toJS()]: gx__dark_gray,
		[new string("dark_green").$toJS()]: gx__dark_green,
		[new string("dark_red").$toJS()]: gx__dark_red,
		[new string("light_blue").$toJS()]: gx__light_blue,
		[new string("light_gray").$toJS()]: gx__light_gray,
		[new string("light_green").$toJS()]: gx__light_green,
		[new string("light_red").$toJS()]: gx__light_red
	});
gx__align_left = gx__HorizontalAlign.left;
gx__align_right = gx__HorizontalAlign.right;
// Initializations for module rand.constants
rand__constants__lower_mask = new u64(BigInt(0x00000000FFFFFFFFn));
rand__constants__max_u64 = new u64(BigInt(0xFFFFFFFFFFFFFFFFn));
rand__constants__max_u32_as_f32 = new f32( new f32(rand__constants__max_u32).valueOf() + new int(1).valueOf());
rand__constants__max_u64_as_f64 = new f64( new f64(rand__constants__max_u64).valueOf() + new int(1).valueOf());
rand__constants__u31_mask = new int(0x7FFFFFFF);
rand__constants__u63_mask = new u64(BigInt(0x7FFFFFFFFFFFFFFFn));
// Initializations for module js.dom
js__dom__document = new Document();
js__dom__init();
// Initializations for module hash
hash__wyp0 = new u64(BigInt(0xa0761d6478bd642fn));
hash__wyp1 = new u64(BigInt(0xe7037ed1a0b428dbn));
hash__wyp2 = new u64(BigInt(0x8ebc6af09c88c6e3n));
hash__wyp3 = new u64(BigInt(0x589965cc75374cc3n));
hash__wyp4 = new u64(BigInt(0x1d8e4e27c47d124fn));
// Initializations for module rand.buffer
// Initializations for module gg
gg__size = (function() {
	let _tmp127 = new gg__Size({});
	_tmp127.width = new int(0);
	_tmp127.height = new int(0);
	return _tmp127;
})()
;
// Initializations for module rand.seed
// Initializations for module rand.config
// Initializations for module rand.wyrand
rand__wyrand__wyp0 = new u64(BigInt(0xa0761d6478bd642fn));
rand__wyrand__wyp1 = new u64(BigInt(0xe7037ed1a0b428dbn));
// Initializations for module rand
rand__init();
// Initializations for module main
main__win_width = new int_literal( main__block_size.valueOf() * main__field_width.valueOf());
main__win_height = new int_literal( main__block_size.valueOf() * main__field_height.valueOf());
main__text_cfg = (function() {
	let _tmp128 = new gx__TextCfg({});
	_tmp128.align = gx__HorizontalAlign.left;
	_tmp128.size = main__text_size;
	_tmp128.color = gx__rgb(new int(0), new int(0), new int(0));
	return _tmp128;
})()
;
main__over_cfg = (function() {
	let _tmp129 = new gx__TextCfg({});
	_tmp129.align = gx__HorizontalAlign.left;
	_tmp129.size = main__text_size;
	_tmp129.color = gx__white;
	return _tmp129;
})()
;
main__b_tetros = new array(new array_buffer({arr: [new array(new array_buffer({arr: [new int(new int(66)), new int(new int(66)), new int(new int(66)), new int(new int(66))], len: new int(4), cap: new int(4)})), new array(new array_buffer({arr: [new int(new int(27)), new int(new int(131)), new int(new int(72)), new int(new int(231))], len: new int(4), cap: new int(4)})), new array(new array_buffer({arr: [new int(new int(36)), new int(new int(231)), new int(new int(36)), new int(new int(231))], len: new int(4), cap: new int(4)})), new array(new array_buffer({arr: [new int(new int(63)), new int(new int(132)), new int(new int(63)), new int(new int(132))], len: new int(4), cap: new int(4)})), new array(new array_buffer({arr: [new int(new int(311)), new int(new int(17)), new int(new int(223)), new int(new int(74))], len: new int(4), cap: new int(4)})), new array(new array_buffer({arr: [new int(new int(322)), new int(new int(71)), new int(new int(113)), new int(new int(47))], len: new int(4), cap: new int(4)})), new array(new array_buffer({arr: [new int(new int(1111)), new int(new int(9)), new int(new int(1111)), new int(new int(9))], len: new int(4), cap: new int(4)}))], len: new int(7), cap: new int(7)}));
main__colors = new array(new array_buffer({arr: [gx__rgb(new int(0), new int(0), new int(0)), gx__rgb(new int(255), new int(242), new int(0)), gx__rgb(new int(174), new int(0), new int(255)), gx__rgb(new int(60), new int(255), new int(0)), gx__rgb(new int(255), new int(0), new int(0)), gx__rgb(new int(255), new int(180), new int(31)), gx__rgb(new int(33), new int(66), new int(255)), gx__rgb(new int(74), new int(198), new int(255)), gx__rgb(new int(0), new int(170), new int(170))], len: new int(9), cap: new int(9)}));
main__background_color = gx__white;
main__ui_color = gx__rgba(new int(255), new int(0), new int(0), new int(210));
loadRoutine().then(_ => js_main());